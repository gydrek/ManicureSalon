import 'package:flutter/foundation.dart';
import 'package:nastya_app/models/models.dart';
import 'package:nastya_app/services/firestore_service.dart';
import 'package:nastya_app/providers/language_provider.dart';
import 'dart:async';

/// –ì–ª–æ–±–∞–ª—å–Ω–∏–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä —Å—Ç–∞–Ω—É –¥–ª—è –≤—Å—å–æ–≥–æ –¥–æ–¥–∞—Ç–∫—É
/// –¶–µ–Ω—Ç—Ä–∞–ª—ñ–∑—É—î —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –¥–∞–Ω–∏–º–∏ —Ç–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è–º–∏
class AppStateProvider extends ChangeNotifier {
  static final AppStateProvider _instance = AppStateProvider._internal();
  factory AppStateProvider() => _instance;
  AppStateProvider._internal();

  final FirestoreService _firestoreService = FirestoreService();
  LanguageProvider? _languageProvider;

  /// –í—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –ø—Ä–æ–≤–∞–π–¥–µ—Ä –º–æ–≤–∏ –¥–ª—è –ª–æ–∫–∞–ª—ñ–∑–∞—Ü—ñ—ó
  void setLanguageProvider(LanguageProvider languageProvider) {
    _languageProvider = languageProvider;
    
    // –°–ª—É—Ö–∞—î–º–æ –∑–º—ñ–Ω–∏ –º–æ–≤–∏ —ñ –æ–Ω–æ–≤–ª—é—î–º–æ –¥–∞–Ω—ñ –ø—Ä–∏ –∑–º—ñ–Ω—ñ
    languageProvider.addListener(() {
      _calculateNextSessions(); // –ü–µ—Ä–µ—Ä–∞—Ö—É–Ω–æ–∫ –∑ –Ω–æ–≤–æ—é –º–æ–≤–æ—é
      notifyListeners();
    });
  }

  // ===== –°–¢–ê–ù –î–ê–ù–ò–• =====
  List<Master> _masters = [];
  List<Client> _clients = [];
  Map<String, List<Session>> _sessionsByMaster = {}; // masterId -> sessions
  Map<String, String> _nextSessionsByMaster = {}; // masterId -> next session info
  
  bool _isLoading = false;
  DateTime _lastUpdate = DateTime.now();
  Timer? _autoUpdateTimer;
  int _lastSessionCount = 0; // –ö—ñ–ª—å–∫—ñ—Å—Ç—å —Å–µ—Å—ñ–π –ø—Ä–∏ –æ—Å—Ç–∞–Ω–Ω—å–æ–º—É –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ
  
  // –ö–µ—à –¥–ª—è –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó (TTL = 3 —Ö–≤–∏–ª–∏–Ω–∏)
  static const Duration _cacheTTL = Duration(minutes: 3);
  DateTime? _lastDataLoad;
  bool _cacheInvalidated = false; // –ü—Ä–∞–ø–æ—Ä —ñ–Ω–≤–∞–ª—ñ–¥–∞—Ü—ñ—ó –∫–µ—à—É

  // ===== –ì–ï–¢–¢–ï–†–ò =====
  List<Master> get masters => _masters;
  List<Client> get clients => _clients;
  Map<String, List<Session>> get sessionsByMaster => _sessionsByMaster;
  Map<String, String> get nextSessionsByMaster => _nextSessionsByMaster;
  bool get isLoading => _isLoading;
  DateTime get lastUpdate => _lastUpdate;
  int get lastSessionCount => _lastSessionCount;

  // ===== –ö–ï–®–ò–†–£–í–ê–ù–ù–Ø =====
  /// –Ü–Ω–≤–∞–ª—ñ–¥—É–≤–∞—Ç–∏ –∫–µ—à (–≤–∏–∫–ª–∏–∫–∞—Ç–∏ –ø—ñ—Å–ª—è CRUD –æ–ø–µ—Ä–∞—Ü—ñ–π)
  void invalidateCache() {
    print('üîÑ –Ü–Ω–≤–∞–ª—ñ–¥—É—î–º–æ –∫–µ—à AppStateProvider - –Ω–∞—Å—Ç—É–ø–Ω–∏–π –∑–∞–ø–∏—Ç –±—É–¥–µ —Å–≤—ñ–∂–∏–º');
    _cacheInvalidated = true; // –ü–æ–∑–Ω–∞—á–∞—î–º–æ –∫–µ—à —è–∫ —ñ–Ω–≤–∞–ª—ñ–¥–æ–≤–∞–Ω–∏–π
    notifyListeners();
  }

  // ===== –Ü–ù–Ü–¶–Ü–ê–õ–Ü–ó–ê–¶–Ü–Ø =====
  Future<void> initialize() async {
    print('üöÄ –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ AppStateProvider');
    
    // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –ø–æ—á–∞—Ç–∫–æ–≤—ñ –¥–∞–Ω—ñ
    await refreshAllData();
    
    // –ó–∞–ø—É—Å–∫–∞—î–º–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–æ–∂–Ω—ñ 5 —Ö–≤–∏–ª–∏–Ω (–æ–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–æ)
    _autoUpdateTimer = Timer.periodic(Duration(minutes: 5), (timer) {
      if (!_isLoading) {
        print('‚è∞ –ê–≤—Ç–æ–æ–Ω–æ–≤–ª–µ–Ω–Ω—è (–∫–æ–∂–Ω—ñ 5 —Ö–≤)...');
        refreshAllData(forceRefresh: true); // –ü—Ä–∏–º—É—Å–æ–≤–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–æ —Ç–∞–π–º–µ—Ä—É
      }
    });
    
    print('‚úÖ AppStateProvider —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ');
  }

  // ===== –û–°–ù–û–í–ù–Ü –ú–ï–¢–û–î–ò =====
  
  /// –û–Ω–æ–≤–∏—Ç–∏ –≤—Å—ñ –¥–∞–Ω—ñ (–º–∞–π—Å—Ç—Ä–∏, –∫–ª—ñ—î–Ω—Ç–∏, —Å–µ—Å—ñ—ó)
  Future<void> refreshAllData({bool forceRefresh = false}) async {
    if (_isLoading) return; // –£–Ω–∏–∫–∞—î–º–æ –ø–æ–¥–≤—ñ–π–Ω–∏—Ö –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—å
    
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–µ—à (—è–∫—â–æ –Ω–µ –ø—Ä–∏–º—É—Å–æ–≤–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —ñ –∫–µ—à –Ω–µ —ñ–Ω–≤–∞–ª—ñ–¥–æ–≤–∞–Ω–∏–π)
    if (!forceRefresh && !_cacheInvalidated && _lastDataLoad != null) {
      final timeSinceLastLoad = DateTime.now().difference(_lastDataLoad!);
      if (timeSinceLastLoad < _cacheTTL) {
        print('üì¶ –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∫–µ—à–æ–≤–∞–Ω—ñ –¥–∞–Ω—ñ (${timeSinceLastLoad.inMinutes} —Ö–≤ —Ç–æ–º—É)');
        // –ù–ï –æ–Ω–æ–≤–ª—é—î–º–æ _lastUpdate –ø—Ä–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—ñ –∫–µ—à—É
        notifyListeners();
        return;
      }
    }
    
    _setLoading(true);
    try {
      print('üîÑ –û–Ω–æ–≤–ª—é—î–º–æ –≤—Å—ñ –¥–∞–Ω—ñ –∑ –ë–î...');
      
      // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –ø–∞—Ä–∞–ª–µ–ª—å–Ω–æ –¥–ª—è —à–≤–∏–¥–∫–æ—Å—Ç—ñ
      await Future.wait([
        _loadMasters(),
        _loadClients(),
        _loadAllSessions(),
      ]);
      
      _lastUpdate = DateTime.now();
      _lastDataLoad = DateTime.now(); // –û–Ω–æ–≤–ª—é—î–º–æ —á–∞—Å –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
      _cacheInvalidated = false; // –°–∫–∏–¥—É—î–º–æ –ø—Ä–∞–ø–æ—Ä —ñ–Ω–≤–∞–ª—ñ–¥–∞—Ü—ñ—ó
      print('‚úÖ –í—Å—ñ –¥–∞–Ω—ñ –æ–Ω–æ–≤–ª–µ–Ω–æ –∑ –ë–î –æ ${_formatTime(_lastUpdate)}');
      
    } catch (e) {
      print('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö: $e');
    } finally {
      _setLoading(false);
    }
  }

  /// –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Ç—ñ–ª—å–∫–∏ –º–∞–π—Å—Ç—Ä—ñ–≤
  Future<void> _loadMasters() async {
    try {
      final masters = await _firestoreService.getMasters();
      _masters = masters;
      print('üìã –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ –º–∞–π—Å—Ç—Ä—ñ–≤: ${masters.length}');
    } catch (e) {
      print('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –º–∞–π—Å—Ç—Ä—ñ–≤: $e');
    }
  }

  /// –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Ç—ñ–ª—å–∫–∏ –∫–ª—ñ—î–Ω—Ç—ñ–≤
  Future<void> _loadClients() async {
    try {
      final clients = await _firestoreService.getClients();
      _clients = clients;
      print('üë• –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ –∫–ª—ñ—î–Ω—Ç—ñ–≤: ${clients.length}');
    } catch (e) {
      print('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç—ñ–≤: $e');
    }
  }

  /// –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –≤—Å—ñ —Å–µ—Å—ñ—ó –ø–æ—Ç–æ—á–Ω–æ–≥–æ –º—ñ—Å—è—Ü—è
  Future<void> _loadAllSessions() async {
    try {
      final now = DateTime.now();
      final sessions = await _firestoreService.getSessionsByMonth(now.year, now.month);
      
      // –ì—Ä—É–ø—É—î–º–æ —Å–µ—Å—ñ—ó –ø–æ –º–∞–π—Å—Ç—Ä–∞—Ö
      _sessionsByMaster.clear();
      for (final session in sessions) {
        if (!_sessionsByMaster.containsKey(session.masterId)) {
          _sessionsByMaster[session.masterId] = [];
        }
        _sessionsByMaster[session.masterId]!.add(session);
      }
      
      // –°–æ—Ä—Ç—É—î–º–æ —Å–µ—Å—ñ—ó –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –º–∞–π—Å—Ç—Ä–∞
      for (final masterId in _sessionsByMaster.keys) {
        _sessionsByMaster[masterId]!.sort((a, b) {
          final dateCompare = a.date.compareTo(b.date);
          if (dateCompare != 0) return dateCompare;
          return a.time.compareTo(b.time);
        });
      }
      
      // –û–±—á–∏—Å–ª—é—î–º–æ –Ω–∞—Å—Ç—É–ø–Ω—ñ —Å–µ—Å—ñ—ó
      _calculateNextSessions();
      
      // –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      _lastSessionCount = sessions.length;
      
      print('üìÖ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ —Å–µ—Å—ñ–π: ${sessions.length}');
    } catch (e) {
      print('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å–µ—Å—ñ–π: $e');
    }
  }

  /// –û–±—á–∏—Å–ª–∏—Ç–∏ –Ω–∞—Å—Ç—É–ø–Ω—ñ —Å–µ—Å—ñ—ó –¥–ª—è –≤—Å—ñ—Ö –º–∞–π—Å—Ç—Ä—ñ–≤
  void _calculateNextSessions() {
    _nextSessionsByMaster.clear();
    
    final now = DateTime.now();
    final currentDate = '${now.year}-${now.month.toString().padLeft(2, '0')}-${now.day.toString().padLeft(2, '0')}';
    final currentTime = '${now.hour.toString().padLeft(2, '0')}:${now.minute.toString().padLeft(2, '0')}';
    
    for (final master in _masters) {
      final masterId = master.id!;
      final sessions = _sessionsByMaster[masterId] ?? [];
      
      if (sessions.isEmpty) {
        _nextSessionsByMaster[masterId] = _languageProvider?.getText('–ù–µ–º–∞—î –∑–∞–ø–∏—Å—ñ–≤', '–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π') ?? '–ù–µ–º–∞—î –∑–∞–ø–∏—Å—ñ–≤';
        continue;
      }
      
      // –ó–Ω–∞—Ö–æ–¥–∏–º–æ –Ω–∞–π–±–ª–∏–∂—á—É –º–∞–π–±—É—Ç–Ω—é —Å–µ—Å—ñ—é
      final futureSessions = sessions.where((session) {
        if (session.date.compareTo(currentDate) > 0) {
          return true; // –ú–∞–π–±—É—Ç–Ω—è –¥–∞—Ç–∞
        } else if (session.date == currentDate) {
          return session.time.compareTo(currentTime) > 0; // –ú–∞–π–±—É—Ç–Ω—ñ–π —á–∞—Å —Å—å–æ–≥–æ–¥–Ω—ñ
        }
        return false;
      }).toList();
      
      if (futureSessions.isEmpty) {
        _nextSessionsByMaster[masterId] = _languageProvider?.getText('–ù–µ–º–∞—î –º–∞–π–±—É—Ç–Ω—ñ—Ö –∑–∞–ø–∏—Å—ñ–≤', '–ù–µ—Ç –±—É–¥—É—â–∏—Ö –∑–∞–ø–∏—Å–µ–π') ?? '–ù–µ–º–∞—î –º–∞–π–±—É—Ç–Ω—ñ—Ö –∑–∞–ø–∏—Å—ñ–≤';
      } else {
        final nextSession = futureSessions.first;
        final sessionDate = DateTime.parse(nextSession.date);
        final formattedDate = _formatDateShort(sessionDate);
        _nextSessionsByMaster[masterId] = '${nextSession.clientName} - $formattedDate ${nextSession.time}';
      }
    }
  }

  // ===== –ú–ï–¢–û–î–ò –î–õ–Ø –ö–û–ù–ö–†–ï–¢–ù–ò–• –°–¢–û–†–Ü–ù–û–ö =====
  
  /// –û—Ç—Ä–∏–º–∞—Ç–∏ —Å–µ—Å—ñ—ó –º–∞–π—Å—Ç—Ä–∞ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É –¥–∞—Ç—É
  List<Session> getSessionsForMasterAndDate(String masterId, String date) {
    final allSessions = _sessionsByMaster[masterId] ?? [];
    return allSessions.where((session) => session.date == date).toList();
  }

  /// –û—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ —Å–µ—Å—ñ—ó –º–∞–π—Å—Ç—Ä–∞
  List<Session> getSessionsForMaster(String masterId) {
    return _sessionsByMaster[masterId] ?? [];
  }

  /// –û—Ç—Ä–∏–º–∞—Ç–∏ –Ω–∞—Å—Ç—É–ø–Ω—É —Å–µ—Å—ñ—é –º–∞–π—Å—Ç—Ä–∞
  String getNextSessionForMaster(String masterId) {
    return _nextSessionsByMaster[masterId] ?? '–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è...';
  }

  /// –û—Ç—Ä–∏–º–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –ø–æ—Ç–æ—á–Ω—É –∞–±–æ –Ω–∞—Å—Ç—É–ø–Ω—É —Å–µ—Å—ñ—é –∑ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–º —Å—Ç–∞—Ç—É—Å—É
  Map<String, dynamic> getCurrentOrNextSessionForMaster(String masterId) {
    final allSessions = getSessionsForMaster(masterId);
    final now = DateTime.now();
    final today = DateTime(now.year, now.month, now.day);
    
    // –§—ñ–ª—å—Ç—Ä—É—î–º–æ —Ç—ñ–ª—å–∫–∏ —Å–µ—Å—ñ—ó –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ —ñ –≤ –º–∞–π–±—É—Ç–Ω—å–æ–º—É
    final sessions = allSessions.where((session) {
      try {
        final dateParts = session.date.split('-');
        final sessionDate = DateTime(
          int.parse(dateParts[0]),
          int.parse(dateParts[1]),
          int.parse(dateParts[2]),
        );
        return sessionDate.isAtSameMomentAs(today) || sessionDate.isAfter(today);
      } catch (e) {
        return false;
      }
    }).toList();
    
    print('üîç getCurrentOrNextSessionForMaster: masterId=$masterId, –∞–∫—Ç—É–∞–ª—å–Ω–∏—Ö —Å–µ—Å—ñ–π: ${sessions.length}');
    
    // –®—É–∫–∞—î–º–æ –ø–æ—Ç–æ—á–Ω—É —Å–µ—Å—ñ—é (—è–∫–∞ –∑–∞—Ä–∞–∑ —Ç—Ä–∏–≤–∞—î)
    for (final session in sessions) {
      try {
        final dateParts = session.date.split('-');
        final timeParts = session.time.split(':');
        final sessionStartTime = DateTime(
          int.parse(dateParts[0]),
          int.parse(dateParts[1]),
          int.parse(dateParts[2]),
          int.parse(timeParts[0]),
          int.parse(timeParts[1]),
        );
        final sessionEndTime = sessionStartTime.add(Duration(minutes: session.duration));
        
        final isCurrent = now.isAfter(sessionStartTime) && now.isBefore(sessionEndTime);
        if (isCurrent) {
          print('üîç –ó–Ω–∞–π–¥–µ–Ω–æ –ø–æ—Ç–æ—á–Ω—É —Å–µ—Å—ñ—é: ${session.date} ${session.time} - ${session.clientName}');
        }
        
        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —Å–µ—Å—ñ—è –∑–∞—Ä–∞–∑ —Ç—Ä–∏–≤–∞—î
        if (isCurrent) {
          final endTime = '${sessionEndTime.hour.toString().padLeft(2, '0')}:${sessionEndTime.minute.toString().padLeft(2, '0')}';
          return {
            'status': 'current',
            'session': session,
            'displayText': '${session.time}-$endTime ${session.clientName}',
            'endTime': sessionEndTime,
          };
        }
      } catch (e) {
        continue;
      }
    }
    
    // –Ø–∫—â–æ –ø–æ—Ç–æ—á–Ω–æ—ó —Å–µ—Å—ñ—ó –Ω–µ–º–∞—î, —à—É–∫–∞—î–º–æ –Ω–∞—Å—Ç—É–ø–Ω—É
    for (final session in sessions) {
      try {
        final dateParts = session.date.split('-');
        final timeParts = session.time.split(':');
        final sessionDateTime = DateTime(
          int.parse(dateParts[0]),
          int.parse(dateParts[1]),
          int.parse(dateParts[2]),
          int.parse(timeParts[0]),
          int.parse(timeParts[1]),
        );
        
        if (sessionDateTime.isAfter(now)) {
          final sessionDate = DateTime(
            int.parse(dateParts[0]),
            int.parse(dateParts[1]),
            int.parse(dateParts[2]),
          );
          final formattedDate = _formatDateShort(sessionDate);
          final sessionEndTime = sessionDateTime.add(Duration(minutes: session.duration));
          final endTime = '${sessionEndTime.hour.toString().padLeft(2, '0')}:${sessionEndTime.minute.toString().padLeft(2, '0')}';
          
          return {
            'status': 'next',
            'session': session,
            'displayText': '$formattedDate ${session.time}-$endTime ${session.clientName}',
            'startTime': sessionDateTime,
          };
        }
      } catch (e) {
        continue;
      }
    }
    
    return {
      'status': 'none',
      'session': null,
      'displayText': '–ù–µ–º–∞—î –∑–∞–ø–∏—Å—ñ–≤',
    };
  }

  // ===== –ú–ï–¢–û–î–ò –û–ù–û–í–õ–ï–ù–ù–Ø =====
  
  /// –î–æ–¥–∞—Ç–∏ –Ω–æ–≤—É —Å–µ—Å—ñ—é (–æ–Ω–æ–≤–ª—é—î –ª–æ–∫–∞–ª—å–Ω–∏–π —Å—Ç–∞–Ω)
  Future<String?> addSession(Session session) async {
    final sessionId = await _firestoreService.addSession(session);
    if (sessionId != null) {
      // –û–Ω–æ–≤–ª—é—î–º–æ –ª–æ–∫–∞–ª—å–Ω–∏–π —Å—Ç–∞–Ω
      final updatedSession = Session(
        id: sessionId,
        masterId: session.masterId,
        clientId: session.clientId,
        clientName: session.clientName,
        phone: session.phone,
        service: session.service,
        duration: session.duration,
        date: session.date,
        time: session.time,
        notes: session.notes,
        price: session.price,
      );
      
      if (!_sessionsByMaster.containsKey(session.masterId)) {
        _sessionsByMaster[session.masterId] = [];
      }
      _sessionsByMaster[session.masterId]!.add(updatedSession);
      _sessionsByMaster[session.masterId]!.sort((a, b) {
        final dateCompare = a.date.compareTo(b.date);
        if (dateCompare != 0) return dateCompare;
        return a.time.compareTo(b.time);
      });
      
      _calculateNextSessions();
      
      // –Ü–Ω–≤–∞–ª—ñ–¥—É—î–º–æ –∫–µ—à –ø—ñ—Å–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –∑–∞–ø–∏—Å—É
      _lastDataLoad = null;
      print('üìù –ù–æ–≤–∏–π –∑–∞–ø–∏—Å –¥–æ–¥–∞–Ω–æ, –∫–µ—à —ñ–Ω–≤–∞–ª—ñ–¥–æ–≤–∞–Ω–æ');
      
      notifyListeners();
    }
    return sessionId;
  }

  /// –û–Ω–æ–≤–∏—Ç–∏ —Å–µ—Å—ñ—é
  Future<bool> updateSession(String sessionId, Session session) async {
    final success = await _firestoreService.updateSession(sessionId, session);
    if (success) {
      // –ó–Ω–∞—Ö–æ–¥–∏–º–æ —Ç–∞ –æ–Ω–æ–≤–ª—é—î–º–æ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º—É —Å—Ç–∞–Ω—ñ
      for (final masterId in _sessionsByMaster.keys) {
        final index = _sessionsByMaster[masterId]!.indexWhere((s) => s.id == sessionId);
        if (index != -1) {
          _sessionsByMaster[masterId]![index] = session;
          _calculateNextSessions();
          
          // –Ü–Ω–≤–∞–ª—ñ–¥—É—î–º–æ –∫–µ—à –ø—ñ—Å–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–∞–ø–∏—Å—É
          _lastDataLoad = null;
          print('‚úèÔ∏è –ó–∞–ø–∏—Å –æ–Ω–æ–≤–ª–µ–Ω–æ, –∫–µ—à —ñ–Ω–≤–∞–ª—ñ–¥–æ–≤–∞–Ω–æ');
          
          notifyListeners();
          break;
        }
      }
    }
    return success;
  }

  /// –í–∏–¥–∞–ª–∏—Ç–∏ —Å–µ—Å—ñ—é
  Future<bool> deleteSession(String sessionId) async {
    final success = await _firestoreService.deleteSession(sessionId);
    if (success) {
      // –í–∏–¥–∞–ª—è—î–º–æ –∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å—Ç–∞–Ω—É
      for (final masterId in _sessionsByMaster.keys) {
        _sessionsByMaster[masterId]!.removeWhere((s) => s.id == sessionId);
      }
      _calculateNextSessions();
      
      // –Ü–Ω–≤–∞–ª—ñ–¥—É—î–º–æ –∫–µ—à –ø—ñ—Å–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∑–∞–ø–∏—Å—É
      _lastDataLoad = null;
      print('üóëÔ∏è –ó–∞–ø–∏—Å –≤–∏–¥–∞–ª–µ–Ω–æ, –∫–µ—à —ñ–Ω–≤–∞–ª—ñ–¥–æ–≤–∞–Ω–æ');
      
      notifyListeners();
    }
    return success;
  }

  // ===== –î–û–ü–û–ú–Ü–ñ–ù–Ü –ú–ï–¢–û–î–ò =====
  
  void _setLoading(bool loading) {
    _isLoading = loading;
    notifyListeners();
  }

  String _formatDateShort(DateTime date) {
    final today = DateTime.now();
    final tomorrow = today.add(Duration(days: 1));
    
    if (date.year == today.year && date.month == today.month && date.day == today.day) {
      return _languageProvider?.getText('–°—å–æ–≥–æ–¥–Ω—ñ', '–°–µ–≥–æ–¥–Ω—è') ?? '–°—å–æ–≥–æ–¥–Ω—ñ';
    } else if (date.year == tomorrow.year && date.month == tomorrow.month && date.day == tomorrow.day) {
      return _languageProvider?.getText('–ó–∞–≤—Ç—Ä–∞', '–ó–∞–≤—Ç—Ä–∞') ?? '–ó–∞–≤—Ç—Ä–∞';
    } else {
      return '${date.day.toString().padLeft(2, '0')}.${date.month.toString().padLeft(2, '0')}';
    }
  }

  String _formatTime(DateTime time) {
    return '${time.hour.toString().padLeft(2, '0')}:${time.minute.toString().padLeft(2, '0')}';
  }

  // ===== –û–ß–ò–©–ï–ù–ù–Ø =====
  
  void dispose() {
    _autoUpdateTimer?.cancel();
    super.dispose();
  }
}