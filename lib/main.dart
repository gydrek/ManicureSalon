import 'package:flutter/material.dart';
import 'package:flutter_localizations/flutter_localizations.dart';
import 'package:firebase_core/firebase_core.dart';
import 'package:provider/provider.dart';
import 'package:nastya_app/firebase_options.dart';
import 'package:nastya_app/pages/home.dart';
import 'package:nastya_app/services/firestore_service.dart';
import 'package:nastya_app/providers/app_state_provider.dart';
import 'package:nastya_app/providers/language_provider.dart';
import 'package:nastya_app/services/connectivity_service.dart';
import 'package:nastya_app/services/notification_service.dart';
import 'package:nastya_app/widgets/no_internet_screen.dart';

void main() async {
  WidgetsFlutterBinding.ensureInitialized();
  
  // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è Firebase —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ —â–µ –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π
  if (Firebase.apps.isEmpty) {
    await Firebase.initializeApp(
      options: DefaultFirebaseOptions.currentPlatform,
    );
  }
  
  // –°—Ç–≤–æ—Ä—é—î–º–æ —Å–µ—Ä–≤—ñ—Å–∏ –ë–ï–ó –±—É–¥—å-—è–∫–æ—ó —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó —Ç—É—Ç  –á\
  final connectivityService = ConnectivityService();
  final appState = AppStateProvider();
  final languageProvider = LanguageProvider();
  
  // –ó–∞–ø—É—Å–∫–∞—î–º–æ –¥–æ–¥–∞—Ç–æ–∫ –ù–ï–ì–ê–ô–ù–û - –±–µ–∑ –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó 
  runApp(MyApp(
    appState: appState, 
    connectivityService: connectivityService,
    languageProvider: languageProvider,
  ));
  
  // –í—ñ–¥–∫–ª–∞–¥–µ–Ω–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —á–µ—Ä–µ–∑ –º—ñ–∫—Ä–æ-–∑–∞—Ç—Ä–∏–º–∫—É 
  // –¶–µ –¥–æ–∑–≤–æ–ª–∏—Ç—å –ø–ª–∞—Ç—Ñ–æ—Ä–º–Ω–∏–º –∫–∞–Ω–∞–ª–∞–º –ø–æ–≤–Ω—ñ—Å—Ç—é —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É–≤–∞—Ç–∏—Å—è 
  Future.delayed(Duration(milliseconds: 100), () async {
    try {
      print('üîÑ –ü–æ—á–∏–Ω–∞—î–º–æ –≤—ñ–¥–∫–ª–∞–¥–µ–Ω—É —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—é...');
      
      await languageProvider.loadSavedLanguage();
      print('‚úÖ LanguageProvider –≥–æ—Ç–æ–≤–∏–π');
      
      // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ LanguageProvider –≤ AppStateProvider –¥–ª—è –ª–æ–∫–∞–ª—ñ–∑–∞—Ü—ñ—ó
      appState.setLanguageProvider(languageProvider);
      
      await connectivityService.initialize();
      print('‚úÖ ConnectivityService –≥–æ—Ç–æ–≤–∏–π');
      
      final firestoreService = FirestoreService();
      await firestoreService.initializeMasters();
      print('‚úÖ FirestoreService –≥–æ—Ç–æ–≤–∏–π');
      
      await appState.initialize();
      print('‚úÖ AppStateProvider –≥–æ—Ç–æ–≤–∏–π');
      
      // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ —Å–µ—Ä–≤—ñ—Å —Å–ø–æ–≤—ñ—â–µ–Ω—å
      await NotificationService().initialize();
      print('‚úÖ NotificationService –≥–æ—Ç–æ–≤–∏–π');
      
    } catch (e) {
      print('‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–∫–ª–∞–¥–µ–Ω–æ—ó —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó: $e');
    }
  });
}

class MyApp extends StatelessWidget {
  final AppStateProvider appState;
  final ConnectivityService connectivityService;
  final LanguageProvider languageProvider;
  
  const MyApp({
    super.key, 
    required this.appState,
    required this.connectivityService,
    required this.languageProvider,
  });

  @override
  Widget build(BuildContext context) {
    return MultiProvider(
      providers: [
        ChangeNotifierProvider.value(value: appState),
        ChangeNotifierProvider.value(value: connectivityService),
        ChangeNotifierProvider.value(value: languageProvider),
      ],
      child: Consumer2<ConnectivityService, LanguageProvider>(
        builder: (context, connectivity, language, child) {
          return MaterialApp(
        debugShowCheckedModeBanner: false,
        
        // –õ–æ–∫–∞–ª—ñ–∑–∞—Ü—ñ—è
        localizationsDelegates: [
          GlobalMaterialLocalizations.delegate,
          GlobalWidgetsLocalizations.delegate,
          GlobalCupertinoLocalizations.delegate,
        ],
        supportedLocales: [
          Locale('uk'), // –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞
          Locale('ru'), // –†–æ—Å—ñ–π—Å—å–∫–∞
        ],
        locale: language.currentLocale, // –î–∏–Ω–∞–º—ñ—á–Ω–∞ –º–æ–≤–∞ –∑ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
        
        theme: ThemeData(
          colorScheme: ColorScheme.fromSeed(seedColor: Colors.pink),
        ),
            initialRoute: '/',
            routes: {
              '/': (context) {
                // –í—ñ–¥—Ä–∞–∑—É –ø–æ–∫–∞–∑—É—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–∏–π –µ–∫—Ä–∞–Ω –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è
                return connectivity.isConnected ? HomePage() : NoInternetScreen();
              },
            },
          );
        },
      ),
    );
  }
}