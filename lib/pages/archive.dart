import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import 'package:nastya_app/models/models.dart';
import 'package:nastya_app/services/firestore_service.dart';
import 'package:nastya_app/pages/sessionEdit.dart';
import 'package:url_launcher/url_launcher.dart';
import 'package:font_awesome_flutter/font_awesome_flutter.dart';
import 'package:nastya_app/widgets/update_info_widget.dart';
import 'package:nastya_app/providers/app_state_provider.dart';
import 'package:nastya_app/providers/language_provider.dart';
import 'package:nastya_app/widgets/connectivity_wrapper.dart';


class ArchivePage extends StatefulWidget {
  const ArchivePage({super.key});

  @override
  State<ArchivePage> createState() => _ArchivePageState();
}

class _ArchivePageState extends State<ArchivePage> {
  final FirestoreService _firestoreService = FirestoreService();
  
  List<Session> _allSessions = [];
  List<Session> _filteredSessions = [];
  List<Master> _masters = [];
  
  String _selectedMasterFilter = '–í—Å—ñ –º–∞–π—Å—Ç—Ä–∏–Ω—ñ';
  String _selectedStatusFilter = '–í—Å—ñ —Å—Ç–∞—Ç—É—Å–∏';
  DateTime? _selectedDate;
  bool _isLoading = true;

  String _getLocalizedService(String service, LanguageProvider language) {
    switch (service) {
      case '–ú–∞–Ω—ñ–∫—é—Ä':
        return language.getText('–ú–∞–Ω—ñ–∫—é—Ä', '–ú–∞–Ω–∏–∫—é—Ä');
      case '–ü–µ–¥–∏–∫—é—Ä':
        return language.getText('–ü–µ–¥–∏–∫—é—Ä', '–ü–µ–¥–∏–∫—é—Ä');
      case '–ù–∞—Ä–∞—â—É–≤–∞–Ω–Ω—è –Ω—ñ–≥—Ç—ñ–≤':
        return language.getText('–ù–∞—Ä–∞—â—É–≤–∞–Ω–Ω—è –Ω—ñ–≥—Ç—ñ–≤', '–ù–∞—Ä–∞—â–∏–≤–∞–Ω–∏–µ –Ω–æ–≥—Ç–µ–π');
      case '–î–∏–∑–∞–π–Ω –Ω—ñ–≥—Ç—ñ–≤':
        return language.getText('–î–∏–∑–∞–π–Ω –Ω—ñ–≥—Ç—ñ–≤', '–î–∏–∑–∞–π–Ω –Ω–æ–≥—Ç–µ–π');
      case '–ü–æ–∫—Ä–∏—Ç—Ç—è –≥–µ–ª—å-–ª–∞–∫':
        return language.getText('–ü–æ–∫—Ä–∏—Ç—Ç—è –≥–µ–ª—å-–ª–∞–∫', '–ü–æ–∫—Ä—ã—Ç–∏–µ –≥–µ–ª—å-–ª–∞–∫');
      case '–ó–Ω—è—Ç—Ç—è –ø–æ–∫—Ä–∏—Ç—Ç—è':
        return language.getText('–ó–Ω—è—Ç—Ç—è –ø–æ–∫—Ä–∏—Ç—Ç—è', '–°–Ω—è—Ç–∏–µ –ø–æ–∫—Ä—ã—Ç–∏—è');
      case '–ö–æ—Ä–µ–∫—Ü—ñ—è':
        return language.getText('–ö–æ—Ä–µ–∫—Ü—ñ—è', '–ö–æ—Ä—Ä–µ–∫—Ü–∏—è');
      default:
        return service;
    }
  }

  List<String> _getLocalizedMonths(LanguageProvider language) {
    return [
      language.getText('—Å—ñ—á–Ω—è', '—è–Ω–≤–∞—Ä—è'),
      language.getText('–ª—é—Ç–æ–≥–æ', '—Ñ–µ–≤—Ä–∞–ª—è'),
      language.getText('–±–µ—Ä–µ–∑–Ω—è', '–º–∞—Ä—Ç–∞'),
      language.getText('–∫–≤—ñ—Ç–Ω—è', '–∞–ø—Ä–µ–ª—è'),
      language.getText('—Ç—Ä–∞–≤–Ω—è', '–º–∞—è'),
      language.getText('—á–µ—Ä–≤–Ω—è', '–∏—é–Ω—è'),
      language.getText('–ª–∏–ø–Ω—è', '–∏—é–ª—è'),
      language.getText('—Å–µ—Ä–ø–Ω—è', '–∞–≤–≥—É—Å—Ç–∞'),
      language.getText('–≤–µ—Ä–µ—Å–Ω—è', '—Å–µ–Ω—Ç—è–±—Ä—è'),
      language.getText('–∂–æ–≤—Ç–Ω—è', '–æ–∫—Ç—è–±—Ä—è'),
      language.getText('–ª–∏—Å—Ç–æ–ø–∞–¥–∞', '–Ω–æ—è–±—Ä—è'),
      language.getText('–≥—Ä—É–¥–Ω—è', '–¥–µ–∫–∞–±—Ä—è'),
    ];
  }
  
  @override
  void initState() {
    super.initState();
    _loadData();
  }
  
  Future<void> _loadData() async {
    setState(() {
      _isLoading = true;
    });
    
    try {
      // –°–ø–æ—á–∞—Ç–∫—É –Ω–∞–º–∞–≥–∞—î–º–æ—Å—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ –¥–∞–Ω—ñ –∑ AppStateProvider
      final appState = Provider.of<AppStateProvider>(context, listen: false);
      
      if (appState.masters.isNotEmpty) {
        // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∫–µ—à–æ–≤–∞–Ω—ñ –¥–∞–Ω—ñ –∑ AppStateProvider
        print('üì¶ –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∫–µ—à–æ–≤–∞–Ω—ñ –¥–∞–Ω—ñ –∑ AppStateProvider');
        final allSessionsFromProvider = _getAllSessionsFromProvider(appState);
        
        setState(() {
          _allSessions = allSessionsFromProvider;
          _filteredSessions = allSessionsFromProvider;
          _masters = appState.masters;
          _isLoading = false;
        });
      } else {
        // –Ø–∫—â–æ AppStateProvider —â–µ –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∏–π, —Ä–æ–±–∏–º–æ –ø—Ä—è–º—ñ –∑–∞–ø–∏—Ç–∏
        print('üîÑ AppStateProvider –ø–æ—Ä–æ–∂–Ω—ñ–π, –∑–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –Ω–∞–ø—Ä—è–º—É');
        final sessions = await _firestoreService.getAllSessions();
        final masters = await _firestoreService.getMasters();
        
        setState(() {
          _allSessions = sessions;
          _filteredSessions = sessions;
          _masters = masters;
          _isLoading = false;
        });
      }
      
      _applyFilters();
    } catch (e) {
      print('–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö: $e');
      setState(() {
        _isLoading = false;
      });
    }
  }
  
  // –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ —Å–µ—Å—ñ—ó –∑ AppStateProvider
  List<Session> _getAllSessionsFromProvider(AppStateProvider appState) {
    final allSessions = <Session>[];
    
    // –ó–±–∏—Ä–∞—î–º–æ —Å–µ—Å—ñ—ó –≤—Å—ñ—Ö –º–∞–π—Å—Ç—Ä—ñ–≤
    for (final masterId in appState.sessionsByMaster.keys) {
      allSessions.addAll(appState.sessionsByMaster[masterId] ?? []);
    }
    
    // –°–æ—Ä—Ç—É—î–º–æ –ø–æ –¥–∞—Ç—ñ (–Ω–∞–π–Ω–æ–≤—ñ—à—ñ —Å–ø–æ—á–∞—Ç–∫—É)
    allSessions.sort((a, b) {
      int dateCompare = b.date.compareTo(a.date);
      if (dateCompare == 0) {
        return b.time.compareTo(a.time);
      }
      return dateCompare;
    });
    
    return allSessions;
  }
  
  void _applyFilters() {
    setState(() {
      _filteredSessions = _allSessions.where((session) {
        // –§—ñ–ª—å—Ç—Ä –ø–æ –º–∞–π—Å—Ç—Ä—É
        bool masterMatch = _selectedMasterFilter == '–í—Å—ñ –º–∞–π—Å—Ç—Ä–∏–Ω—ñ' || 
            session.masterId == _selectedMasterFilter;
        
        // –§—ñ–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É
        bool statusMatch = _selectedStatusFilter == '–í—Å—ñ —Å—Ç–∞—Ç—É—Å–∏' || 
            session.status == _selectedStatusFilter;
        
        // –§—ñ–ª—å—Ç—Ä –ø–æ –¥–∞—Ç—ñ
        bool dateMatch = _selectedDate == null || 
            session.date == _formatDateForComparison(_selectedDate!);
        
        return masterMatch && statusMatch && dateMatch;
      }).toList();
      
      // –°–æ—Ä—Ç—É—î–º–æ –ø–æ –¥–∞—Ç—ñ (–Ω–∞–π–Ω–æ–≤—ñ—à—ñ —Å–ø–æ—á–∞—Ç–∫—É)
      _filteredSessions.sort((a, b) {
        int dateCompare = b.date.compareTo(a.date);
        if (dateCompare == 0) {
          return b.time.compareTo(a.time);
        }
        return dateCompare;
      });
    });
  }
  
  String _formatDateForComparison(DateTime date) {
    return '${date.year}-${date.month.toString().padLeft(2, '0')}-${date.day.toString().padLeft(2, '0')}';
  }
  
  String _formatDateDisplay(DateTime date) {
    final language = Provider.of<LanguageProvider>(context, listen: false);
    final months = _getLocalizedMonths(language);
    return '${date.day} ${months[date.month - 1]} ${date.year}';
  }
  
  void _showDatePicker() async {
    final language = Provider.of<LanguageProvider>(context, listen: false);
    final locale = language.currentLocale.languageCode == 'uk' 
        ? Locale('uk', 'UA') 
        : Locale('ru', 'RU');
    
    final DateTime? picked = await showDatePicker(
      context: context,
      initialDate: _selectedDate ?? DateTime.now(),
      firstDate: DateTime(2024),
      lastDate: DateTime.now().add(Duration(days: 365)),
      locale: locale,
      builder: (context, child) {
        return Theme(
          data: Theme.of(context).copyWith(
            colorScheme: Theme.of(context).colorScheme.copyWith(
              primary: Theme.of(context).colorScheme.primary,
            ),
          ),
          child: child!,
        );
      },
    );
    
    if (picked != null) {
      setState(() {
        _selectedDate = picked;
      });
      _applyFilters();
    }
  }
  
  void _clearDateFilter() {
    setState(() {
      _selectedDate = null;
    });
    _applyFilters();
  }
  
  String _getMasterName(String masterId, String languageCode) {
    final master = _masters.firstWhere(
      (m) => m.id == masterId,
      orElse: () => Master(name: '–ù–µ–≤—ñ–¥–æ–º–∏–π –º–∞–π—Å—Ç–µ—Ä', status: 'unknown'),
    );
    return master.getLocalizedName(languageCode);
  }
  
  @override
  Widget build(BuildContext context) {
    return ConnectivityWrapper(
      child: Scaffold(
      appBar: AppBar(
        title: Consumer<LanguageProvider>(
          builder: (context, language, child) {
            return Text(
              language.getText('–ê—Ä—Ö—ñ–≤ –∑–∞–ø–∏—Å—ñ–≤', '–ê—Ä—Ö–∏–≤ –∑–∞–ø–∏—Å–µ–π'),
              style: TextStyle(
                fontSize: 24,
                fontWeight: FontWeight.bold,
              ),
            );
          },
        ),
        backgroundColor: Theme.of(context).colorScheme.primary,
        foregroundColor: Theme.of(context).colorScheme.onPrimary,
        elevation: 0,
        centerTitle: true,
        actions: [
          GestureDetector(
            onLongPress: _selectedDate != null ? _clearDateFilter : null,
            child: Consumer<LanguageProvider>(
              builder: (context, language, child) {
                return IconButton(
                  icon: Icon(
                    Icons.calendar_today,
                    color: _selectedDate != null 
                        ? Colors.amber.shade300 
                        : Theme.of(context).colorScheme.onPrimary,
                  ),
                  onPressed: _showDatePicker,
                  tooltip: _selectedDate != null 
                      ? '${language.getText('–í–∏–±—Ä–∞–Ω–∞ –¥–∞—Ç–∞', '–í—ã–±—Ä–∞–Ω–Ω–∞—è –¥–∞—Ç–∞')}: ${_formatDateDisplay(_selectedDate!)}}' 
                      : language.getText('–í–∏–±—Ä–∞—Ç–∏ –¥–∞—Ç—É', '–í—ã–±—Ä–∞—Ç—å –¥–∞—Ç—É'),
                );
              },
            ),
          ),
        ],
      ),
      body: SafeArea(
        child: _isLoading
            ? Center(
                child: Column(
                  mainAxisAlignment: MainAxisAlignment.center,
                  children: [
                    CircularProgressIndicator(
                      color: Theme.of(context).colorScheme.primary,
                    ),
                    SizedBox(height: 16),
                    Consumer<LanguageProvider>(
                      builder: (context, language, child) {
                        return Text(
                          language.getText('–ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∞—Ä—Ö—ñ–≤...', '–ó–∞–≥—Ä—É–∂–∞–µ–º –∞—Ä—Ö–∏–≤...'),
                          style: TextStyle(
                            fontSize: 16,
                            color: Theme.of(context).colorScheme.onSurface,
                          ),
                        );
                      },
                    ),
                  ],
                ),
              )
            : RefreshIndicator(
              onRefresh: () async {
                print('üîÑ –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∞—Ä—Ö—ñ–≤—É —á–µ—Ä–µ–∑ —Å–≤–∞–π–ø...');
                
                // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ AppStateProvider –¥–ª—è –ø—Ä–∏–º—É—Å–æ–≤–æ–≥–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è (–¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —á–∞—Å—É)
                await Provider.of<AppStateProvider>(context, listen: false).refreshAllData(forceRefresh: true);
                
                // –û–Ω–æ–≤–ª—é—î–º–æ –ª–æ–∫–∞–ª—å–Ω—ñ –¥–∞–Ω—ñ –∞—Ä—Ö—ñ–≤—É
                final appState = Provider.of<AppStateProvider>(context, listen: false);
                final allSessionsFromProvider = _getAllSessionsFromProvider(appState);
                
                setState(() {
                  _allSessions = allSessionsFromProvider;
                  _filteredSessions = allSessionsFromProvider;
                  _masters = appState.masters;
                });
                
                _applyFilters();
                
                print('‚úÖ –ê—Ä—Ö—ñ–≤ –æ–Ω–æ–≤–ª–µ–Ω–æ –∑ –Ω–æ–≤–∏–º —á–∞—Å–æ–º');
                
                // –ü–æ–∫–∞–∑—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —É—Å–ø—ñ—à–Ω–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
                if (context.mounted) {
                  ScaffoldMessenger.of(context).showSnackBar(
                    SnackBar(
                      content: Row(
                        children: [
                          Icon(
                            Icons.check_circle,
                            color: Colors.white,
                            size: 20,
                          ),
                          SizedBox(width: 8),
                          Consumer<LanguageProvider>(
                            builder: (context, language, child) {
                              return Text(language.getText('–ê—Ä—Ö—ñ–≤ –æ–Ω–æ–≤–ª–µ–Ω–æ —Å–≤–∞–π–ø–æ–º', '–ê—Ä—Ö–∏–≤ –æ–±–Ω–æ–≤–ª–µ–Ω —Å–≤–∞–π–ø–æ–º'));
                            },
                          ),
                        ],
                      ),
                      duration: Duration(seconds: 2),
                      backgroundColor: Colors.green,
                    ),
                  );
                }
              },
              child: SingleChildScrollView(
                physics: AlwaysScrollableScrollPhysics(),
                child: Column(
                  children: [
                    // –§—ñ–ª—å—Ç—Ä–∏
                    Container(
                      padding: EdgeInsets.all(16),
                      decoration: BoxDecoration(
                        color: Theme.of(context).colorScheme.primaryContainer,
                        boxShadow: [
                          BoxShadow(
                            color: Colors.black.withValues(alpha: 0.05),
                            blurRadius: 4,
                            offset: Offset(0, 2),
                          ),
                        ],
                      ),
                      child: Column(
                        children: [
                          Row(
                            children: [
                              Expanded(
                                child: _buildMasterFilter(),
                              ),
                              SizedBox(width: 12),
                              Expanded(
                                child: _buildStatusFilter(),
                              ),
                            ],
                          ),
                          SizedBox(height: 12),
                          
                          // –Ü–Ω–¥–∏–∫–∞—Ç–æ—Ä –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ñ—ñ–ª—å—Ç—Ä–∞ –¥–∞—Ç–∏
                          if (_selectedDate != null)
                            Container(
                              padding: EdgeInsets.symmetric(horizontal: 12, vertical: 8),
                              margin: EdgeInsets.only(bottom: 12),
                              decoration: BoxDecoration(
                                color: Colors.amber.shade50,
                                borderRadius: BorderRadius.circular(20),
                                border: Border.all(color: Colors.amber.shade200),
                              ),
                              child: Row(
                                mainAxisSize: MainAxisSize.min,
                                children: [
                                  Icon(
                                    Icons.calendar_today,
                                    size: 16,
                                    color: Colors.amber.shade700,
                                  ),
                                  SizedBox(width: 6),
                                  Consumer<LanguageProvider>(
                                    builder: (context, language, child) {
                                      return Text(
                                        '${language.getText('–§—ñ–ª—å—Ç—Ä', '–§–∏–ª—å—Ç—Ä')}: ${_formatDateDisplay(_selectedDate!)}',
                                        style: TextStyle(
                                          fontSize: 12,
                                          color: Colors.amber.shade800,
                                          fontWeight: FontWeight.w500,
                                        ),
                                      );
                                    },
                                  ),
                                  SizedBox(width: 8),
                                  GestureDetector(
                                    onTap: _clearDateFilter,
                                    child: Icon(
                                      Icons.close,
                                      size: 16,
                                      color: Colors.amber.shade700,
                                    ),
                                  ),
                                ],
                              ),
                            ),
                          
                          _buildStatsRow(),
                        ],
                      ),
                    ),
                    
                    // –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –æ—Å—Ç–∞–Ω–Ω—î –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
                    UpdateInfoWidget(
                      margin: EdgeInsets.only(
                        left: 16,
                        right: 16,
                        bottom: 16,
                      ),
                    ),
                    
                    // –°–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å—ñ–≤ –∞–±–æ –ø–æ—Ä–æ–∂–Ω—ñ–π —Å—Ç–∞–Ω
                    _filteredSessions.isEmpty
                        ? Container(
                            height: 400,
                            child: _buildEmptyState(),
                          )
                        : Column(
                            children: List.generate(
                              _filteredSessions.length,
                              (index) {
                                final session = _filteredSessions[index];
                                return Padding(
                                  padding: EdgeInsets.symmetric(horizontal: 16, vertical: 4),
                                  child: _buildSessionCard(session),
                                );
                              },
                            ),
                          ),
                  ],
                ),
              ),
            ),
      ),
      ),
    );
  }
  
  Widget _buildMasterFilter() {
    List<String> masterOptions = ['–í—Å—ñ –º–∞–π—Å—Ç—Ä–∏–Ω—ñ'];
    masterOptions.addAll(_masters.map((m) => m.id!));
    
    return Container(
      decoration: BoxDecoration(
        border: Border.all(color: Colors.grey.shade300),
        borderRadius: BorderRadius.circular(12),
        color: Theme.of(context).colorScheme.surface,
      ),
      child: DropdownButtonFormField<String>(
        value: _selectedMasterFilter,
        isExpanded: true,
        decoration: InputDecoration(
          labelText: Provider.of<LanguageProvider>(context, listen: false).getText('–ú–∞–π—Å—Ç—Ä–∏–Ω—è', '–ú–∞—Å—Ç–µ—Ä–∏—Ü–∞'),
          prefixIcon: Icon(Icons.person_outline),
          border: InputBorder.none,
          contentPadding: EdgeInsets.symmetric(horizontal: 16, vertical: 8),
        ),
        items: masterOptions.map((masterId) {
          final language = Provider.of<LanguageProvider>(context, listen: false);
          String displayName = masterId == '–í—Å—ñ –º–∞–π—Å—Ç—Ä–∏–Ω—ñ' 
              ? language.getText('–í—Å—ñ –º–∞–π—Å—Ç—Ä–∏–Ω—ñ', '–í—Å–µ –º–∞—Å—Ç–µ—Ä–∏—Ü—ã')
              : _getMasterName(masterId, language.currentLocale.languageCode);
          return DropdownMenuItem(
            value: masterId,
            child: Text(
              displayName,
              overflow: TextOverflow.ellipsis,
              maxLines: 1,
            ),
          );
        }).toList(),
        onChanged: (value) {
          setState(() {
            _selectedMasterFilter = value!;
          });
          _applyFilters();
        },
      ),
    );
  }
  
  Widget _buildStatusFilter() {
    return Container(
      decoration: BoxDecoration(
        border: Border.all(color: Colors.grey.shade300),
        borderRadius: BorderRadius.circular(12),
        color: Theme.of(context).colorScheme.surface,
      ),
      child: DropdownButtonFormField<String>(
        value: _selectedStatusFilter,
        isExpanded: true,
        decoration: InputDecoration(
          labelText: Provider.of<LanguageProvider>(context, listen: false).getText('–°—Ç–∞—Ç—É—Å', '–°—Ç–∞—Ç—É—Å'),
          prefixIcon: Icon(Icons.assignment_outlined),
          border: InputBorder.none,
          contentPadding: EdgeInsets.symmetric(horizontal: 16, vertical: 8),
        ),
        items: [
          DropdownMenuItem(
            value: '–í—Å—ñ —Å—Ç–∞—Ç—É—Å–∏',
            child: Consumer<LanguageProvider>(
              builder: (context, language, child) {
                return Row(
                  children: [
                    Icon(Icons.list_alt, color: Colors.grey.shade600, size: 20),
                    SizedBox(width: 8),
                    Expanded(
                      child: Text(
                        language.getText('–í—Å—ñ —Å—Ç–∞—Ç—É—Å–∏', '–í—Å–µ —Å—Ç–∞—Ç—É—Å—ã'),
                        overflow: TextOverflow.ellipsis,
                        maxLines: 1,
                        style: TextStyle(color: Colors.grey.shade700),
                      ),
                    ),
                  ],
                );
              },
            ),
          ),
          DropdownMenuItem(
            value: '–≤ –æ—á—ñ–∫—É–≤–∞–Ω–Ω—ñ',
            child: Consumer<LanguageProvider>(
              builder: (context, language, child) {
                return Row(
                  children: [
                    Icon(Icons.schedule, color: Colors.orange.shade600, size: 20),
                    SizedBox(width: 8),
                    Expanded(
                      child: Text(
                        language.getText('–í –æ—á—ñ–∫—É–≤–∞–Ω–Ω—ñ', '–í –æ–∂–∏–¥–∞–Ω–∏–∏'),
                        overflow: TextOverflow.ellipsis,
                        maxLines: 1,
                        style: TextStyle(color: Colors.orange.shade700),
                      ),
                    ),
                  ],
                );
              },
            ),
          ),
          DropdownMenuItem(
            value: '—É—Å–ø—ñ—à–Ω–æ',
            child: Consumer<LanguageProvider>(
              builder: (context, language, child) {
                return Row(
                  children: [
                    Icon(Icons.check_circle_outline, color: Colors.green.shade600, size: 20),
                    SizedBox(width: 8),
                    Expanded(
                      child: Text(
                        language.getText('–£—Å–ø—ñ—à–Ω–æ', '–£—Å–ø–µ—à–Ω–æ'),
                        overflow: TextOverflow.ellipsis,
                        maxLines: 1,
                        style: TextStyle(color: Colors.green.shade700),
                      ),
                    ),
                  ],
                );
              },
            ),
          ),
          DropdownMenuItem(
            value: '–ø—Ä–æ–ø—É—â–µ–Ω–æ',
            child: Consumer<LanguageProvider>(
              builder: (context, language, child) {
                return Row(
                  children: [
                    Icon(Icons.cancel_outlined, color: Colors.red.shade600, size: 20),
                    SizedBox(width: 8),
                    Expanded(
                      child: Text(
                        language.getText('–ü—Ä–æ–ø—É—â–µ–Ω–æ', '–ü—Ä–æ–ø—É—â–µ–Ω–æ'),
                        overflow: TextOverflow.ellipsis,
                        maxLines: 1,
                        style: TextStyle(color: Colors.red.shade700),
                      ),
                    ),
                  ],
                );
              },
            ),
          ),
        ],
        onChanged: (value) {
          setState(() {
            _selectedStatusFilter = value!;
          });
          _applyFilters();
        },
      ),
    );
  }
  

  Widget _buildStatsRow() {
    int total = _filteredSessions.length;
    int successful = _filteredSessions.where((s) => s.status == '—É—Å–ø—ñ—à–Ω–æ').length;
    int pending = _filteredSessions.where((s) => s.status == '–≤ –æ—á—ñ–∫—É–≤–∞–Ω–Ω—ñ').length;
    int missed = _filteredSessions.where((s) => s.status == '–ø—Ä–æ–ø—É—â–µ–Ω–æ').length;
    
    return Consumer<LanguageProvider>(
      builder: (context, language, child) {
        return Row(
          mainAxisAlignment: MainAxisAlignment.spaceAround,
          children: [
            _buildStatChip(language.getText('–í—Å—å–æ–≥–æ', '–í—Å–µ–≥–æ'), total, Colors.blue),
            _buildStatChip(language.getText('–£—Å–ø—ñ—à–Ω–æ', '–£—Å–ø–µ—à–Ω–æ'), successful, Colors.green),
            _buildStatChip(language.getText('–û—á—ñ–∫—É—é—Ç—å', '–û–∂–∏–¥–∞—é—Ç'), pending, Colors.orange),
            _buildStatChip(language.getText('–ü—Ä–æ–ø—É—â–µ–Ω–æ', '–ü—Ä–æ–ø—É—â–µ–Ω–æ'), missed, Colors.red),
          ],
        );
      },
    );
  }
  
  Widget _buildStatChip(String label, int count, Color color) {
    return Container(
      padding: EdgeInsets.symmetric(horizontal: 12, vertical: 6),
      decoration: BoxDecoration(
        color: color.withValues(alpha: 0.1),
        borderRadius: BorderRadius.circular(16),
        border: Border.all(color: color.withValues(alpha: 0.3)),
      ),
      child: Column(
        mainAxisSize: MainAxisSize.min,
        children: [
          Text(
            count.toString(),
            style: TextStyle(
              fontWeight: FontWeight.bold,
              fontSize: 16,
              color: color,
            ),
          ),
          Text(
            label,
            style: TextStyle(
              fontSize: 12,
              color: color,
            ),
          ),
        ],
      ),
    );
  }
  
  Widget _buildEmptyState() {
    return SafeArea(
      child: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Icon(
              Icons.archive_outlined,
              size: 64,
              color: Colors.grey.shade400,
            ),
            SizedBox(height: 16),
            Consumer<LanguageProvider>(
              builder: (context, language, child) {
                return Column(
                  children: [
                    Text(
                      language.getText('–ó–∞–ø–∏—Å–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω—ñ', '–ó–∞–ø–∏—Å–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã'),
                      style: TextStyle(
                        fontSize: 18,
                        fontWeight: FontWeight.w500,
                        color: Colors.grey.shade600,
                      ),
                    ),
                    SizedBox(height: 8),
                    Text(
                      language.getText('–°–ø—Ä–æ–±—É–π—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏ —Ñ—ñ–ª—å—Ç—Ä–∏', '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã'),
                      style: TextStyle(
                        fontSize: 14,
                        color: Colors.grey.shade500,
                      ),
                    ),
                  ],
                );
              },
            ),
          ],
        ),
      ),
    );
  }
  
  Widget _buildSessionCard(Session session) {
    return Container(
      margin: EdgeInsets.only(bottom: 12),
      decoration: BoxDecoration(
        color: Theme.of(context).colorScheme.surface,
        borderRadius: BorderRadius.circular(12),
        boxShadow: [
          BoxShadow(
            color: Colors.black.withValues(alpha: 0.2),
            blurRadius: 8,
            offset: Offset(0, 2),
          ),
        ],
      ),
      child: Stack(
        children: [
          // –û—Å–Ω–æ–≤–Ω–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç –∫–∞—Ä—Ç–∫–∏
          Padding(
            padding: EdgeInsets.all(16),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                // –í–µ—Ä—Ö–Ω—ñ–π —Ä—è–¥–æ–∫ –∑ –¥–∞—Ç–æ—é —Ç–∞ —Å—Ç–∞—Ç—É—Å–æ–º
                Row(
                  mainAxisAlignment: MainAxisAlignment.spaceBetween,
                  children: [
                    Expanded(
                      child: Text(
                        _formatDate(session.date),
                        style: TextStyle(
                          fontWeight: FontWeight.bold,
                          fontSize: 16,
                          color: Theme.of(context).colorScheme.primary,
                        ),
                      ),
                    ),
                    _buildStatusChip(session.status),
                  ],
                ),
                
                SizedBox(height: 12),
                
                // –û—Å–Ω–æ–≤–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è (–∑ –≤—ñ–¥—Å—Ç—É–ø–æ–º —Å–ø—Ä–∞–≤–∞ –¥–ª—è –∫–Ω–æ–ø–æ–∫)
                Padding(
                  padding: EdgeInsets.only(right: 100), // –ü—Ä–æ—Å—Ç—ñ—Ä –¥–ª—è –∫–Ω–æ–ø–æ–∫
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      // –ö–ª—ñ—î–Ω—Ç –∑ VIP –∑–Ω–∞—á–∫–æ–º
                      Row(
                        children: [
                          Expanded(
                            child: Text(
                              session.clientName,
                              style: TextStyle(
                                fontWeight: FontWeight.w600,
                                fontSize: 16,
                              ),
                            ),
                          ),
                          if (session.isRegularClient) ...[
                            SizedBox(width: 8),
                            Container(
                              padding: EdgeInsets.symmetric(horizontal: 6, vertical: 2),
                              decoration: BoxDecoration(
                                gradient: LinearGradient(
                                  colors: [Color(0xFFFFD700), Color(0xFFFFA500)],
                                ),
                                borderRadius: BorderRadius.circular(8),
                              ),
                              child: Row(
                                mainAxisSize: MainAxisSize.min,
                                children: [
                                  Icon(Icons.diamond, color: Colors.white, size: 12),
                                  SizedBox(width: 2),
                                  Text(
                                    'VIP',
                                    style: TextStyle(
                                      color: Colors.white,
                                      fontSize: 10,
                                      fontWeight: FontWeight.bold,
                                    ),
                                  ),
                                ],
                              ),
                            ),
                          ],
                        ],
                      ),
                      
                      SizedBox(height: 4),
                      
                      // –ú–∞–π—Å—Ç–µ—Ä
                      Consumer<LanguageProvider>(
                        builder: (context, language, child) {
                          return Text(
                            '${language.getText('–ú–∞–π—Å—Ç—Ä–∏–Ω—è', '–ú–∞—Å—Ç–µ—Ä–∏—Ü–∞')}: ${_getMasterName(session.masterId, language.currentLocale.languageCode)}',
                            style: TextStyle(
                              color: Colors.grey.shade600,
                              fontSize: 14,
                            ),
                          );
                        },
                      ),
                      
                      SizedBox(height: 2),
                      
                      // –ß–∞—Å —Ç–∞ —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å
                      Consumer<LanguageProvider>(
                        builder: (context, language, child) {
                          return Text(
                            '${language.getText('–ß–∞—Å', '–í—Ä–µ–º—è')}: ${session.time} (${session.duration} ${language.getText('—Ö–≤', '–º–∏–Ω')})',
                            style: TextStyle(
                              color: Colors.grey.shade600,
                              fontSize: 14,
                            ),
                          );
                        },
                      ),
                      
                      SizedBox(height: 2),
                      
                      // –ü–æ—Å–ª—É–≥–∞
                      Consumer<LanguageProvider>(
                        builder: (context, language, child) {
                          return Text(
                            '${language.getText('–ü–æ—Å–ª—É–≥–∞', '–£—Å–ª—É–≥–∞')}: ${_getLocalizedService(session.service, language)}',
                            style: TextStyle(
                              color: Theme.of(context).colorScheme.primary,
                              fontWeight: FontWeight.w500,
                              fontSize: 14,
                            ),
                          );
                        },
                      ),
                      
                      // –¶—ñ–Ω–∞
                      if (session.price != null) ...[
                        SizedBox(height: 2),
                        Consumer<LanguageProvider>(
                          builder: (context, language, child) {
                            return Text(
                              '${language.getText('–¶—ñ–Ω–∞', '–¶–µ–Ω–∞')}: ${session.price!.toStringAsFixed(2)} ‚Ç¨',
                              style: TextStyle(
                                color: Colors.green.shade700,
                                fontWeight: FontWeight.bold,
                                fontSize: 14,
                              ),
                            );
                          },
                        ),
                      ],
                      
                      // –ü—Ä–∏–º—ñ—Ç–∫–∏ (—è–∫—â–æ —î)
                      if (session.notes != null && session.notes!.isNotEmpty) ...[
                        SizedBox(height: 8),
                        Container(
                          padding: EdgeInsets.all(8),
                          decoration: BoxDecoration(
                            color: Theme.of(context).colorScheme.surfaceVariant.withValues(alpha: 0.5),
                            borderRadius: BorderRadius.circular(6),
                          ),
                          child: Text(
                            session.notes!,
                            style: TextStyle(
                              fontSize: 12,
                              fontStyle: FontStyle.italic,
                              color: Colors.grey.shade700,
                            ),
                          ),
                        ),
                      ],
                    ],
                  ),
                ),
              ],
            ),
          ),
          
          // –ö–Ω–æ–ø–∫–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—É –ø—ñ–¥ —Å—Ç–∞—Ç—É—Å–æ–º
          if (session.phone != null && session.phone!.isNotEmpty)
            Positioned(
              top: 50, // –ù–∏–∂—á–µ —Å—Ç–∞—Ç—É—Å—É
              right: 56, // –ó–ª—ñ–≤–∞ –≤—ñ–¥ WhatsApp
              child: IconButton(
                onPressed: () => _makePhoneCall(session.phone!),
                icon: Icon(
                  Icons.phone,
                  color: Colors.blue[600],
                  size: 28,
                ),
                tooltip: Provider.of<LanguageProvider>(context, listen: false).getText('–ü–æ–¥–∑–≤–æ–Ω–∏—Ç–∏', '–ü–æ–∑–≤–æ–Ω–∏—Ç—å'),
                padding: EdgeInsets.all(4),
                constraints: BoxConstraints(
                  minWidth: 32,
                  minHeight: 32,
                ),
              ),
            ),
          
          // WhatsApp –∫–Ω–æ–ø–∫–∞ –ø—ñ–¥ —Å—Ç–∞—Ç—É—Å–æ–º
          if (session.phone != null && session.phone!.isNotEmpty)
            Positioned(
              top: 50, // –ù–∏–∂—á–µ —Å—Ç–∞—Ç—É—Å—É
              right: 8,
              child: IconButton(
                onPressed: () => _openWhatsApp(session.phone!),
                icon: FaIcon(
                  FontAwesomeIcons.whatsapp,
                  color: Color(0xFF25D366), // –û—Ñ—ñ—Ü—ñ–π–Ω–∏–π –∫–æ–ª—ñ—Ä WhatsApp
                  size: 28,
                ),
                tooltip: Provider.of<LanguageProvider>(context, listen: false).getText('–ù–∞–ø–∏—Å–∞—Ç–∏ –≤ WhatsApp', '–ù–∞–ø–∏—Å–∞—Ç—å –≤ WhatsApp'),
                padding: EdgeInsets.all(4),
                constraints: BoxConstraints(
                  minWidth: 32,
                  minHeight: 32,
                ),
              ),
            ),
          
          // –ö–Ω–æ–ø–∫–∞ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —Å–ø—Ä–∞–≤–∞ –∑–Ω–∏–∑—É
          Positioned(
            bottom: 8,
            right: 8,
            child: IconButton(
              onPressed: () => _editSession(session),
              icon: Icon(
                Icons.edit,
                color: Theme.of(context).colorScheme.primary,
                size: 26,
              ),
              tooltip: Provider.of<LanguageProvider>(context, listen: false).getText('–†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –∑–∞–ø–∏—Å', '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø–∏—Å—å'),
              padding: EdgeInsets.all(4),
              constraints: BoxConstraints(
                minWidth: 32,
                minHeight: 32,
              ),
            ),
          ),
        ],
      ),
    );
  }
  
  Widget _buildStatusChip(String status) {
    Color backgroundColor;
    Color textColor;
    IconData icon;
    
    switch (status) {
      case '—É—Å–ø—ñ—à–Ω–æ':
        backgroundColor = Colors.green.shade50;
        textColor = Colors.green.shade700;
        icon = Icons.check_circle_outline;
        break;
      case '–ø—Ä–æ–ø—É—â–µ–Ω–æ':
        backgroundColor = Colors.red.shade50;
        textColor = Colors.red.shade700;
        icon = Icons.cancel_outlined;
        break;
      case '–≤ –æ—á—ñ–∫—É–≤–∞–Ω–Ω—ñ':
      default:
        backgroundColor = Colors.orange.shade50;
        textColor = Colors.orange.shade700;
        icon = Icons.schedule;
        break;
    }
    
    return Container(
      padding: EdgeInsets.symmetric(horizontal: 8, vertical: 4),
      decoration: BoxDecoration(
        color: backgroundColor,
        borderRadius: BorderRadius.circular(12),
        border: Border.all(color: textColor.withValues(alpha: 0.3)),
      ),
      child: Row(
        mainAxisSize: MainAxisSize.min,
        children: [
          Icon(icon, size: 14, color: textColor),
          SizedBox(width: 4),
          Text(
            _getStatusText(status),
            style: TextStyle(
              fontSize: 12,
              fontWeight: FontWeight.w500,
              color: textColor,
            ),
          ),
        ],
      ),
    );
  }
  
  String _getStatusText(String status) {
    final language = Provider.of<LanguageProvider>(context, listen: false);
    switch (status) {
      case '—É—Å–ø—ñ—à–Ω–æ':
        return language.getText('–£—Å–ø—ñ—à–Ω–æ', '–£—Å–ø–µ—à–Ω–æ');
      case '–ø—Ä–æ–ø—É—â–µ–Ω–æ':
        return language.getText('–ü—Ä–æ–ø—É—â–µ–Ω–æ', '–ü—Ä–æ–ø—É—â–µ–Ω–æ');
      case '–≤ –æ—á—ñ–∫—É–≤–∞–Ω–Ω—ñ':
      default:
        return language.getText('–í –æ—á—ñ–∫—É–≤–∞–Ω–Ω—ñ', '–í –æ–∂–∏–¥–∞–Ω–∏–∏');
    }
  }
  
  String _formatDate(String dateString) {
    try {
      final date = DateTime.parse(dateString);
      final language = Provider.of<LanguageProvider>(context, listen: false);
      final months = _getLocalizedMonths(language);
      return '${date.day} ${months[date.month - 1]} ${date.year}';
    } catch (e) {
      return dateString;
    }
  }
  
  void _makePhoneCall(String phoneNumber) async {
    final Uri phoneUri = Uri(scheme: 'tel', path: phoneNumber);
    if (await canLaunchUrl(phoneUri)) {
      await launchUrl(phoneUri);
    }
  }
  
  void _openWhatsApp(String phoneNumber) async {
    // –ü—Ä–∏–±–∏—Ä–∞—î–º–æ –≤—Å—ñ —Å–∏–º–≤–æ–ª–∏ –∫—Ä—ñ–º —Ü–∏—Ñ—Ä —Ç–∞ +
    String cleanNumber = phoneNumber.replaceAll(RegExp(r'[^\d+]'), '');
    final Uri whatsappUri = Uri.parse('https://wa.me/$cleanNumber');
    
    if (await canLaunchUrl(whatsappUri)) {
      await launchUrl(whatsappUri, mode: LaunchMode.externalApplication);
    }
  }
  
  void _editSession(Session session) async {
    final result = await Navigator.push(
      context,
      MaterialPageRoute(
        builder: (context) => SessionEditPage(session: session),
      ),
    );    if (result == true) {
      // –Ü–Ω–≤–∞–ª—ñ–¥—É—î–º–æ –∫–µ—à –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–º—É –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ñ
      final appState = Provider.of<AppStateProvider>(context, listen: false);
      appState.invalidateCache();
      
      _loadData(); // –ü–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –¥–∞–Ω—ñ –ø—ñ—Å–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è
    }
  }
}
