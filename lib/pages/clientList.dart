import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import 'package:nastya_app/pages/sessionAdd.dart';
import 'package:nastya_app/pages/sessionEdit.dart';
import 'package:nastya_app/services/firestore_service.dart';
import 'package:nastya_app/models/models.dart';
import 'package:url_launcher/url_launcher.dart';
import 'package:font_awesome_flutter/font_awesome_flutter.dart';
import 'package:nastya_app/widgets/update_info_widget.dart';
import 'package:nastya_app/providers/app_state_provider.dart';
import 'package:nastya_app/widgets/connectivity_wrapper.dart';
import 'package:nastya_app/providers/language_provider.dart';

class ClientListPage extends StatefulWidget {
  final String masterName;
  final String masterId;
  final DateTime selectedDate;

  const ClientListPage({
    super.key,
    required this.masterName,
    required this.masterId,
    required this.selectedDate,
  });

  @override
  State<ClientListPage> createState() => _ClientListPageState();
}

class _ClientListPageState extends State<ClientListPage> {
  final FirestoreService _firestoreService = FirestoreService();
  List<Session> _sessions = [];
  bool _isLoading = true;

  String _getLocalizedService(String service, LanguageProvider language) {
    switch (service) {
      case '–ú–∞–Ω—ñ–∫—é—Ä':
        return language.getText('–ú–∞–Ω—ñ–∫—é—Ä', '–ú–∞–Ω–∏–∫—é—Ä');
      case '–ü–µ–¥–∏–∫—é—Ä':
        return language.getText('–ü–µ–¥–∏–∫—é—Ä', '–ü–µ–¥–∏–∫—é—Ä');
      case '–ù–∞—Ä–∞—â—É–≤–∞–Ω–Ω—è –Ω—ñ–≥—Ç—ñ–≤':
        return language.getText('–ù–∞—Ä–∞—â—É–≤–∞–Ω–Ω—è –Ω—ñ–≥—Ç—ñ–≤', '–ù–∞—Ä–∞—â–∏–≤–∞–Ω–∏–µ –Ω–æ–≥—Ç–µ–π');
      case '–î–∏–∑–∞–π–Ω –Ω—ñ–≥—Ç—ñ–≤':
        return language.getText('–î–∏–∑–∞–π–Ω –Ω—ñ–≥—Ç—ñ–≤', '–î–∏–∑–∞–π–Ω –Ω–æ–≥—Ç–µ–π');
      case '–ü–æ–∫—Ä–∏—Ç—Ç—è –≥–µ–ª—å-–ª–∞–∫':
        return language.getText('–ü–æ–∫—Ä–∏—Ç—Ç—è –≥–µ–ª—å-–ª–∞–∫', '–ü–æ–∫—Ä—ã—Ç–∏–µ –≥–µ–ª—å-–ª–∞–∫');
      case '–ó–Ω—è—Ç—Ç—è –ø–æ–∫—Ä–∏—Ç—Ç—è':
        return language.getText('–ó–Ω—è—Ç—Ç—è –ø–æ–∫—Ä–∏—Ç—Ç—è', '–°–Ω—è—Ç–∏–µ –ø–æ–∫—Ä—ã—Ç–∏—è');
      case '–ö–æ—Ä–µ–∫—Ü—ñ—è':
        return language.getText('–ö–æ—Ä–µ–∫—Ü—ñ—è', '–ö–æ—Ä—Ä–µ–∫—Ü–∏—è');
      default:
        return service;
    }
  }

  @override
  void initState() {
    super.initState();
    print('=== –ü–û–ß–ê–¢–û–ö –î–ï–ë–ê–ì–Ü–ù–ì–£ ===');
    print('–ú–∞–π—Å—Ç–µ—Ä ID: ${widget.masterId}');
    print('–û–±—Ä–∞–Ω–∞ –¥–∞—Ç–∞: ${widget.selectedDate}');
    print('–Ü–º\'—è –º–∞–π—Å—Ç—Ä–∞: ${widget.masterName}');
    _testLoadAllSessions(); // –°–ø–æ—á–∞—Ç–∫—É –¥–∏–≤–∏–º–æ—Å—è –≤—Å—ñ –∑–∞–ø–∏—Å–∏
    _loadSessions(); // –ü–æ—Ç—ñ–º –∑–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Ñ—ñ–ª—å—Ç—Ä–æ–≤–∞–Ω—ñ
  }

  // –¢–µ—Å—Ç–æ–≤–∏–π –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–∫–∞–∑—É –≤—Å—ñ—Ö –∑–∞–ø–∏—Å—ñ–≤  
  Future<void> _testLoadAllSessions() async {
    try {
      print('========================');
      print('–¢–ï–°–¢: –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –í–°–Ü –∑–∞–ø–∏—Å–∏ –∑ –±–∞–∑–∏...');
      final allSessions = await _firestoreService.getAllSessions();
      print('–ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞–ø–∏—Å—ñ–≤ —É –±–∞–∑—ñ: ${allSessions.length}');
      
      if (allSessions.isEmpty) {
        print('‚ùå –ë–ê–ó–ê –î–ê–ù–ò–• –ü–û–†–û–ñ–ù–Ø! –ù–µ–º–∞—î –∂–æ–¥–Ω–æ–≥–æ –∑–∞–ø–∏—Å—É.');
        print('–ü–æ—Ç—Ä—ñ–±–Ω–æ —Å–ø–æ—á–∞—Ç–∫—É —Å—Ç–≤–æ—Ä–∏—Ç–∏ –∑–∞–ø–∏—Å —á–µ—Ä–µ–∑ SessionAddPage');
      } else {
        print('‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–∏ –≤ –±–∞–∑—ñ:');
        for (int i = 0; i < allSessions.length; i++) {
          final session = allSessions[i];
          print('  üìù –ó–∞–ø–∏—Å ${i+1}:');
          print('     –ö–ª—ñ—î–Ω—Ç: ${session.clientName}');
          print('     –î–∞—Ç–∞: ${session.date}');
          print('     –ß–∞—Å: ${session.time}');
          print('     –ú–∞–π—Å—Ç–µ—Ä ID: ${session.masterId}');
          print('     –ü–æ—Ç–æ—á–Ω–∏–π –º–∞–π—Å—Ç–µ—Ä ID: ${widget.masterId}');
          print('     –°–ø—ñ–≤–ø–∞–¥–∞—î: ${session.masterId == widget.masterId ? "‚úÖ –¢–ê–ö" : "‚ùå –ù–Ü"}');
          print('     ---');
        }
      }
      print('========================');
    } catch (e) {
      print('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –≤—Å—ñ—Ö –∑–∞–ø–∏—Å—ñ–≤: $e');
    }
  }

  Future<void> _loadSessions() async {
    try {
      final dateString = '${widget.selectedDate.year}-${widget.selectedDate.month.toString().padLeft(2, '0')}-${widget.selectedDate.day.toString().padLeft(2, '0')}';
      print('–ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Å–µ—Å—ñ—ó –¥–ª—è –º–∞–π—Å—Ç—Ä–∞ ${widget.masterId} –Ω–∞ –¥–∞—Ç—É $dateString');
      
      final sessions = await _firestoreService.getSessionsByMasterAndDate(
        widget.masterId,
        dateString,
      );
      
      print('–ó–Ω–∞–π–¥–µ–Ω–æ —Å–µ—Å—ñ–π: ${sessions.length}');
      for (int i = 0; i < sessions.length; i++) {
        print('–°–µ—Å—ñ—è $i: ${sessions[i].clientName} - ${sessions[i].time}');
      }
      
      setState(() {
        _sessions = sessions;
        _isLoading = false;
      });
    } catch (e) {
      print('–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å–µ—Å—ñ–π: $e');
      setState(() {
        _isLoading = false;
      });
    }
  }

  // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –ø—Ä–∏–º—ñ—Ç–∫–∏ –∫–ª—ñ—î–Ω—Ç–∞ –∑ –∫–æ–ª–µ–∫—Ü—ñ—ó clients
  Future<String?> _getClientNotes(Session session) async {
    try {
      final clientId = await _firestoreService.findClientId(session.clientName, session.phone ?? '');
      if (clientId != null) {
        final client = await _firestoreService.getClientById(clientId);
        return client?.notes;
      }
      return null;
    } catch (e) {
      print('–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø—Ä–∏–º—ñ—Ç–æ–∫ –∫–ª—ñ—î–Ω—Ç–∞: $e');
      return null;
    }
  }

  String _formatDate(DateTime date, LanguageProvider language) {
    final monthNames = [
      language.getText('—Å—ñ—á–Ω—è', '—è–Ω–≤–∞—Ä—è'),
      language.getText('–ª—é—Ç–æ–≥–æ', '—Ñ–µ–≤—Ä–∞–ª—è'),
      language.getText('–±–µ—Ä–µ–∑–Ω—è', '–º–∞—Ä—Ç–∞'),
      language.getText('–∫–≤—ñ—Ç–Ω—è', '–∞–ø—Ä–µ–ª—è'),
      language.getText('—Ç—Ä–∞–≤–Ω—è', '–º–∞—è'),
      language.getText('—á–µ—Ä–≤–Ω—è', '–∏—é–Ω—è'),
      language.getText('–ª–∏–ø–Ω—è', '–∏—é–ª—è'),
      language.getText('—Å–µ—Ä–ø–Ω—è', '–∞–≤–≥—É—Å—Ç–∞'),
      language.getText('–≤–µ—Ä–µ—Å–Ω—è', '—Å–µ–Ω—Ç—è–±—Ä—è'),
      language.getText('–∂–æ–≤—Ç–Ω—è', '–æ–∫—Ç—è–±—Ä—è'),
      language.getText('–ª–∏—Å—Ç–æ–ø–∞–¥–∞', '–Ω–æ—è–±—Ä—è'),
      language.getText('–≥—Ä—É–¥–Ω—è', '–¥–µ–∫–∞–±—Ä—è'),
    ];
    return '${date.day} ${monthNames[date.month - 1]} ${date.year}';
  }

  // –í—ñ–¥–∫—Ä–∏—Ç–∏ WhatsApp –∑ –Ω–æ–º–µ—Ä–æ–º
  Future<void> _openWhatsApp(String? phone) async {
    if (phone == null || phone.isEmpty) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          duration: Duration(seconds: 1),
          content: Consumer<LanguageProvider>(
            builder: (context, language, child) {
              return Text(
                language.getText('–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –Ω–µ –≤–∫–∞–∑–∞–Ω–æ', '–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω'),
              );
            },
          ),
          backgroundColor: Theme.of(context).colorScheme.error,
        ),
      );
      return;
    }

    // –û—á–∏—â–∞—î–º–æ –Ω–æ–º–µ—Ä –≤—ñ–¥ –∑–∞–π–≤–∏—Ö —Å–∏–º–≤–æ–ª—ñ–≤
    final cleanPhone = phone.replaceAll(RegExp(r'[^\d+]'), '');
    
    // –†–æ–∑—É–º–Ω–µ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –Ω–æ–º–µ—Ä—ñ–≤ –¥–ª—è —Ä—ñ–∑–Ω–∏—Ö –∫—Ä–∞—ó–Ω
    String formattedPhone = cleanPhone;
    
    if (cleanPhone.startsWith('+')) {
      // –ù–æ–º–µ—Ä –≤–∂–µ –º–∞—î –º—ñ–∂–Ω–∞—Ä–æ–¥–Ω–∏–π –∫–æ–¥
      formattedPhone = cleanPhone;
    } else if (cleanPhone.startsWith('0')) {
      // –í–∏–∑–Ω–∞—á–∞—î–º–æ –∫—Ä–∞—ó–Ω—É –∑–∞ –¥–æ–≤–∂–∏–Ω–æ—é —Ç–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–æ—é –Ω–æ–º–µ—Ä–∞
      if (cleanPhone.length >= 10 && cleanPhone.length <= 12) {
        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —Ü–µ —É–∫—Ä–∞—ó–Ω—Å—å–∫–∏–π –Ω–æ–º–µ—Ä (–¥–æ–≤–∂–∏–Ω–∞ 10 –ø—ñ—Å–ª—è 0)
        if (cleanPhone.length == 10) {
          formattedPhone = '+38$cleanPhone';  // –£–∫—Ä–∞—ó–Ω—Å—å–∫—ñ –Ω–æ–º–µ—Ä–∏
        } else if (cleanPhone.length == 11) {
          // –ú–æ–∂–µ –±—É—Ç–∏ –Ω—ñ–º–µ—Ü—å–∫–∏–π –Ω–æ–º–µ—Ä (0 + 10 —Ü–∏—Ñ—Ä)
          formattedPhone = '+49${cleanPhone.substring(1)}';  // –ù—ñ–º–µ—Ü—å–∫—ñ –Ω–æ–º–µ—Ä–∏
        } else {
          // –ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º –¥–æ–¥–∞—î–º–æ –∫–æ–¥ –£–∫—Ä–∞—ó–Ω–∏
          formattedPhone = '+38$cleanPhone';
        }
      } else {
        formattedPhone = '+38$cleanPhone';  // –ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º –£–∫—Ä–∞—ó–Ω–∞
      }
    } else if (cleanPhone.startsWith('49')) {
      // –ù—ñ–º–µ—Ü—å–∫–∏–π –∫–æ–¥ –±–µ–∑ +
      formattedPhone = '+$cleanPhone';
    } else if (cleanPhone.startsWith('38')) {
      // –£–∫—Ä–∞—ó–Ω—Å—å–∫–∏–π –∫–æ–¥ –±–µ–∑ +
      formattedPhone = '+$cleanPhone';
    } else if (cleanPhone.length >= 10) {
      // –ù–æ–º–µ—Ä –±–µ–∑ –∫–æ–¥—É –∫—Ä–∞—ó–Ω–∏ - –≤–∏–∑–Ω–∞—á–∞—î–º–æ –∑–∞ –¥–æ–≤–∂–∏–Ω–æ—é
      if (cleanPhone.length == 9 || cleanPhone.length == 10) {
        formattedPhone = '+380$cleanPhone';  // –£–∫—Ä–∞—ó–Ω–∞ –±–µ–∑ 0
      } else if (cleanPhone.length == 10 || cleanPhone.length == 11) {
        formattedPhone = '+49$cleanPhone';   // –ù—ñ–º–µ—á—á–∏–Ω–∞ –±–µ–∑ 0
      } else {
        formattedPhone = '+$cleanPhone';     // –î–æ–¥–∞—î–º–æ + –¥–æ –±—É–¥—å-—è–∫–æ–≥–æ –Ω–æ–º–µ—Ä–∞
      }
    } else {
      formattedPhone = '+$cleanPhone';
    }

    print('üìû –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –Ω–æ–º–µ—Ä–∞: "$phone" ‚Üí "$cleanPhone" ‚Üí "$formattedPhone"');

    final whatsappUrl = 'https://wa.me/$formattedPhone';
    print('üîó –°–ø—Ä–æ–±–∞ –≤—ñ–¥–∫—Ä–∏—Ç–∏ URL: $whatsappUrl');
    
    try {
      final uri = Uri.parse(whatsappUrl);
      print('‚úÖ URI —Å—Ç–≤–æ—Ä–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ: $uri');
      
      // –°–ø—Ä–æ–±—É—î–º–æ –∑–∞–ø—É—Å—Ç–∏—Ç–∏ –Ω–∞–ø—Ä—è–º—É –±–µ–∑ canLaunchUrl
      print('üöÄ –°–ø—Ä–æ–±–∞ –∑–∞–ø—É—Å–∫—É WhatsApp...');
      await launchUrl(uri, mode: LaunchMode.externalApplication);
      print('‚úÖ WhatsApp –∑–∞–ø—É—â–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ');
      
    } catch (e) {
      print('‚ùå –û—Å–Ω–æ–≤–Ω–∏–π –º–µ—Ç–æ–¥ –Ω–µ —Å–ø—Ä–∞—Ü—é–≤–∞–≤: $e');
      print('üîÑ –°–ø—Ä–æ–±—É—î–º–æ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∏–π –º–µ—Ç–æ–¥...');
      
      try {
        // –°–ø—Ä–æ–±—É—î–º–æ —á–µ—Ä–µ–∑ whatsapp:// –ø—Ä–æ—Ç–æ–∫–æ–ª
        final alternativeUrl = 'whatsapp://send?phone=$formattedPhone';
        final alternativeUri = Uri.parse(alternativeUrl);
        print('üîó –°–ø—Ä–æ–±–∞ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–≥–æ URL: $alternativeUrl');
        
        await launchUrl(alternativeUri, mode: LaunchMode.externalApplication);
        print('‚úÖ –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∏–π –º–µ—Ç–æ–¥ —Å–ø—Ä–∞—Ü—é–≤–∞–≤');
        
      } catch (e2) {
        print('‚ùå –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∏–π –º–µ—Ç–æ–¥ —Ç–∞–∫–æ–∂ –Ω–µ —Å–ø—Ä–∞—Ü—é–≤–∞–≤: $e2');
        if (mounted) {
          final language = Provider.of<LanguageProvider>(context, listen: false);
          ScaffoldMessenger.of(context).showSnackBar(
            SnackBar(
              duration: Duration(seconds: 1),
              content: Text(language.getText('WhatsApp –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∞–±–æ –≤—ñ–Ω –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π', 'WhatsApp –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω')),
              backgroundColor: Theme.of(context).colorScheme.error,
            ),
          );
        }
      }
    }
  }

  // –ó–¥—ñ–π—Å–Ω–∏—Ç–∏ –¥–∑–≤—ñ–Ω–æ–∫
  Future<void> _makePhoneCall(String? phone) async {
    if (phone == null || phone.isEmpty) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          duration: Duration(seconds: 1),
          content: Consumer<LanguageProvider>(
            builder: (context, language, child) {
              return Text(
                language.getText('–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –Ω–µ –≤–∫–∞–∑–∞–Ω–æ', '–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω'),
              );
            },
          ),
          backgroundColor: Theme.of(context).colorScheme.error,
        ),
      );
      return;
    }

    // –û—á–∏—â–∞—î–º–æ –Ω–æ–º–µ—Ä –≤—ñ–¥ –∑–∞–π–≤–∏—Ö —Å–∏–º–≤–æ–ª—ñ–≤
    final cleanPhone = phone.replaceAll(RegExp(r'[^\d+]'), '');
    
    // –†–æ–∑—É–º–Ω–µ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –Ω–æ–º–µ—Ä—ñ–≤ –¥–ª—è —Ä—ñ–∑–Ω–∏—Ö –∫—Ä–∞—ó–Ω
    String formattedPhone = cleanPhone;
    
    if (cleanPhone.startsWith('+')) {
      // –ù–æ–º–µ—Ä –≤–∂–µ –º–∞—î –º—ñ–∂–Ω–∞—Ä–æ–¥–Ω–∏–π –∫–æ–¥
      formattedPhone = cleanPhone;
    } else if (cleanPhone.startsWith('0')) {
      // –í–∏–∑–Ω–∞—á–∞—î–º–æ –∫—Ä–∞—ó–Ω—É –∑–∞ –¥–æ–≤–∂–∏–Ω–æ—é —Ç–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–æ—é –Ω–æ–º–µ—Ä–∞
      if (cleanPhone.length >= 10 && cleanPhone.length <= 12) {
        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —Ü–µ —É–∫—Ä–∞—ó–Ω—Å—å–∫–∏–π –Ω–æ–º–µ—Ä (–¥–æ–≤–∂–∏–Ω–∞ 10 –ø—ñ—Å–ª—è 0)
        if (cleanPhone.length == 10) {
          formattedPhone = '+38$cleanPhone';  // –£–∫—Ä–∞—ó–Ω—Å—å–∫—ñ –Ω–æ–º–µ—Ä–∏
        } else if (cleanPhone.length == 11) {
          // –ú–æ–∂–µ –±—É—Ç–∏ –Ω—ñ–º–µ—Ü—å–∫–∏–π –Ω–æ–º–µ—Ä (0 + 10 —Ü–∏—Ñ—Ä)
          formattedPhone = '+49${cleanPhone.substring(1)}';  // –ù—ñ–º–µ—Ü—å–∫—ñ –Ω–æ–º–µ—Ä–∏
        } else {
          // –ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º –¥–æ–¥–∞—î–º–æ –∫–æ–¥ –£–∫—Ä–∞—ó–Ω–∏
          formattedPhone = '+38$cleanPhone';
        }
      } else {
        formattedPhone = '+38$cleanPhone';  // –ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º –£–∫—Ä–∞—ó–Ω–∞
      }
    } else if (cleanPhone.startsWith('49')) {
      // –ù—ñ–º–µ—Ü—å–∫–∏–π –∫–æ–¥ –±–µ–∑ +
      formattedPhone = '+$cleanPhone';
    } else if (cleanPhone.startsWith('38')) {
      // –£–∫—Ä–∞—ó–Ω—Å—å–∫–∏–π –∫–æ–¥ –±–µ–∑ +
      formattedPhone = '+$cleanPhone';
    } else if (cleanPhone.length >= 10) {
      // –ù–æ–º–µ—Ä –±–µ–∑ –∫–æ–¥—É –∫—Ä–∞—ó–Ω–∏ - –≤–∏–∑–Ω–∞—á–∞—î–º–æ –∑–∞ –¥–æ–≤–∂–∏–Ω–æ—é
      if (cleanPhone.length == 9 || cleanPhone.length == 10) {
        formattedPhone = '+380$cleanPhone';  // –£–∫—Ä–∞—ó–Ω–∞ –±–µ–∑ 0
      } else if (cleanPhone.length == 10 || cleanPhone.length == 11) {
        formattedPhone = '+49$cleanPhone';   // –ù—ñ–º–µ—á—á–∏–Ω–∞ –±–µ–∑ 0
      } else {
        formattedPhone = '+$cleanPhone';     // –î–æ–¥–∞—î–º–æ + –¥–æ –±—É–¥—å-—è–∫–æ–≥–æ –Ω–æ–º–µ—Ä–∞
      }
    } else {
      formattedPhone = '+$cleanPhone';
    }

    print('üìû –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –Ω–æ–º–µ—Ä–∞ –¥–ª—è –¥–∑–≤—ñ–Ω–∫–∞: "$phone" ‚Üí "$cleanPhone" ‚Üí "$formattedPhone"');

    final phoneUrl = 'tel:$formattedPhone';
    print('üìû –°–ø—Ä–æ–±–∞ –∑–¥—ñ–π—Å–Ω–∏—Ç–∏ –¥–∑–≤—ñ–Ω–æ–∫: $phoneUrl');
    
    try {
      final uri = Uri.parse(phoneUrl);
      
      if (await canLaunchUrl(uri)) {
        print('‚úÖ –ó–∞–ø—É—Å–∫–∞—î–º–æ —Ç–µ–ª–µ—Ñ–æ–Ω–Ω–∏–π –¥–∑–≤—ñ–Ω–æ–∫...');
        await launchUrl(uri);
        print('‚úÖ –î–∑–≤—ñ–Ω–æ–∫ —ñ–Ω—ñ—Ü—ñ–π–æ–≤–∞–Ω–∏–π —É—Å–ø—ñ—à–Ω–æ');
      } else {
        print('‚ùå –ù–µ –≤–¥–∞—î—Ç—å—Å—è –∑–¥—ñ–π—Å–Ω–∏—Ç–∏ –¥–∑–≤—ñ–Ω–æ–∫');
        if (mounted) {
          final language = Provider.of<LanguageProvider>(context, listen: false);
          ScaffoldMessenger.of(context).showSnackBar(
            SnackBar(
              duration: Duration(seconds: 1),
              content: Text(language.getText('–ù–µ –≤–¥–∞—î—Ç—å—Å—è –∑–¥—ñ–π—Å–Ω–∏—Ç–∏ –¥–∑–≤—ñ–Ω–æ–∫', '–ù–µ —É–¥–∞–µ—Ç—Å—è —Å–æ–≤–µ—Ä—à–∏—Ç—å –∑–≤–æ–Ω–æ–∫')),
              backgroundColor: Theme.of(context).colorScheme.error,
            ),
          );
        }
      }
    } catch (e) {
      print('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–¥—ñ–π—Å–Ω–µ–Ω–Ω—è –¥–∑–≤—ñ–Ω–∫–∞: $e');
      if (mounted) {
        final language = Provider.of<LanguageProvider>(context, listen: false);
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            duration: Duration(seconds: 1),
            content: Text(language.getText('–ü–æ–º–∏–ª–∫–∞ –∑–¥—ñ–π—Å–Ω–µ–Ω–Ω—è –¥–∑–≤—ñ–Ω–∫–∞', '–û—à–∏–±–∫–∞ —Å–æ–≤–µ—Ä—à–µ–Ω–∏—è –∑–≤–æ–Ω–∫–∞')),
            backgroundColor: Theme.of(context).colorScheme.error,
          ),
        );
      }
    }
  }

  // –†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –∑–∞–ø–∏—Å
  void _editSession(Session session) async {
    // –ü–µ—Ä–µ—Ö—ñ–¥ –¥–æ —Å—Ç–æ—Ä—ñ–Ω–∫–∏ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è
    final result = await Navigator.push(
      context,
      MaterialPageRoute(
        builder: (context) => SessionEditPage(
          session: session,
        ),
      ),
    );
    
    // –û–Ω–æ–≤–ª—é—î–º–æ —Å–ø–∏—Å–æ–∫ —è–∫—â–æ –∑–∞–ø–∏—Å –±—É–ª–æ –∑–º—ñ–Ω–µ–Ω–æ
    if (result == true) {
      // –Ü–Ω–≤–∞–ª—ñ–¥—É—î–º–æ –∫–µ—à –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–º—É –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ñ
      final appState = Provider.of<AppStateProvider>(context, listen: false);
      appState.invalidateCache();
      
      _loadSessions();
    }
  }

  @override
  Widget build(BuildContext context) {
    return ConnectivityWrapper(
      child: Scaffold(
      appBar: AppBar(
        backgroundColor: Theme.of(context).colorScheme.primary,
        foregroundColor: Theme.of(context).colorScheme.onPrimary,
        title: Consumer<LanguageProvider>(
          builder: (context, language, child) {
            return Column(
              children: [
                Text(
                  language.getText('–ó–∞–ø–∏—Å–∏', '–ó–∞–ø–∏—Å–∏'),
                  style: TextStyle(
                    fontSize: 20,
                    fontWeight: FontWeight.bold,
                  ),
                ),
                Text(
                  _formatDate(widget.selectedDate, language),
                  style: TextStyle(
                    fontSize: 14,
                    color: Theme.of(context).colorScheme.onPrimary.withValues(alpha: 0.8),
                  ),
                ),
              ],
            );
          },
        ),
        centerTitle: true,
        elevation: 0,
      ),
      body: SafeArea(
        child: RefreshIndicator(
          onRefresh: () async {
            // –û–Ω–æ–≤–ª—é—î–º–æ —á–µ—Ä–µ–∑ —Ü–µ–Ω—Ç—Ä–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä (–ø—Ä–∏–º—É—Å–æ–≤–æ –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —á–∞—Å—É)
            final appState = Provider.of<AppStateProvider>(context, listen: false);
            await appState.refreshAllData(forceRefresh: true);
            
            // –¢–∞–∫–æ–∂ –æ–Ω–æ–≤–ª—é—î–º–æ –ª–æ–∫–∞–ª—å–Ω—ñ –¥–∞–Ω—ñ
            await _loadSessions();
            
            // –ü–æ–∫–∞–∑—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
            if (mounted) {
              final language = Provider.of<LanguageProvider>(context, listen: false);
              ScaffoldMessenger.of(context).showSnackBar(
                SnackBar(
                  content: Row(
                    children: [
                      Icon(Icons.check_circle, color: Colors.white, size: 20),
                      SizedBox(width: 8),
                      Text(language.getText('–ó–∞–ø–∏—Å–∏ –æ–Ω–æ–≤–ª–µ–Ω–æ', '–ó–∞–ø–∏—Å–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã')),
                    ],
                  ),
                  duration: Duration(seconds: 2),
                  backgroundColor: Colors.green,
                ),
              );
            }
          },
          child: SingleChildScrollView(
            physics: AlwaysScrollableScrollPhysics(),
            child: Column(
              children: [
                // –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
                UpdateInfoWidget(
                  margin: EdgeInsets.symmetric(horizontal: 16),
                ),
              
                // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞
                Container(
                  width: double.infinity,
                  margin: EdgeInsets.all(16),
                  padding: EdgeInsets.all(16),
                  decoration: BoxDecoration(
                    gradient: LinearGradient(
                      colors: [
                        Theme.of(context).colorScheme.primaryContainer,
                        Theme.of(context).colorScheme.primaryContainer.withValues(alpha: 0.7),
                      ],
                    ),
                    borderRadius: BorderRadius.circular(12),
                    boxShadow: [
                      BoxShadow(
                        color: Colors.black.withValues(alpha: 0.05),
                        blurRadius: 8,
                        offset: Offset(0, 2),
                      ),
                    ],
                  ),
                  child: Row(
                    children: [
                      Container(
                        width: 50,
                        height: 50,
                        decoration: BoxDecoration(
                          shape: BoxShape.circle,
                          gradient: LinearGradient(
                            colors: [
                              Theme.of(context).colorScheme.primary,
                              Theme.of(context).colorScheme.secondary,
                            ],
                          ),
                        ),
                        child: Icon(
                          Icons.person,
                          color: Colors.white,
                          size: 25,
                        ),
                      ),
                      SizedBox(width: 16),
                      Expanded(
                        child: Column(
                          crossAxisAlignment: CrossAxisAlignment.start,
                          children: [
                            Consumer2<LanguageProvider, AppStateProvider>(
                              builder: (context, language, appState, child) {
                                final master = appState.masters.firstWhere(
                                  (m) => m.id == widget.masterId,
                                  orElse: () => appState.masters.first,
                                );
                                return Text(
                                  '${language.getText('–ú–∞–π—Å—Ç—Ä–∏–Ω—è', '–ú–∞—Å—Ç–µ—Ä–∏—Ü–∞')}: ${master.getLocalizedName(language.currentLocale.languageCode)}',
                                  style: TextStyle(
                                    fontSize: 18,
                                    fontWeight: FontWeight.bold,
                                    color: Theme.of(context).colorScheme.onPrimaryContainer,
                                  ),
                                );
                              },
                            ),
                          ],
                        ),
                      ),
                      Container(
                        padding: EdgeInsets.symmetric(horizontal: 12, vertical: 6),
                        decoration: BoxDecoration(
                          color: Theme.of(context).colorScheme.primary.withValues(alpha: 0.2),
                          borderRadius: BorderRadius.circular(20),
                        ),
                        child: Consumer<LanguageProvider>(
                          builder: (context, language, child) {
                            return Text(
                              '${language.getText('–ó–∞–ø–∏—Å—ñ–≤', '–ó–∞–ø–∏—Å–µ–π')}: ${_sessions.length}',
                              style: TextStyle(
                                fontSize: 12,
                                fontWeight: FontWeight.bold,
                                color: Theme.of(context).colorScheme.primary,
                              ),
                            );
                          },
                        ),
                      ),
                    ],
                  ),
                ),
              
                // –ö–æ–Ω—Ç–µ–Ω—Ç –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —Å—Ç–∞–Ω—É
                _isLoading
                  ? Container(
                      height: 300,
                      child: Center(
                        child: CircularProgressIndicator(
                          color: Theme.of(context).colorScheme.primary,
                        ),
                      ),
                    )
                  : _sessions.isEmpty
                      ? Container(
                          height: 300,
                          child: Center(
                            child: Column(
                              mainAxisAlignment: MainAxisAlignment.center,
                              children: [
                                Icon(
                                  Icons.event_busy,
                                  size: 64,
                                  color: Theme.of(context).colorScheme.outline,
                                ),
                                SizedBox(height: 16),
                                Consumer<LanguageProvider>(
                                  builder: (context, language, child) {
                                    return Text(
                                      language.getText('–ó–∞–ø–∏—Å—ñ–≤ –Ω–∞ —Ü–µ–π –¥–µ–Ω—å –Ω–µ–º–∞—î', '–ó–∞–ø–∏—Å–µ–π –Ω–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å –Ω–µ—Ç'),
                                      style: TextStyle(
                                        fontSize: 18,
                                        color: Theme.of(context).colorScheme.onSurface,
                                      ),
                                    );
                                  },
                                ),
                                SizedBox(height: 8),
                                Consumer<LanguageProvider>(
                                  builder: (context, language, child) {
                                    return Text(
                                      language.getText('–î–æ–¥–∞–π—Ç–µ –Ω–æ–≤–∏–π –∑–∞–ø–∏—Å –∫–Ω–æ–ø–∫–æ—é +', '–î–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –∫–Ω–æ–ø–∫–æ–π +'),
                                      style: TextStyle(
                                        fontSize: 14,
                                        color: Theme.of(context).colorScheme.outline,
                                      ),
                                    );
                                  },
                                ),
                              ],
                            ),
                          ),
                        )
                      : Column(
                          children: _sessions.map((session) {
                            return Container(
                              margin: EdgeInsets.only(left: 16, right: 16, bottom: 12),
                              decoration: BoxDecoration(
                                color: Theme.of(context).colorScheme.surface,
                                borderRadius: BorderRadius.circular(12),
                                border: Border.all(
                                  color: Theme.of(context).colorScheme.outline.withValues(alpha: 0.3),
                                ),
                                boxShadow: [
                                  BoxShadow(
                                    color: Colors.black.withValues(alpha: 0.05),
                                    blurRadius: 4,
                                    offset: Offset(0, 2),
                                  ),
                                ],
                              ),
                              child: GestureDetector(
                                onTap: () => _editSession(session),
                                child: Stack(
                                  children: [
                                    // –û—Å–Ω–æ–≤–Ω–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç –∫–∞—Ä—Ç–∫–∏
                                    Padding(
                                      padding: EdgeInsets.all(16),
                                      child: Row(
                                        children: [
                                          SizedBox(width: 16),
                                          // –û—Å–Ω–æ–≤–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è
                                          Expanded(
                                            child: Column(
                                              crossAxisAlignment: CrossAxisAlignment.start,
                                              children: [
                                                // –Ü–º'—è –∫–ª—ñ—î–Ω—Ç–∞ –∑ –±–µ–π–¥–∂–∏–∫–æ–º –ø–æ—Å—Ç—ñ–π–Ω–æ—ó –∫–ª—ñ—î–Ω—Ç–∫–∏
                                                Row(
                                                  children: [
                                                    Expanded(
                                                      child: Text(
                                                        session.clientName,
                                                        style: TextStyle(
                                                          fontWeight: FontWeight.bold,
                                                          fontSize: 16,
                                                        ),
                                                      ),
                                                    ),
                                                    if (session.isRegularClient) ...[
                                                      SizedBox(width: 8),
                                                      Container(
                                                        padding: EdgeInsets.symmetric(
                                                          horizontal: 8,
                                                          vertical: 4,
                                                        ),
                                                        decoration: BoxDecoration(
                                                          gradient: LinearGradient(
                                                            colors: [
                                                              Color(0xFFFFD700), // –ó–æ–ª–æ—Ç–∏–π
                                                              Color(0xFFFFA500), // –ü–æ–º–∞—Ä–∞–Ω—á–µ–≤–∏–π
                                                            ],
                                                          ),
                                                          borderRadius: BorderRadius.circular(12),
                                                          boxShadow: [
                                                            BoxShadow(
                                                              color: Color(0xFFFFD700).withValues(alpha: 0.4),
                                                              blurRadius: 6,
                                                              offset: Offset(0, 2),
                                                            ),
                                                          ],
                                                        ),
                                                        child: Row(
                                                          mainAxisSize: MainAxisSize.min,
                                                          children: [
                                                            Icon(
                                                              Icons.diamond,
                                                              color: Colors.white,
                                                              size: 14,
                                                            ),
                                                            SizedBox(width: 4),
                                                            Text(
                                                              'VIP',
                                                              style: TextStyle(
                                                                color: Colors.white,
                                                                fontSize: 11,
                                                                fontWeight: FontWeight.bold,
                                                                shadows: [
                                                                  Shadow(
                                                                    color: Colors.black.withValues(alpha: 0.3),
                                                                    offset: Offset(0, 1),
                                                                    blurRadius: 2,
                                                                  ),
                                                                ],
                                                              ),
                                                            ),
                                                          ],
                                                        ),
                                                      ),
                                                    ],
                                                  ],
                                                ),
                                                
                                                // –ü—Ä–∏–º—ñ—Ç–∫–∏ –∫–ª—ñ—î–Ω—Ç–∞
                                                FutureBuilder<String?>(
                                                  future: _getClientNotes(session),
                                                  builder: (context, snapshot) {
                                                    if (snapshot.hasData && snapshot.data != null && snapshot.data!.isNotEmpty) {
                                                      return Column(
                                                        children: [
                                                          SizedBox(height: 4),
                                                          Container(
                                                            width: double.infinity,
                                                            padding: EdgeInsets.symmetric(horizontal: 8, vertical: 4),
                                                            decoration: BoxDecoration(
                                                              color: Theme.of(context).colorScheme.surfaceVariant.withValues(alpha: 0.5),
                                                              borderRadius: BorderRadius.circular(6),
                                                              border: Border.all(
                                                                color: Theme.of(context).colorScheme.outline.withValues(alpha: 0.3),
                                                              ),
                                                            ),
                                                            child: Row(
                                                              children: [
                                                                Icon(
                                                                  Icons.person_pin_outlined,
                                                                  size: 14,
                                                                  color: Theme.of(context).colorScheme.onSurfaceVariant,
                                                                ),
                                                                SizedBox(width: 6),
                                                                Expanded(
                                                                  child: Text(
                                                                    snapshot.data!,
                                                                    style: TextStyle(
                                                                      fontSize: 12,
                                                                      color: Theme.of(context).colorScheme.onSurfaceVariant,
                                                                      fontStyle: FontStyle.italic,
                                                                    ),
                                                                    maxLines: 1,
                                                                    overflow: TextOverflow.ellipsis,
                                                                  ),
                                                                ),
                                                              ],
                                                            ),
                                                          ),
                                                        ],
                                                      );
                                                    }
                                                    return SizedBox.shrink();
                                                  },
                                                ),
                                                
                                                SizedBox(height: 4),
                                                Consumer<LanguageProvider>(
                                                  builder: (context, language, child) {
                                                    return Text('${language.getText('–ß–∞—Å', '–í—Ä–µ–º—è')}: ${session.time} (${session.duration} ${language.getText('—Ö–≤', '–º–∏–Ω')})');
                                                  },
                                                ),
                                                SizedBox(height: 2),
                                                Consumer<LanguageProvider>(
                                                  builder: (context, language, child) {
                                                    return Text(
                                                      '${language.getText('–ü–æ—Å–ª—É–≥–∞', '–£—Å–ª—É–≥–∞')}: ${_getLocalizedService(session.service, language)}',
                                                      style: TextStyle(
                                                        color: Theme.of(context).colorScheme.primary,
                                                        fontWeight: FontWeight.w500,
                                                      ),
                                                    );
                                                  },
                                                ),
                                                if (session.price != null) ...[
                                                  SizedBox(height: 2),
                                                  Consumer<LanguageProvider>(
                                                    builder: (context, language, child) {
                                                      return Text(
                                                        '${language.getText('–¶—ñ–Ω–∞', '–¶–µ–Ω–∞')}: ${session.price!.toStringAsFixed(2)} ‚Ç¨',
                                                        style: TextStyle(
                                                          color: Colors.green[700],
                                                          fontWeight: FontWeight.bold,
                                                        ),
                                                      );
                                                    },
                                                  ),
                                                ],
                                                // –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –ø—Ä–∏–º—ñ—Ç–æ–∫ —è–∫—â–æ –≤–æ–Ω–∏ —î
                                                if (session.notes != null && session.notes!.isNotEmpty) ...[
                                                  SizedBox(height: 4),
                                                  Container(
                                                    padding: EdgeInsets.all(8),
                                                    decoration: BoxDecoration(
                                                      color: Theme.of(context).colorScheme.surfaceVariant.withValues(alpha: 0.5),
                                                      borderRadius: BorderRadius.circular(8),
                                                      border: Border.all(
                                                        color: Theme.of(context).colorScheme.outline.withValues(alpha: 0.3),
                                                        width: 1,
                                                      ),
                                                    ),
                                                    child: Row(
                                                      crossAxisAlignment: CrossAxisAlignment.start,
                                                      children: [
                                                        Icon(
                                                          Icons.note_alt,
                                                          color: Theme.of(context).colorScheme.primary.withValues(alpha: 0.7),
                                                          size: 16,
                                                        ),
                                                        SizedBox(width: 6),
                                                        Expanded(
                                                          child: Text(
                                                            session.notes!,
                                                            style: TextStyle(
                                                              fontSize: 13,
                                                              color: Theme.of(context).colorScheme.onSurfaceVariant,
                                                              fontStyle: FontStyle.italic,
                                                            ),
                                                            maxLines: 3,
                                                            overflow: TextOverflow.ellipsis,
                                                          ),
                                                        ),
                                                      ],
                                                    ),
                                                  ),
                                                ],
                                                
                                                // –°—Ç–∞—Ç—É—Å –∑–∞–ø–∏—Å—É –∑ –º–æ–∂–ª–∏–≤—ñ—Å—Ç—é —à–≤–∏–¥–∫–æ—ó –∑–º—ñ–Ω–∏
                                                SizedBox(height: 6),
                                                Consumer<LanguageProvider>(
                                                  builder: (context, language, child) {
                                                    return GestureDetector(
                                                      onTap: () => _showStatusDialog(session),
                                                      child: Container(
                                                        padding: EdgeInsets.symmetric(horizontal: 8, vertical: 4),
                                                        decoration: BoxDecoration(
                                                          color: _getStatusColor(session.status),
                                                          borderRadius: BorderRadius.circular(6),
                                                          border: Border.all(
                                                            color: _getStatusBorderColor(session.status),
                                                            width: 1,
                                                          ),
                                                        ),
                                                        child: Row(
                                                          mainAxisSize: MainAxisSize.min,
                                                          children: [
                                                            Icon(
                                                              _getStatusIcon(session.status),
                                                              size: 14,
                                                              color: _getStatusIconColor(session.status),
                                                            ),
                                                            SizedBox(width: 4),
                                                            Text(
                                                              _getStatusText(session.status, language),
                                                              style: TextStyle(
                                                                fontSize: 12,
                                                                fontWeight: FontWeight.w500,
                                                                color: _getStatusTextColor(session.status),
                                                              ),
                                                            ),
                                                            SizedBox(width: 4),
                                                            Icon(
                                                              Icons.edit,
                                                              size: 12,
                                                              color: _getStatusIconColor(session.status),
                                                            ),
                                                          ],
                                                        ),
                                                      ),
                                                    );
                                                  },
                                                ),
                                              ],
                                            ),
                                          ),
                                          SizedBox(width: 108), // –ü—Ä–æ—Å—Ç—ñ—Ä –¥–ª—è –∫–Ω–æ–ø–æ–∫ —Å–ø—Ä–∞–≤–∞
                                        ],
                                      ),
                                    ),
                                    
                                    // –ö–Ω–æ–ø–∫–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—É –∑–ª—ñ–≤–∞ –∑–≤–µ—Ä—Ö—É
                                    if (session.phone != null && session.phone!.isNotEmpty)
                                      Positioned(
                                        top: 8,
                                        right: 56, // –ó–ª—ñ–≤–∞ –≤—ñ–¥ WhatsApp
                                        child: IconButton(
                                          onPressed: () => _makePhoneCall(session.phone),
                                          icon: Icon(
                                            Icons.phone,
                                            color: Colors.blue[600],
                                            size: 40,
                                          ),
                                          tooltip: Provider.of<LanguageProvider>(context, listen: false).getText('–ü–æ–¥–∑–≤–æ–Ω–∏—Ç–∏', '–ü–æ–∑–≤–æ–Ω–∏—Ç—å'),
                                          padding: EdgeInsets.all(4),
                                          constraints: BoxConstraints(
                                            minWidth: 32,
                                            minHeight: 32,
                                          ),
                                        ),
                                      ),
                                    
                                    // WhatsApp –∫–Ω–æ–ø–∫–∞ —Å–ø—Ä–∞–≤–∞ –∑–≤–µ—Ä—Ö—É
                                    if (session.phone != null && session.phone!.isNotEmpty)
                                      Positioned(
                                        top: 8,
                                        right: 8,
                                        child: IconButton(
                                          onPressed: () => _openWhatsApp(session.phone),
                                          icon: FaIcon(
                                            FontAwesomeIcons.whatsapp,
                                            color: Color(0xFF25D366), // –û—Ñ—ñ—Ü—ñ–π–Ω–∏–π –∫–æ–ª—ñ—Ä WhatsApp
                                            size: 40,
                                          ),
                                          tooltip: Provider.of<LanguageProvider>(context, listen: false).getText('–ù–∞–ø–∏—Å–∞—Ç–∏ –≤ WhatsApp', '–ù–∞–ø–∏—Å–∞—Ç—å –≤ WhatsApp'),
                                          padding: EdgeInsets.all(4),
                                          constraints: BoxConstraints(
                                            minWidth: 32,
                                            minHeight: 32,
                                          ),
                                        ),
                                      ),
                                    
                                    // –ö–Ω–æ–ø–∫–∞ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —Å–ø—Ä–∞–≤–∞ –∑–Ω–∏–∑—É
                                    Positioned(
                                      bottom: 8,
                                      right: 8,
                                      child: IconButton(
                                        onPressed: () => _editSession(session),
                                        icon: Icon(
                                          Icons.edit,
                                          color: Theme.of(context).colorScheme.primary,
                                          size: 30,
                                        ),
                                        tooltip: Provider.of<LanguageProvider>(context, listen: false).getText('–†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –∑–∞–ø–∏—Å', '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø–∏—Å—å'),
                                        padding: EdgeInsets.all(4),
                                        constraints: BoxConstraints(
                                          minWidth: 32,
                                          minHeight: 32,
                                        ),
                                      ),
                                    ),
                                  ],
                                ),
                              ),
                            );
                          }).toList(),
                        ),
                
                // –î–æ–¥–∞—î–º–æ —Ç—Ä–æ—Ö–∏ –≤—ñ–¥—Å—Ç—É–ø—É –∑–Ω–∏–∑—É
                SizedBox(height: 80), // –ü—Ä–æ—Å—Ç—ñ—Ä –¥–ª—è floating action button
              ],
            ),
          ),
        ),
      ),

      // –ö–Ω–æ–ø–∫–∞ –ø–ª—é—Å –°–ü–†–ê–í–ê –ó–ù–ò–ó–£
      floatingActionButton: FloatingActionButton(
        onPressed: () async {
          // –ü–µ—Ä–µ—Ö—ñ–¥ –¥–æ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –∑–∞–ø–∏—Å—É –∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
          final result = await Navigator.push(
            context,
            MaterialPageRoute(
              builder: (context) => SessionAddPage(
                masterName: widget.masterName,
                masterId: widget.masterId,
                selectedDate: widget.selectedDate,
              ),
            ),
          );
          
          // –û–Ω–æ–≤–ª—é—î–º–æ —Å–ø–∏—Å–æ–∫ –ø—ñ—Å–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è
          if (result == true) {
            // –Ü–Ω–≤–∞–ª—ñ–¥—É—î–º–æ –∫–µ—à –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–º—É –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ñ
            final appState = Provider.of<AppStateProvider>(context, listen: false);
            appState.invalidateCache();
            
            _loadSessions();
          }
        },
        backgroundColor: Theme.of(context).colorScheme.primary,
        foregroundColor: Theme.of(context).colorScheme.onPrimary,
        elevation: 6,
        child: Icon(
          Icons.add,
          size: 28,
        ),
      ),
      floatingActionButtonLocation: FloatingActionButtonLocation.endFloat,
      ),
    );
  }
  
  // –î–æ–ø–æ–º—ñ–∂–Ω—ñ –º–µ—Ç–æ–¥–∏ –¥–ª—è —Å—Ç–∞—Ç—É—Å—É
  Color _getStatusColor(String status) {
    switch (status) {
      case "—É—Å–ø—ñ—à–Ω–æ":
        return Colors.green.shade50;
      case "–ø—Ä–æ–ø—É—â–µ–Ω–æ":
        return Colors.red.shade50;
      case "–≤ –æ—á—ñ–∫—É–≤–∞–Ω–Ω—ñ":
      default:
        return Colors.orange.shade50;
    }
  }
  
  Color _getStatusBorderColor(String status) {
    switch (status) {
      case "—É—Å–ø—ñ—à–Ω–æ":
        return Colors.green.shade200;
      case "–ø—Ä–æ–ø—É—â–µ–Ω–æ":
        return Colors.red.shade200;
      case "–≤ –æ—á—ñ–∫—É–≤–∞–Ω–Ω—ñ":
      default:
        return Colors.orange.shade200;
    }
  }
  
  IconData _getStatusIcon(String status) {
    switch (status) {
      case "—É—Å–ø—ñ—à–Ω–æ":
        return Icons.check_circle_outline;
      case "–ø—Ä–æ–ø—É—â–µ–Ω–æ":
        return Icons.cancel_outlined;
      case "–≤ –æ—á—ñ–∫—É–≤–∞–Ω–Ω—ñ":
      default:
        return Icons.schedule;
    }
  }
  
  Color _getStatusIconColor(String status) {
    switch (status) {
      case "—É—Å–ø—ñ—à–Ω–æ":
        return Colors.green.shade600;
      case "–ø—Ä–æ–ø—É—â–µ–Ω–æ":
        return Colors.red.shade600;
      case "–≤ –æ—á—ñ–∫—É–≤–∞–Ω–Ω—ñ":
      default:
        return Colors.orange.shade600;
    }
  }
  
  String _getStatusText(String status, LanguageProvider language) {
    switch (status) {
      case "—É—Å–ø—ñ—à–Ω–æ":
        return language.getText("–£—Å–ø—ñ—à–Ω–æ", "–£—Å–ø–µ—à–Ω–æ");
      case "–ø—Ä–æ–ø—É—â–µ–Ω–æ":
        return language.getText("–ü—Ä–æ–ø—É—â–µ–Ω–æ", "–ü—Ä–æ–ø—É—â–µ–Ω–æ");
      case "–≤ –æ—á—ñ–∫—É–≤–∞–Ω–Ω—ñ":
      default:
        return language.getText("–í –æ—á—ñ–∫—É–≤–∞–Ω–Ω—ñ", "–í –æ–∂–∏–¥–∞–Ω–∏–∏");
    }
  }
  
  Color _getStatusTextColor(String status) {
    switch (status) {
      case "—É—Å–ø—ñ—à–Ω–æ":
        return Colors.green.shade700;
      case "–ø—Ä–æ–ø—É—â–µ–Ω–æ":  
        return Colors.red.shade700;
      case "–≤ –æ—á—ñ–∫—É–≤–∞–Ω–Ω—ñ":
      default:
        return Colors.orange.shade700;
    }
  }
  
  // –î—ñ–∞–ª–æ–≥ –∑–º—ñ–Ω–∏ —Å—Ç–∞—Ç—É—Å—É
  void _showStatusDialog(Session session) {
    showDialog(
      context: context,
      builder: (context) => Consumer<LanguageProvider>(
        builder: (context, language, child) {
          return AlertDialog(
            shape: RoundedRectangleBorder(
              borderRadius: BorderRadius.circular(16),
            ),
            title: Row(
              children: [
                Icon(
                  Icons.assignment_outlined,
                  color: Theme.of(context).colorScheme.primary,
                ),
                SizedBox(width: 8),
                Text(
                  language.getText('–ó–º—ñ–Ω–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å –∑–∞–ø–∏—Å—É', '–ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–ø–∏—Å–∏'),
                  style: TextStyle(fontSize: 18),
                ),
              ],
            ),
        content: Column(
          mainAxisSize: MainAxisSize.min,
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Container(
              padding: EdgeInsets.all(12),
              decoration: BoxDecoration(
                color: Theme.of(context).colorScheme.surfaceVariant.withOpacity(0.3),
                borderRadius: BorderRadius.circular(8),
              ),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Text(
                    '${language.getText('–ö–ª—ñ—î–Ω—Ç', '–ö–ª–∏–µ–Ω—Ç')}: ${session.clientName}',
                    style: TextStyle(fontWeight: FontWeight.w500),
                  ),
                  SizedBox(height: 4),
                  Text('${language.getText('–ß–∞—Å', '–í—Ä–µ–º—è')}: ${session.time}'),
                  Text('${language.getText('–ü–æ—Å–ª—É–≥–∞', '–£—Å–ª—É–≥–∞')}: ${_getLocalizedService(session.service, language)}'),
                ],
              ),
            ),
            SizedBox(height: 20),
            Text(
              language.getText('–í–∏–±–µ—Ä—ñ—Ç—å –Ω–æ–≤–∏–π —Å—Ç–∞—Ç—É—Å:', '–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å:'),
              style: TextStyle(
                fontWeight: FontWeight.w500,
                fontSize: 16,
              ),
            ),
            SizedBox(height: 12),
            
            // –ö–Ω–æ–ø–∫–∏ —Å—Ç–∞—Ç—É—Å—ñ–≤ –∑ –∫–æ–ª—å–æ—Ä–∞–º–∏ —Ç–∞ —ñ–∫–æ–Ω–∫–∞–º–∏
            Column(
              children: [
                // –í –æ—á—ñ–∫—É–≤–∞–Ω–Ω—ñ
                Container(
                  width: double.infinity,
                  margin: EdgeInsets.only(bottom: 8),
                  child: ElevatedButton.icon(
                    icon: Icon(Icons.schedule, size: 20),
                    label: Text(language.getText('–í –æ—á—ñ–∫—É–≤–∞–Ω–Ω—ñ', '–í –æ–∂–∏–¥–∞–Ω–∏–∏')),
                    style: ElevatedButton.styleFrom(
                      backgroundColor: Colors.orange.shade50,
                      foregroundColor: Colors.orange.shade700,
                      elevation: 2,
                      side: BorderSide(color: Colors.orange.shade200),
                      padding: EdgeInsets.symmetric(vertical: 12, horizontal: 16),
                      shape: RoundedRectangleBorder(
                        borderRadius: BorderRadius.circular(10),
                      ),
                    ),
                    onPressed: () => _updateSessionStatus(session, "–≤ –æ—á—ñ–∫—É–≤–∞–Ω–Ω—ñ"),
                  ),
                ),
                
                // –£—Å–ø—ñ—à–Ω–æ
                Container(
                  width: double.infinity,
                  margin: EdgeInsets.only(bottom: 8),
                  child: ElevatedButton.icon(
                    icon: Icon(Icons.check_circle_outline, size: 20),
                    label: Text(language.getText('–£—Å–ø—ñ—à–Ω–æ', '–£—Å–ø–µ—à–Ω–æ')),
                    style: ElevatedButton.styleFrom(
                      backgroundColor: Colors.green.shade50,
                      foregroundColor: Colors.green.shade700,
                      elevation: 2,
                      side: BorderSide(color: Colors.green.shade200),
                      padding: EdgeInsets.symmetric(vertical: 12, horizontal: 16),
                      shape: RoundedRectangleBorder(
                        borderRadius: BorderRadius.circular(10),
                      ),
                    ),
                    onPressed: () => _updateSessionStatus(session, "—É—Å–ø—ñ—à–Ω–æ"),
                  ),
                ),
                
                // –ü—Ä–æ–ø—É—â–µ–Ω–æ
                Container(
                  width: double.infinity,
                  margin: EdgeInsets.only(bottom: 16),
                  child: ElevatedButton.icon(
                    icon: Icon(Icons.cancel_outlined, size: 20),
                    label: Text(language.getText('–ü—Ä–æ–ø—É—â–µ–Ω–æ', '–ü—Ä–æ–ø—É—â–µ–Ω–æ')),
                    style: ElevatedButton.styleFrom(
                      backgroundColor: Colors.red.shade50,
                      foregroundColor: Colors.red.shade700,
                      elevation: 2,
                      side: BorderSide(color: Colors.red.shade200),
                      padding: EdgeInsets.symmetric(vertical: 12, horizontal: 16),
                      shape: RoundedRectangleBorder(
                        borderRadius: BorderRadius.circular(10),
                      ),
                    ),
                    onPressed: () => _updateSessionStatus(session, "–ø—Ä–æ–ø—É—â–µ–Ω–æ"),
                  ),
                ),
                
                // –°–∫–∞—Å—É–≤–∞—Ç–∏
                Container(
                  width: double.infinity,
                  child: TextButton(
                    child: Text(
                      language.getText('–°–∫–∞—Å—É–≤–∞—Ç–∏', '–û—Ç–º–µ–Ω–∏—Ç—å'),
                      style: TextStyle(
                        color: Theme.of(context).colorScheme.onSurfaceVariant,
                        fontWeight: FontWeight.w500,
                      ),
                    ),
                    style: TextButton.styleFrom(
                      padding: EdgeInsets.symmetric(vertical: 12),
                      shape: RoundedRectangleBorder(
                        borderRadius: BorderRadius.circular(8),
                      ),
                    ),
                    onPressed: () => Navigator.pop(context),
                  ),
                ),
              ],
            ),
          ],
        ),
            contentPadding: EdgeInsets.fromLTRB(24, 20, 24, 0),
            actionsPadding: EdgeInsets.zero,
            actions: [], // –ü—Ä–∏–±–∏—Ä–∞—î–º–æ —Å—Ç–∞—Ä—ñ actions
          );
        },
      ),
    );
  }
  
  // –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É —Å–µ—Å—ñ—ó
  Future<void> _updateSessionStatus(Session session, String newStatus) async {
    Navigator.pop(context); // –ó–∞–∫—Ä–∏–≤–∞—î–º–æ –¥—ñ–∞–ª–æ–≥
    
    try {
      final updatedSession = Session(
        id: session.id,
        masterId: session.masterId,
        clientId: session.clientId,
        clientName: session.clientName,
        phone: session.phone,
        service: session.service,
        duration: session.duration,
        date: session.date,
        time: session.time,
        notes: session.notes,
        price: session.price,
        isRegularClient: session.isRegularClient,
        status: newStatus,
      );
      
      await _firestoreService.updateSession(session.id!, updatedSession);
      
      // –û–Ω–æ–≤–ª—é—î–º–æ UI
      setState(() {
        _loadSessions();
      });
      
      final language = Provider.of<LanguageProvider>(context, listen: false);
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text(language.getText('–°—Ç–∞—Ç—É—Å –∑–∞–ø–∏—Å—É –æ–Ω–æ–≤–ª–µ–Ω–æ', '–°—Ç–∞—Ç—É—Å –∑–∞–ø–∏—Å–∏ –æ–±–Ω–æ–≤–ª–µ–Ω')),
          backgroundColor: Colors.green,
        ),
      );
    } catch (e) {
      final language = Provider.of<LanguageProvider>(context, listen: false);
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text('${language.getText('–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É', '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞')}: $e'),
          backgroundColor: Colors.red,
        ),
      );
    }
  }
}