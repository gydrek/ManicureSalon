import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:nastya_app/models/models.dart';

class FirestoreService {
  static final FirestoreService _instance = FirestoreService._internal();
  factory FirestoreService() => _instance;
  FirestoreService._internal();

  final FirebaseFirestore _firestore = FirebaseFirestore.instance;

  // –ö–æ–ª–µ–∫—Ü—ñ—ó
  CollectionReference get _mastersCollection =>
      _firestore.collection('masters');
  CollectionReference get _clientsCollection =>
      _firestore.collection('clients');
  CollectionReference get _sessionsCollection =>
      _firestore.collection('sessions');

  // ===== –ú–ï–¢–û–î–ò –î–õ–Ø –ú–ê–ô–°–¢–†–Ü–í =====

  /// –û—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ—Ö –º–∞–π—Å—Ç—Ä—ñ–≤
  Future<List<Master>> getMasters() async {
    try {
      final QuerySnapshot snapshot = await _mastersCollection.get();
      return snapshot.docs.map((doc) {
        final data = doc.data() as Map<String, dynamic>;
        data['id'] = doc.id; // –î–æ–¥–∞—î–º–æ ID –¥–æ–∫—É–º–µ–Ω—Ç–∞
        return Master.fromFirestore(data);
      }).toList();
    } catch (e) {
      print('–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –º–∞–π—Å—Ç—Ä—ñ–≤: $e');
      return [];
    }
  }

  /// –û—Ç—Ä–∏–º–∞—Ç–∏ –º–∞–π—Å—Ç—Ä–∞ –∑–∞ ID
  Future<Master?> getMasterById(String id) async {
    try {
      final DocumentSnapshot doc = await _mastersCollection.doc(id).get();
      if (doc.exists) {
        final data = doc.data() as Map<String, dynamic>;
        data['id'] = doc.id;
        return Master.fromFirestore(data);
      }
      return null;
    } catch (e) {
      print('–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –º–∞–π—Å—Ç—Ä–∞: $e');
      return null;
    }
  }

  /// –î–æ–¥–∞—Ç–∏ –º–∞–π—Å—Ç—Ä–∞
  Future<String?> addMaster(Master master) async {
    try {
      final DocumentReference docRef = await _mastersCollection.add(
        master.toFirestore(),
      );
      return docRef.id;
    } catch (e) {
      print('–ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –º–∞–π—Å—Ç—Ä–∞: $e');
      return null;
    }
  }

  /// –û–Ω–æ–≤–∏—Ç–∏ –º–∞–π—Å—Ç—Ä–∞
  Future<bool> updateMaster(String masterId, Master master) async {
    try {
      await _mastersCollection.doc(masterId).update(master.toFirestore());
      print('–ú–∞–π—Å—Ç—Ä–∞ –æ–Ω–æ–≤–ª–µ–Ω–æ: ${master.name}');
      return true;
    } catch (e) {
      print('–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –º–∞–π—Å—Ç—Ä–∞: $e');
      return false;
    }
  }

  /// –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –º–∞–π—Å—Ç—Ä—ñ–≤ –∑ –ë–î (–±–µ–∑ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ –¥–æ–¥–∞–≤–∞–Ω–Ω—è)
  Future<void> initializeMasters() async {
    try {
      print('–ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –º–∞–π—Å—Ç—Ä—ñ–≤ –∑ –ë–î...');
      final masters = await getMasters();
      print('–ó–Ω–∞–π–¥–µ–Ω–æ –º–∞–π—Å—Ç—Ä—ñ–≤ —É –ë–î: ${masters.length}');

      if (masters.isEmpty) {
        print(
          '‚ö†Ô∏è –ú–∞–π—Å—Ç—Ä–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω—ñ –≤ –ë–î. –î–æ–¥–∞–π—Ç–µ —ó—Ö –≤—Ä—É—á–Ω—É —á–µ—Ä–µ–∑ Firebase Console –∞–±–æ –∞–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—å.',
        );
      } else {
        print('‚úÖ –ú–∞–π—Å—Ç—Ä–∏ —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—ñ –∑ –ë–î:');
        for (final master in masters) {
          print('  - ${master.name} (${master.nameRu}) - ${master.status}');
        }

        // –û–Ω–æ–≤–ª—é—î–º–æ –ª–æ–∫–∞–ª—ñ–∑–∞—Ü—ñ—é –¥–ª—è —ñ—Å–Ω—É—é—á–∏—Ö –º–∞–π—Å—Ç—Ä—ñ–≤ —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
        await _updateExistingMastersWithLocalization(masters);
      }
    } catch (e) {
      print('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –º–∞–π—Å—Ç—Ä—ñ–≤ –∑ –ë–î: $e');
    }
  }

  /// –û–Ω–æ–≤–∏—Ç–∏ —ñ—Å–Ω—É—é—á–∏—Ö –º–∞–π—Å—Ç—Ä—ñ–≤ –∑ –ª–æ–∫–∞–ª—ñ–∑–∞—Ü—ñ—î—é
  Future<void> _updateExistingMastersWithLocalization(
    List<Master> masters,
  ) async {
    final masterTranslations = {
      '–ù–∞—Å—Ç—è': '–ù–∞—Å—Ç—è',
      '–ù—ñ–∫–∞': '–ù–∏–∫–∞',
      '–û–ª–µ–Ω–∞': '–ï–ª–µ–Ω–∞',
    };

    for (final master in masters) {
      bool needsUpdate = false;
      Master updatedMaster = master;

      // –Ø–∫—â–æ –Ω–µ–º–∞—î —Ä–æ—Å—ñ–π—Å—å–∫–æ–≥–æ —ñ–º–µ–Ω—ñ, –¥–æ–¥–∞—î–º–æ –π–æ–≥–æ
      if (master.nameRu == null || master.nameRu!.isEmpty) {
        final ruName = masterTranslations[master.name] ?? master.name;
        updatedMaster = Master(
          id: master.id,
          name: master.name,
          nameRu: ruName,
          status: master.status,
        );
        needsUpdate = true;
      }

      if (needsUpdate && master.id != null) {
        await updateMaster(master.id!, updatedMaster);
        print('–î–æ–¥–∞–Ω–æ –ª–æ–∫–∞–ª—ñ–∑–∞—Ü—ñ—é –¥–ª—è –º–∞–π—Å—Ç—Ä–∞: ${master.name}');
      }
    }
  }

  /// –û—á–∏—Å—Ç–∏—Ç–∏ –≤—Å—ñ—Ö –º–∞–π—Å—Ç—Ä—ñ–≤ (–¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è)
  Future<void> clearAllMasters() async {
    try {
      final QuerySnapshot snapshot = await _mastersCollection.get();
      for (final doc in snapshot.docs) {
        await doc.reference.delete();
      }
      print('–í—Å—ñ –º–∞–π—Å—Ç—Ä–∏–Ω—ñ –≤–∏–¥–∞–ª–µ–Ω—ñ');
    } catch (e) {
      print('–ü–æ–º–∏–ª–∫–∞ –æ—á–∏—â–µ–Ω–Ω—è –º–∞–π—Å—Ç—Ä—ñ–≤: $e');
    }
  }

  // ===== –ú–ï–¢–û–î–ò –î–õ–Ø –ö–õ–Ü–Ñ–ù–¢–Ü–í =====

  /// –û—Ç—Ä–∏–º–∞—Ç–∏ –∞–±–æ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –∫–ª—ñ—î–Ω—Ç–∞ –∑–∞ —ñ–º–µ–Ω–µ–º —Ç–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º
  Future<String?> getOrCreateClient(String name, String phone) async {
    try {
      print('üîç –®—É–∫–∞—î–º–æ –∫–ª—ñ—î–Ω—Ç–∞: name="$name", phone="$phone"');
      
      // –°–ø–æ—á–∞—Ç–∫—É —à—É–∫–∞—î–º–æ –∑–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º (–±—ñ–ª—å—à –Ω–∞–¥—ñ–π–Ω–æ)
      QuerySnapshot existingClients = await _clientsCollection
          .where('phone', isEqualTo: phone)
          .get();

      // –Ø–∫—â–æ –∑–Ω–∞–π—à–ª–∏ –∑–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º, –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –ø–æ—Ç—Ä—ñ–±–Ω–æ –æ–Ω–æ–≤–∏—Ç–∏ —ñ–º'—è
      if (existingClients.docs.isNotEmpty) {
        final clientDoc = existingClients.docs.first;
        final clientData = clientDoc.data() as Map<String, dynamic>;
        final existingName = clientData['name'] as String;
        
        print('üì± –ó–Ω–∞–π—à–ª–∏ –∫–ª—ñ—î–Ω—Ç–∞ –∑–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º: existingName="$existingName", newName="$name"');
        
        // –Ø–∫—â–æ —ñ–º'—è –∑–º—ñ–Ω–∏–ª–æ—Å—å, –æ–Ω–æ–≤–ª—é—î–º–æ –π–æ–≥–æ
        if (existingName != name) {
          print('üîÑ –û–Ω–æ–≤–ª—é—î–º–æ —ñ–º\'—è –∫–ª—ñ—î–Ω—Ç–∞: "$existingName" -> "$name"');
          await _clientsCollection.doc(clientDoc.id).update({'name': name});
        }
        
        return clientDoc.id;
      }

      // –Ø–∫—â–æ –Ω–µ –∑–Ω–∞–π—à–ª–∏ –∑–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º, —à—É–∫–∞—î–º–æ –∑–∞ —ñ–º'—è–º —Ç–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º
      existingClients = await _clientsCollection
          .where('name', isEqualTo: name)
          .where('phone', isEqualTo: phone)
          .get();

      if (existingClients.docs.isNotEmpty) {
        print('üë§ –ó–Ω–∞–π—à–ª–∏ –∫–ª—ñ—î–Ω—Ç–∞ –∑–∞ —ñ–º\'—è–º —Ç–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º');
        return existingClients.docs.first.id;
      }

      // –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–æ–≥–æ –∫–ª—ñ—î–Ω—Ç–∞
      print('‚ûï –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–æ–≥–æ –∫–ª—ñ—î–Ω—Ç–∞');
      final client = Client(name: name, phone: phone);
      final DocumentReference docRef = await _clientsCollection.add(
        client.toFirestore(),
      );
      print('‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ –Ω–æ–≤–æ–≥–æ –∫–ª—ñ—î–Ω—Ç–∞ –∑ ID: ${docRef.id}');
      return docRef.id;
    } catch (e) {
      print('‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç–∞: $e');
      return null;
    }
  }

  /// –û—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ—Ö –∫–ª—ñ—î–Ω—Ç—ñ–≤
  Future<List<Client>> getClients() async {
    try {
      final QuerySnapshot snapshot = await _clientsCollection
          .orderBy('name')
          .get();
      return snapshot.docs.map((doc) {
        final data = doc.data() as Map<String, dynamic>;
        data['id'] = doc.id;
        return Client.fromFirestore(data);
      }).toList();
    } catch (e) {
      print('–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç—ñ–≤: $e');
      return [];
    }
  }

  /// –û—Ç—Ä–∏–º–∞—Ç–∏ —É–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö –∫–ª—ñ—î–Ω—Ç–æ–∫ –∑ VIP —Å—Ç–∞—Ç—É—Å–æ–º –∑ –æ–±–æ—Ö –∫–æ–ª–µ–∫—Ü—ñ–π (sessions + clients)
  Future<List<Map<String, dynamic>>> getUniqueClientsWithVipStatus() async {
    try {
      // –ú–∞–ø–∞ –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è —É–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö –∫–ª—ñ—î–Ω—Ç–æ–∫ –∑ —ó—Ö VIP —Å—Ç–∞—Ç—É—Å–æ–º
      final Map<String, Map<String, dynamic>> uniqueClients = {};

      // –°–ø–æ—á–∞—Ç–∫—É –∑–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∫–ª—ñ—î–Ω—Ç–æ–∫ –∑ —Å–µ—Å—ñ–π
      final QuerySnapshot sessionsSnapshot = await _sessionsCollection.get();

      for (final doc in sessionsSnapshot.docs) {
        final data = doc.data() as Map<String, dynamic>;
        final clientName = data['clientName'] as String?;
        final phone = data['phone'] as String?;
        final isRegularClient = data['isRegularClient'] as bool? ?? false;

        if (clientName != null && clientName.isNotEmpty) {
          final key = clientName.toLowerCase().trim();

          // –Ø–∫—â–æ –∫–ª—ñ—î–Ω—Ç–∫–∞ –≤–∂–µ —î, –æ–Ω–æ–≤–ª—é—î–º–æ VIP —Å—Ç–∞—Ç—É—Å (true –º–∞—î –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç)
          if (uniqueClients.containsKey(key)) {
            uniqueClients[key]!['isRegularClient'] =
                uniqueClients[key]!['isRegularClient'] || isRegularClient;
            // –û–Ω–æ–≤–ª—é—î–º–æ —Ç–µ–ª–µ—Ñ–æ–Ω —è–∫—â–æ –≤—ñ–Ω –ø–æ—Ä–æ–∂–Ω—ñ–π
            if ((uniqueClients[key]!['phone'] as String).isEmpty &&
                (phone ?? '').isNotEmpty) {
              uniqueClients[key]!['phone'] = phone!;
            }
          } else {
            uniqueClients[key] = {
              'name': clientName,
              'phone': phone ?? '',
              'isRegularClient': isRegularClient,
              'notes': null, // –ö–ª—ñ—î–Ω—Ç–∏ –∑ —Å–µ—Å—ñ–π —Å–ø–æ—á–∞—Ç–∫—É –±–µ–∑ –ø—Ä–∏–º—ñ—Ç–æ–∫
            };
          }
        }
      }

      // –ü–æ—Ç—ñ–º –∑–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∫–ª—ñ—î–Ω—Ç–æ–∫ –∑ –æ–∫—Ä–µ–º–æ—ó –∫–æ–ª–µ–∫—Ü—ñ—ó clients
      try {
        final QuerySnapshot clientsSnapshot = await _clientsCollection.get();

        for (final doc in clientsSnapshot.docs) {
          final data = doc.data() as Map<String, dynamic>;
          final clientName = data['name'] as String?;
          final phone = data['phone'] as String?;
          final isRegularClient = data['isRegularClient'] as bool? ?? false;
          final notes = data['notes'] as String?; // –î–æ–¥–∞—î–º–æ –ø—Ä–∏–º—ñ—Ç–∫–∏

          if (clientName != null && clientName.isNotEmpty) {
            // –°—Ç–≤–æ—Ä—é—î–º–æ —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π –∫–ª—é—á –Ω–∞ –æ—Å–Ω–æ–≤—ñ —ñ–º–µ–Ω—ñ —Ç–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—É
            final name = clientName.trim();
            final normalizedPhone = (phone ?? '').trim();
            final uniqueKey =
                '${name.toLowerCase()}_${normalizedPhone.toLowerCase()}';

            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —î –∫–ª—ñ—î–Ω—Ç –∑ —Ç–∞–∫–∏–º —ñ–º–µ–Ω–µ–º —Ç–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º –≤ —Å–µ—Å—ñ—è—Ö
            bool foundInSessions = false;
            String? matchingSessionKey;

            for (String sessionKey in uniqueClients.keys) {
              final sessionClient = uniqueClients[sessionKey]!;
              final sessionName = (sessionClient['name'] as String)
                  .toLowerCase();
              final sessionPhone = (sessionClient['phone'] as String)
                  .toLowerCase();

              // –ü–æ—Ä—ñ–≤–Ω—é—î–º–æ –∑–∞ —ñ–º–µ–Ω–µ–º —Ç–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º
              if (sessionName == name.toLowerCase() &&
                  (sessionPhone == normalizedPhone.toLowerCase() ||
                      (sessionPhone.isEmpty && normalizedPhone.isEmpty))) {
                foundInSessions = true;
                matchingSessionKey = sessionKey;
                break;
              }
            }

            if (foundInSessions && matchingSessionKey != null) {
              // –û–Ω–æ–≤–ª—é—î–º–æ —ñ—Å–Ω—É—é—á–æ–≥–æ –∫–ª—ñ—î–Ω—Ç–∞ –∑ —Å–µ—Å—ñ–π
              bool existingVipStatus =
                  uniqueClients[matchingSessionKey]!['isRegularClient'] as bool;
              uniqueClients[matchingSessionKey]!['isRegularClient'] =
                  existingVipStatus || isRegularClient;
              // –û–Ω–æ–≤–ª—é—î–º–æ —Ç–µ–ª–µ—Ñ–æ–Ω —è–∫—â–æ –≤—ñ–Ω –ø–æ—Ä–æ–∂–Ω—ñ–π
              if ((uniqueClients[matchingSessionKey]!['phone'] as String)
                      .isEmpty &&
                  normalizedPhone.isNotEmpty) {
                uniqueClients[matchingSessionKey]!['phone'] = normalizedPhone;
              }
              // –î–æ–¥–∞—î–º–æ –∞–±–æ –æ–Ω–æ–≤–ª—é—î–º–æ –ø—Ä–∏–º—ñ—Ç–∫–∏ –∑ –∫–æ–ª–µ–∫—Ü—ñ—ó clients
              uniqueClients[matchingSessionKey]!['notes'] = notes;
            } else {
              // –î–æ–¥–∞—î–º–æ –Ω–æ–≤–æ–≥–æ –∫–ª—ñ—î–Ω—Ç–∞ (–±–µ–∑ —Å–µ—Å—ñ–π) –∑ —É–Ω—ñ–∫–∞–ª—å–Ω–∏–º –∫–ª—é—á–µ–º
              uniqueClients[uniqueKey] = {
                'name': name,
                'phone': normalizedPhone,
                'isRegularClient': isRegularClient,
                'notes': notes, // –î–æ–¥–∞—î–º–æ –ø—Ä–∏–º—ñ—Ç–∫–∏
              };
            }
          }
        }
      } catch (e) {
        print('–ü–æ–º–∏–ª–∫–∞ –¥–æ—Å—Ç—É–ø—É –¥–æ –∫–æ–ª–µ–∫—Ü—ñ—ó clients: $e');
        // –ü—Ä–æ–¥–æ–≤–∂—É—î–º–æ –∑ –∫–ª—ñ—î–Ω—Ç–∞–º–∏ –∑ —Å–µ—Å—ñ–π
      }

      // –°–æ—Ä—Ç—É—î–º–æ: —Å–ø–æ—á–∞—Ç–∫—É VIP, –ø–æ—Ç—ñ–º –ø–æ –∞–ª—Ñ–∞–≤—ñ—Ç—É
      final sortedClients = uniqueClients.values.toList();
      sortedClients.sort((a, b) {
        // –°–ø–æ—á–∞—Ç–∫—É —Å–æ—Ä—Ç—É—î–º–æ –ø–æ VIP —Å—Ç–∞—Ç—É—Å—É (VIP - –ø–µ—Ä—à—ñ)
        final aVip = a['isRegularClient'] as bool;
        final bVip = b['isRegularClient'] as bool;

        if (aVip && !bVip) return -1;
        if (!aVip && bVip) return 1;

        // –ü–æ—Ç—ñ–º –ø–æ –∞–ª—Ñ–∞–≤—ñ—Ç—É
        return (a['name'] as String).toLowerCase().compareTo(
          (b['name'] as String).toLowerCase(),
        );
      });

      return sortedClients;
    } catch (e) {
      print('–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —É–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö –∫–ª—ñ—î–Ω—Ç–æ–∫: $e');
      return [];
    }
  }

  /// –û—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ—Ö –∫–ª—ñ—î–Ω—Ç–æ–∫ –∑ –æ–±–æ—Ö –∫–æ–ª–µ–∫—Ü—ñ–π (sessions + clients) –∑ VIP —Å—Ç–∞—Ç—É—Å–æ–º
  Future<List<Map<String, dynamic>>> getAllClientsWithVipStatus() async {
    try {
      print('üîç –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∫–ª—ñ—î–Ω—Ç—ñ–≤ –∑ VIP —Å—Ç–∞—Ç—É—Å–æ–º (–æ–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–æ)');

      // –ú–∞–ø–∞ –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è —É–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö –∫–ª—ñ—î–Ω—Ç–æ–∫ –∑ —ó—Ö VIP —Å—Ç–∞—Ç—É—Å–æ–º
      final Map<String, Map<String, dynamic>> uniqueClients = {};

      // –û–ü–¢–ò–ú–Ü–ó–û–í–ê–ù–û: –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Ç—ñ–ª—å–∫–∏ –æ—Å—Ç–∞–Ω–Ω—ñ —Å–µ—Å—ñ—ó –¥–ª—è –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è VIP —Å—Ç–∞—Ç—É—Å—É
      final QuerySnapshot sessionsSnapshot = await _sessionsCollection
          .orderBy('date', descending: true)
          .limit(1000) // –û–±–º–µ–∂—É—î–º–æ - –¥–ª—è VIP —Å—Ç–∞—Ç—É—Å—É –¥–æ—Å—Ç–∞—Ç–Ω—å–æ –æ—Å—Ç–∞–Ω–Ω—ñ—Ö —Å–µ—Å—ñ–π
          .get();
      print(
        '–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ –æ—Å—Ç–∞–Ω–Ω—ñ—Ö —Å–µ—Å—ñ–π –¥–ª—è VIP –∞–Ω–∞–ª—ñ–∑—É: ${sessionsSnapshot.docs.length}',
      );

      for (final doc in sessionsSnapshot.docs) {
        final data = doc.data() as Map<String, dynamic>;
        final clientName = data['clientName'] as String?;
        final phone = data['phone'] as String?;
        final isRegularClient = data['isRegularClient'] as bool? ?? false;

        if (clientName != null && clientName.isNotEmpty) {
          final key = clientName.toLowerCase().trim();

          // –Ø–∫—â–æ –∫–ª—ñ—î–Ω—Ç–∫–∞ –≤–∂–µ —î, –æ–Ω–æ–≤–ª—é—î–º–æ VIP —Å—Ç–∞—Ç—É—Å (true –º–∞—î –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç)
          if (uniqueClients.containsKey(key)) {
            uniqueClients[key]!['isRegularClient'] =
                uniqueClients[key]!['isRegularClient'] || isRegularClient;
            // –û–Ω–æ–≤–ª—é—î–º–æ —Ç–µ–ª–µ—Ñ–æ–Ω —è–∫—â–æ –≤—ñ–Ω –ø–æ—Ä–æ–∂–Ω—ñ–π
            if ((uniqueClients[key]!['phone'] as String).isEmpty &&
                (phone ?? '').isNotEmpty) {
              uniqueClients[key]!['phone'] = phone!;
            }
          } else {
            uniqueClients[key] = {
              'name': clientName,
              'phone': phone ?? '',
              'isRegularClient': isRegularClient,
              'hasSession': true,
              'notes': null, // –ö–ª—ñ—î–Ω—Ç–∏ –∑ —Å–µ—Å—ñ–π —Å–ø–æ—á–∞—Ç–∫—É –±–µ–∑ –ø—Ä–∏–º—ñ—Ç–æ–∫
            };
          }
        }
      }

      print('–ö–ª—ñ—î–Ω—Ç—ñ–≤ –∑ —Å–µ—Å—ñ–π: ${uniqueClients.length}');

      // –û–ü–¢–ò–ú–Ü–ó–û–í–ê–ù–û: –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∫–ª—ñ—î–Ω—Ç—ñ–≤ –∑ –æ–±–º–µ–∂–µ–Ω–Ω—è–º
      try {
        final QuerySnapshot clientsSnapshot = await _clientsCollection
            .orderBy('name')
            .limit(200) // –û–±–º–µ–∂—É—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫–ª—ñ—î–Ω—Ç—ñ–≤
            .get();
        print('–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ –∑ –∫–æ–ª–µ–∫—Ü—ñ—ó clients: ${clientsSnapshot.docs.length}');

        int clientsWithoutSessions = 0;

        for (final doc in clientsSnapshot.docs) {
          final data = doc.data() as Map<String, dynamic>;
          final clientName = data['name'] as String?;
          final phone = data['phone'] as String?;
          final isRegularClient = data['isRegularClient'] as bool? ?? false;
          final notes = data['notes'] as String?; // –î–æ–¥–∞—î–º–æ –ø—Ä–∏–º—ñ—Ç–∫–∏

          print(
            '–û–±—Ä–æ–±–ª—è—é –∫–ª—ñ—î–Ω—Ç–∞ –∑ –∫–æ–ª–µ–∫—Ü—ñ—ó clients: $clientName, phone: $phone, isVip: $isRegularClient, notes: $notes',
          );

          if (clientName != null && clientName.isNotEmpty) {
            // –°—Ç–≤–æ—Ä—é—î–º–æ —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π –∫–ª—é—á –Ω–∞ –æ—Å–Ω–æ–≤—ñ —ñ–º–µ–Ω—ñ —Ç–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—É
            final name = clientName.trim();
            final normalizedPhone = (phone ?? '').trim();
            final uniqueKey =
                '${name.toLowerCase()}_${normalizedPhone.toLowerCase()}';

            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —î –∫–ª—ñ—î–Ω—Ç –∑ —Ç–∞–∫–∏–º —ñ–º–µ–Ω–µ–º —Ç–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º –≤ —Å–µ—Å—ñ—è—Ö
            bool foundInSessions = false;
            String? matchingSessionKey;

            for (String sessionKey in uniqueClients.keys) {
              final sessionClient = uniqueClients[sessionKey]!;
              final sessionName = (sessionClient['name'] as String)
                  .toLowerCase();
              final sessionPhone = (sessionClient['phone'] as String)
                  .toLowerCase();

              // –ü–æ—Ä—ñ–≤–Ω—é—î–º–æ –∑–∞ —ñ–º–µ–Ω–µ–º —Ç–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º
              if (sessionName == name.toLowerCase() &&
                  (sessionPhone == normalizedPhone.toLowerCase() ||
                      (sessionPhone.isEmpty && normalizedPhone.isEmpty))) {
                foundInSessions = true;
                matchingSessionKey = sessionKey;
                break;
              }
            }

            if (foundInSessions && matchingSessionKey != null) {
              // –û–Ω–æ–≤–ª—é—î–º–æ —ñ—Å–Ω—É—é—á–æ–≥–æ –∫–ª—ñ—î–Ω—Ç–∞ –∑ —Å–µ—Å—ñ–π
              bool existingVipStatus =
                  uniqueClients[matchingSessionKey]!['isRegularClient'] as bool;
              uniqueClients[matchingSessionKey]!['isRegularClient'] =
                  existingVipStatus || isRegularClient;
              // –û–Ω–æ–≤–ª—é—î–º–æ —Ç–µ–ª–µ—Ñ–æ–Ω —è–∫—â–æ –≤—ñ–Ω –ø–æ—Ä–æ–∂–Ω—ñ–π
              if ((uniqueClients[matchingSessionKey]!['phone'] as String)
                      .isEmpty &&
                  normalizedPhone.isNotEmpty) {
                uniqueClients[matchingSessionKey]!['phone'] = normalizedPhone;
              }
              // –î–æ–¥–∞—î–º–æ –∞–±–æ –æ–Ω–æ–≤–ª—é—î–º–æ –ø—Ä–∏–º—ñ—Ç–∫–∏ –∑ –∫–æ–ª–µ–∫—Ü—ñ—ó clients
              uniqueClients[matchingSessionKey]!['notes'] = notes;
              print(
                '–û–Ω–æ–≤–ª–µ–Ω–æ —ñ—Å–Ω—É—é—á–æ–≥–æ –∫–ª—ñ—î–Ω—Ç–∞: $name (VIP: ${uniqueClients[matchingSessionKey]!['isRegularClient']}, Notes: $notes)',
              );
            } else {
              // –î–æ–¥–∞—î–º–æ –Ω–æ–≤–æ–≥–æ –∫–ª—ñ—î–Ω—Ç–∞ (–±–µ–∑ —Å–µ—Å—ñ–π) –∑ —É–Ω—ñ–∫–∞–ª—å–Ω–∏–º –∫–ª—é—á–µ–º
              uniqueClients[uniqueKey] = {
                'name': name,
                'phone': normalizedPhone,
                'isRegularClient': isRegularClient,
                'hasSession': false,
                'notes': notes, // –î–æ–¥–∞—î–º–æ –ø—Ä–∏–º—ñ—Ç–∫–∏
              };
              clientsWithoutSessions++;
              print(
                '–î–æ–¥–∞–Ω–æ –Ω–æ–≤–æ–≥–æ –∫–ª—ñ—î–Ω—Ç–∞ –±–µ–∑ —Å–µ—Å—ñ–π: $name (Phone: $normalizedPhone, VIP: $isRegularClient, Notes: $notes)',
              );
            }
          }
        }

        print('–í—Å—å–æ–≥–æ –∫–ª—ñ—î–Ω—Ç—ñ–≤ –±–µ–∑ —Å–µ—Å—ñ–π: $clientsWithoutSessions');
      } catch (e) {
        print('–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑ –∫–æ–ª–µ–∫—Ü—ñ—ó clients: $e');
      }

      print('–í—Å—å–æ–≥–æ —É–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö –∫–ª—ñ—î–Ω—Ç—ñ–≤: ${uniqueClients.length}');

      // –°–æ—Ä—Ç—É—î–º–æ: —Å–ø–æ—á–∞—Ç–∫—É VIP, –ø–æ—Ç—ñ–º –ø–æ –∞–ª—Ñ–∞–≤—ñ—Ç—É
      final sortedClients = uniqueClients.values.toList();
      sortedClients.sort((a, b) {
        // –°–ø–æ—á–∞—Ç–∫—É —Å–æ—Ä—Ç—É—î–º–æ –ø–æ VIP —Å—Ç–∞—Ç—É—Å—É (VIP - –ø–µ—Ä—à—ñ)
        final aVip = a['isRegularClient'] as bool;
        final bVip = b['isRegularClient'] as bool;

        if (aVip && !bVip) return -1;
        if (!aVip && bVip) return 1;

        // –ü–æ—Ç—ñ–º –ø–æ –∞–ª—Ñ–∞–≤—ñ—Ç—É
        return (a['name'] as String).toLowerCase().compareTo(
          (b['name'] as String).toLowerCase(),
        );
      });

      return sortedClients;
    } catch (e) {
      print('–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—Å—ñ—Ö –∫–ª—ñ—î–Ω—Ç–æ–∫: $e');
      return [];
    }
  }

  /// –î–æ–¥–∞—Ç–∏ –Ω–æ–≤–æ–≥–æ –∫–ª—ñ—î–Ω—Ç–∞ –≤ –∫–æ–ª–µ–∫—Ü—ñ—é clients
  Future<String?> addClient(Client client) async {
    try {
      print('–î–æ–¥–∞—î–º–æ –∫–ª—ñ—î–Ω—Ç–∞ –≤ Firestore: ${client.toFirestore()}');
      final DocumentReference docRef = await _clientsCollection.add(
        client.toFirestore(),
      );
      print('–ö–ª—ñ—î–Ω—Ç –¥–æ–¥–∞–Ω–∏–π –∑ ID: ${docRef.id}');
      return docRef.id;
    } catch (e) {
      print('–ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç–∞: $e');
      return null;
    }
  }

  /// –û–Ω–æ–≤–∏—Ç–∏ —ñ—Å–Ω—É—é—á–æ–≥–æ –∫–ª—ñ—î–Ω—Ç–∞
  Future<bool> updateClient(String clientId, Client client) async {
    try {
      print(
        '–û–Ω–æ–≤–ª—é—î–º–æ –∫–ª—ñ—î–Ω—Ç–∞ –≤ Firestore: ID=$clientId, –¥–∞–Ω—ñ=${client.toFirestore()}',
      );

      // –°–ø–æ—á–∞—Ç–∫—É –æ—Ç—Ä–∏–º—É—î–º–æ —Å—Ç–∞—Ä—ñ –¥–∞–Ω—ñ –∫–ª—ñ—î–Ω—Ç–∞ –¥–ª—è –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è
      final oldClientDoc = await _clientsCollection.doc(clientId).get();
      final oldClientData = oldClientDoc.data() as Map<String, dynamic>?;

      // –û–Ω–æ–≤–ª—é—î–º–æ –∫–ª—ñ—î–Ω—Ç–∞ –≤ –∫–æ–ª–µ–∫—Ü—ñ—ó clients
      await _clientsCollection.doc(clientId).update(client.toFirestore());

      // –Ø–∫—â–æ –∑–º—ñ–Ω–∏–ª–æ—Å—è —ñ–º'—è, —Ç–µ–ª–µ—Ñ–æ–Ω –∞–±–æ VIP —Å—Ç–∞—Ç—É—Å, –æ–Ω–æ–≤–ª—é—î–º–æ –≤—Å—ñ —Å–µ—Å—ñ—ó —Ü—å–æ–≥–æ –∫–ª—ñ—î–Ω—Ç–∞
      if (oldClientData != null) {
        final oldName = oldClientData['name'] as String?;
        final oldPhone = oldClientData['phone'] as String?;
        final oldIsRegular = oldClientData['isRegularClient'] as bool? ?? false;

        if (oldName != client.name ||
            oldPhone != client.phone ||
            oldIsRegular != client.isRegularClient) {
          print(
            '–î–∞–Ω—ñ –∫–ª—ñ—î–Ω—Ç–∞ –∑–º—ñ–Ω–∏–ª–∏—Å—å (—ñ–º\'—è: $oldName->${client.name}, —Ç–µ–ª–µ—Ñ–æ–Ω: $oldPhone->${client.phone}, VIP: $oldIsRegular->${client.isRegularClient}), –æ–Ω–æ–≤–ª—é—î–º–æ —Å–µ—Å—ñ—ó...',
          );
          await _updateClientSessionsData(
            clientId,
            oldName ?? '',
            oldPhone ?? '',
            client.name,
            client.phone ?? '',
            client.isRegularClient,
          );
        }
      }

      print('–ö–ª—ñ—î–Ω—Ç —Ç–∞ –π–æ–≥–æ —Å–µ—Å—ñ—ó –æ–Ω–æ–≤–ª–µ–Ω—ñ —É—Å–ø—ñ—à–Ω–æ');
      return true;
    } catch (e) {
      print('–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç–∞: $e');
      return false;
    }
  }

  /// –û–Ω–æ–≤–∏—Ç–∏ –¥–∞–Ω—ñ –∫–ª—ñ—î–Ω—Ç–∞ —É –≤—Å—ñ—Ö –π–æ–≥–æ —Å–µ—Å—ñ—è—Ö
  Future<void> _updateClientSessionsData(
    String clientId,
    String oldName,
    String oldPhone,
    String newName,
    String newPhone,
    bool isRegularClient,
  ) async {
    try {
      print(
        'üîÑ –û–Ω–æ–≤–ª—é—î–º–æ —Å–µ—Å—ñ—ó –∫–ª—ñ—î–Ω—Ç–∞: clientId=$clientId, oldName="$oldName", newName="$newName", VIP=$isRegularClient',
      );

      // –ú–Ω–æ–∂–∏–Ω–∞ –¥–ª—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –æ–Ω–æ–≤–ª–µ–Ω–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤ (—É–Ω–∏–∫–∞—î–º–æ –¥—É–±–ª—ñ–∫–∞—Ç—ñ–≤)
      final Set<String> updatedDocIds = {};

      // 1. –ü–†–Ü–û–†–ò–¢–ï–¢: –®—É–∫–∞—î–º–æ —Å–µ—Å—ñ—ó –∑–∞ —ñ–º'—è–º —Ç–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º (–¥–ª—è –∫–ª—ñ—î–Ω—Ç–æ–∫ —Å—Ç–≤–æ—Ä–µ–Ω–∏—Ö —á–µ—Ä–µ–∑ —Å–µ—Å—ñ—ó)
      if (oldName.isNotEmpty && oldPhone.isNotEmpty) {
        print('üîç –®—É–∫–∞—î–º–æ —Å–µ—Å—ñ—ó –∑–∞ oldName="$oldName" —Ç–∞ oldPhone="$oldPhone"');
        final namePhoneQuery = await _sessionsCollection
            .where('clientName', isEqualTo: oldName)
            .where('phone', isEqualTo: oldPhone)
            .get();

        print(
          'üìä –ó–Ω–∞–π–¥–µ–Ω–æ —Å–µ—Å—ñ–π –∑–∞ —ñ–º\'—è–º+—Ç–µ–ª–µ—Ñ–æ–Ω–æ–º: ${namePhoneQuery.docs.length}',
        );

        for (final doc in namePhoneQuery.docs) {
          await doc.reference.update({
            'clientId':
                clientId, // –í–∞–∂–ª–∏–≤–æ: –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ clientId –¥–ª—è –º–∞–π–±—É—Ç–Ω—ñ—Ö –æ–Ω–æ–≤–ª–µ–Ω—å
            'clientName': newName,
            'phone': newPhone,
            'isRegularClient': isRegularClient,
          });
          updatedDocIds.add(doc.id);
          print(
            '‚úÖ –û–Ω–æ–≤–ª–µ–Ω–æ —Å–µ—Å—ñ—é ${doc.id}: "$oldName"->"$newName", "$oldPhone"->"$newPhone", VIP->$isRegularClient',
          );
        }
      }

      // 2. –®—É–∫–∞—î–º–æ —Å–µ—Å—ñ—ó –∑–∞ clientId (–¥–ª—è –∫–ª—ñ—î–Ω—Ç–æ–∫ –∑ –∫–æ–ª–µ–∫—Ü—ñ—ó clients)
      print('üîç –®—É–∫–∞—î–º–æ —Å–µ—Å—ñ—ó –∑–∞ clientId="$clientId"');
      final clientIdQuery = await _sessionsCollection
          .where('clientId', isEqualTo: clientId)
          .get();
      print('üìä –ó–Ω–∞–π–¥–µ–Ω–æ —Å–µ—Å—ñ–π –∑–∞ clientId: ${clientIdQuery.docs.length}');

      for (final doc in clientIdQuery.docs) {
        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –Ω–µ –æ–Ω–æ–≤–∏–ª–∏ –≤–∂–µ —Ü–µ–π –¥–æ–∫—É–º–µ–Ω—Ç
        if (!updatedDocIds.contains(doc.id)) {
          await doc.reference.update({
            'clientName': newName,
            'phone': newPhone,
            'isRegularClient': isRegularClient,
          });
          updatedDocIds.add(doc.id);
          print(
            '‚úÖ –û–Ω–æ–≤–ª–µ–Ω–æ —Å–µ—Å—ñ—é ${doc.id} –∑–∞ clientId: "$newName", "$newPhone", VIP->$isRegularClient',
          );
        } else {
          print('‚è≠Ô∏è –°–µ—Å—ñ—è ${doc.id} –≤–∂–µ –±—É–ª–∞ –æ–Ω–æ–≤–ª–µ–Ω–∞');
        }
      }

      // 3. –î–û–î–ê–¢–ö–û–í–û: –Ø–∫—â–æ –∑–º—ñ–Ω–∏–ª–æ—Å—è —ñ–º'—è, —à—É–∫–∞—î–º–æ —Å–µ—Å—ñ—ó –∑ –Ω–æ–≤–∏–º —ñ–º'—è–º, –∞–ª–µ —Å—Ç–∞—Ä–∏–º VIP —Å—Ç–∞—Ç—É—Å–æ–º
      if (oldName != newName && newName.isNotEmpty) {
        print(
          'üîç –î–æ–¥–∞—Ç–∫–æ–≤–∏–π –ø–æ—à—É–∫ —Å–µ—Å—ñ–π –∑ –Ω–æ–≤–∏–º —ñ–º\'—è–º="$newName" –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è VIP —Å—Ç–∞—Ç—É—Å—É',
        );
        final newNameQuery = await _sessionsCollection
            .where('clientName', isEqualTo: newName)
            .get();

        for (final doc in newNameQuery.docs) {
          if (!updatedDocIds.contains(doc.id)) {
            final sessionData = doc.data() as Map<String, dynamic>;
            final currentVip = sessionData['isRegularClient'] as bool? ?? false;

            // –û–Ω–æ–≤–ª—é—î–º–æ —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ VIP —Å—Ç–∞—Ç—É—Å –≤—ñ–¥—Ä—ñ–∑–Ω—è—î—Ç—å—Å—è
            if (currentVip != isRegularClient) {
              await doc.reference.update({
                'clientId': clientId,
                'isRegularClient': isRegularClient,
              });
              updatedDocIds.add(doc.id);
              print(
                '‚úÖ –û–Ω–æ–≤–ª–µ–Ω–æ VIP —Å—Ç–∞—Ç—É—Å –¥–ª—è —Å–µ—Å—ñ—ó ${doc.id}: VIP $currentVip->$isRegularClient',
              );
            }
          }
        }
      }

      print(
        'üéâ –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –í—Å—å–æ–≥–æ –æ–Ω–æ–≤–ª–µ–Ω–æ —Å–µ—Å—ñ–π: ${updatedDocIds.length}',
      );
    } catch (e) {
      print('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å–µ—Å—ñ–π –∫–ª—ñ—î–Ω—Ç–∞: $e');
    }
  }

  /// –í–∏–¥–∞–ª–∏—Ç–∏ –∫–ª—ñ—î–Ω—Ç–∞
  Future<bool> deleteClient(String clientId) async {
    try {
      print('–í–∏–¥–∞–ª—è—î–º–æ –∫–ª—ñ—î–Ω—Ç–∞ –∑ Firestore: ID=$clientId');
      await _clientsCollection.doc(clientId).delete();
      print('–ö–ª—ñ—î–Ω—Ç –≤–∏–¥–∞–ª–µ–Ω–∏–π —É—Å–ø—ñ—à–Ω–æ');
      return true;
    } catch (e) {
      print('–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç–∞: $e');
      return false;
    }
  }

  /// –ó–Ω–∞–π—Ç–∏ ID –∫–ª—ñ—î–Ω—Ç–∞ –∑–∞ —ñ–º–µ–Ω–µ–º —Ç–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º (–∞–±–æ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –∑–∞–ø–∏—Å, —è–∫—â–æ –Ω–µ —ñ—Å–Ω—É—î)
  Future<String?> findClientId(String name, String phone) async {
    try {
      print('üîç –®—É–∫–∞—î–º–æ –∫–ª—ñ—î–Ω—Ç–∞: name="$name", phone="$phone"');

      // –°–ø–æ—á–∞—Ç–∫—É —à—É–∫–∞—î–º–æ –≤ –∫–æ–ª–µ–∫—Ü—ñ—ó clients
      final query = await _clientsCollection
          .where('name', isEqualTo: name)
          .where('phone', isEqualTo: phone)
          .get();

      if (query.docs.isNotEmpty) {
        final clientId = query.docs.first.id;
        print('‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ –∫–ª—ñ—î–Ω—Ç–∞ –≤ –∫–æ–ª–µ–∫—Ü—ñ—ó clients: ID=$clientId');
        return clientId;
      }

      print('‚ö†Ô∏è –ö–ª—ñ—î–Ω—Ç–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –∫–æ–ª–µ–∫—Ü—ñ—ó clients, —à—É–∫–∞—î–º–æ –≤ —Å–µ—Å—ñ—è—Ö...');

      // –Ø–∫—â–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ clients, —à—É–∫–∞—î–º–æ –≤ —Å–µ—Å—ñ—è—Ö —ñ —Å—Ç–≤–æ—Ä—é—î–º–æ –∑–∞–ø–∏—Å
      final sessionsQuery = await _sessionsCollection
          .where('clientName', isEqualTo: name)
          .where('phone', isEqualTo: phone)
          .limit(1)
          .get();

      if (sessionsQuery.docs.isNotEmpty) {
        // –ó–Ω–∞–π—à–ª–∏ –∫–ª—ñ—î–Ω—Ç–∫—É –≤ —Å–µ—Å—ñ—è—Ö, —Å—Ç–≤–æ—Ä—é—î–º–æ –∑–∞–ø–∏—Å –≤ clients
        final sessionData =
            sessionsQuery.docs.first.data() as Map<String, dynamic>;
        final isRegularClient =
            sessionData['isRegularClient'] as bool? ?? false;

        print('üìã –°—Ç–≤–æ—Ä—é—î–º–æ –∑–∞–ø–∏—Å –∫–ª—ñ—î–Ω—Ç–∞ –∑ –¥–∞–Ω–∏—Ö —Å–µ—Å—ñ—ó: VIP=$isRegularClient');

        final client = Client(
          name: name,
          phone: phone,
          isRegularClient: isRegularClient,
        );

        final newClientRef = await _clientsCollection.add(client.toFirestore());
        final newClientId = newClientRef.id;

        print('‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ –Ω–æ–≤–∏–π –∑–∞–ø–∏—Å –∫–ª—ñ—î–Ω—Ç–∞: ID=$newClientId');

        // –û–Ω–æ–≤–ª—é—î–º–æ –≤—Å—ñ —Å–µ—Å—ñ—ó —Ü—ñ—î—ó –∫–ª—ñ—î–Ω—Ç–∫–∏ –∑ –Ω–æ–≤–∏–º clientId
        final allSessionsQuery = await _sessionsCollection
            .where('clientName', isEqualTo: name)
            .where('phone', isEqualTo: phone)
            .get();

        for (final doc in allSessionsQuery.docs) {
          await doc.reference.update({'clientId': newClientId});
        }

        print(
          'üîó –û–Ω–æ–≤–ª–µ–Ω–æ ${allSessionsQuery.docs.length} —Å–µ—Å—ñ–π –∑ –Ω–æ–≤–∏–º clientId',
        );

        return newClientId;
      }

      print('‚ùå –ö–ª—ñ—î–Ω—Ç–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –Ω—ñ –≤ clients, –Ω—ñ –≤ sessions');
      return null;
    } catch (e) {
      print('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–æ—à—É–∫—É/—Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç–∞: $e');
      return null;
    }
  }

  /// –û—Ç—Ä–∏–º–∞—Ç–∏ –∫–ª—ñ—î–Ω—Ç–∞ –∑–∞ ID
  Future<Client?> getClientById(String clientId) async {
    try {
      final doc = await _clientsCollection.doc(clientId).get();
      if (doc.exists) {
        final data = doc.data() as Map<String, dynamic>;
        return Client.fromFirestore(data..['id'] = doc.id);
      }
      return null;
    } catch (e) {
      print('–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç–∞ –∑–∞ ID: $e');
      return null;
    }
  }

  // ===== –ú–ï–¢–û–î–ò –î–õ–Ø –°–ï–°–Ü–ô =====

  /// –î–æ–¥–∞—Ç–∏ –Ω–æ–≤—É —Å–µ—Å—ñ—é
  Future<String?> addSession(Session session) async {
    try {
      print('–î–æ–¥–∞—î–º–æ —Å–µ—Å—ñ—é –≤ Firestore: ${session.toFirestore()}');
      final DocumentReference docRef = await _sessionsCollection.add(
        session.toFirestore(),
      );
      print('–°–µ—Å—ñ—è –¥–æ–¥–∞–Ω–∞ –∑ ID: ${docRef.id}');
      return docRef.id;
    } catch (e) {
      print('–ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Å–µ—Å—ñ—ó: $e');
      return null;
    }
  }

  /// –û—Ç—Ä–∏–º–∞—Ç–∏ —Å–µ—Å—ñ—ó –∑–∞ –º–∞–π—Å—Ç—Ä–æ–º —Ç–∞ –¥–∞—Ç–æ—é
  Future<List<Session>> getSessionsByMasterAndDate(
    String masterId,
    String date,
  ) async {
    try {
      print('–®—É–∫–∞—î–º–æ —Å–µ—Å—ñ—ó –≤ Firestore: masterId=$masterId, date=$date');

      // –°–ø—Ä–æ—â–µ–Ω–∏–π –∑–∞–ø–∏—Ç –±–µ–∑ —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è
      final QuerySnapshot snapshot = await _sessionsCollection
          .where('masterId', isEqualTo: masterId)
          .where('date', isEqualTo: date)
          .get();

      print('–ó–Ω–∞–π–¥–µ–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤ —É Firestore: ${snapshot.docs.length}');

      final sessions = snapshot.docs.map((doc) {
        final data = doc.data() as Map<String, dynamic>;
        data['id'] = doc.id;
        print('–î–æ–∫—É–º–µ–Ω—Ç ${doc.id}: $data');
        return Session.fromFirestore(data);
      }).toList();

      // –°–æ—Ä—Ç—É—î–º–æ –≤ –∫–æ–¥—ñ
      sessions.sort((a, b) => a.time.compareTo(b.time));

      print('–ü–µ—Ä–µ—Ç–≤–æ—Ä–µ–Ω–æ –≤ —Å–µ—Å—ñ—ó: ${sessions.length}');
      return sessions;
    } catch (e) {
      print('–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–µ—Å—ñ–π: $e');
      return [];
    }
  }

  /// –û—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ —Å–µ—Å—ñ—ó
  Future<List<Session>> getAllSessions() async {
    try {
      print('üîç –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ —Å–µ—Å—ñ—ó –¥–ª—è –∞—Ä—Ö—ñ–≤—É (–æ–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–æ)');

      // –û–ü–¢–ò–ú–Ü–ó–û–í–ê–ù–û: –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Ç—ñ–ª—å–∫–∏ –æ—Å—Ç–∞–Ω–Ω—ñ —Å–µ—Å—ñ—ó –∑ —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è–º –≤ –ë–î
      final QuerySnapshot snapshot = await _sessionsCollection
          .orderBy('date', descending: true)
          .limit(500) // –û–±–º–µ–∂—É—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å - –∞—Ä—Ö—ñ–≤ –ø–æ–∫–∞–∑—É—î –æ—Å—Ç–∞–Ω–Ω—ñ —Å–µ—Å—ñ—ó
          .get();

      print(
        'üìä –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ –¥–ª—è –∞—Ä—Ö—ñ–≤—É: ${snapshot.docs.length} —Å–µ—Å—ñ–π (–∑–∞–º—ñ—Å—Ç—å –≤—Å—ñ—Ö)',
      );

      final sessions = snapshot.docs.map((doc) {
        final data = doc.data() as Map<String, dynamic>;
        data['id'] = doc.id;
        return Session.fromFirestore(data);
      }).toList();

      // –ë–î –≤–∂–µ –≤—ñ–¥—Å–æ—Ä—Ç—É–≤–∞–ª–∞ –∑–∞ –¥–∞—Ç–æ—é, –¥–æ–¥–∞—Ç–∫–æ–≤–æ —Å–æ—Ä—Ç—É—î–º–æ –∑–∞ —á–∞—Å–æ–º
      sessions.sort((a, b) {
        final dateCompare = b.date.compareTo(
          a.date,
        ); // –°–ø–æ—á–∞—Ç–∫—É –Ω–æ–≤—ñ (–≤–∂–µ –≤—ñ–¥—Å–æ—Ä—Ç–æ–≤–∞–Ω—ñ –ë–î)
        if (dateCompare != 0) return dateCompare;
        return b.time.compareTo(a.time); // –ü–æ—Ç—ñ–º –∑–∞ —á–∞—Å–æ–º (–Ω–æ–≤—ñ —Å–ø–æ—á–∞—Ç–∫—É)
      });

      return sessions;
    } catch (e) {
      print('–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—Å—ñ—Ö —Å–µ—Å—ñ–π: $e');
      return [];
    }
  }

  /// –û—Ç—Ä–∏–º–∞—Ç–∏ —Å–µ—Å—ñ—ó –º–∞–π—Å—Ç—Ä–∞ –∑–∞ –º—ñ—Å—è—Ü—å (–¥–ª—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è)
  Future<List<Session>> getSessionsByMasterAndMonth(
    String masterId,
    int year,
    int month,
  ) async {
    try {
      print('üîç –®—É–∫–∞—î–º–æ —Å–µ—Å—ñ—ó –º–∞–π—Å—Ç—Ä–∞ $masterId –∑–∞ $month/$year');

      // –ü—Ä–æ—Å—Ç–∏–π –∑–∞–ø–∏—Ç —Ç—ñ–ª—å–∫–∏ –ø–æ –º–∞–π—Å—Ç—Ä—É (–±–µ–∑ –¥—ñ–∞–ø–∞–∑–æ–Ω—É –¥–∞—Ç)
      final QuerySnapshot snapshot = await _sessionsCollection
          .where('masterId', isEqualTo: masterId)
          .get();

      print('üìä –ó–Ω–∞–π–¥–µ–Ω–æ –≤—Å—ñ—Ö –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤ –º–∞–π—Å—Ç—Ä–∞: ${snapshot.docs.length}');

      final allSessions = snapshot.docs.map((doc) {
        final data = doc.data() as Map<String, dynamic>;
        data['id'] = doc.id;
        return Session.fromFirestore(data);
      }).toList();

      // –§—ñ–ª—å—Ç—Ä—É—î–º–æ –ø–æ –º—ñ—Å—è—Ü—é –≤ –∫–æ–¥—ñ
      final monthSessions = allSessions.where((session) {
        try {
          final dateParts = session.date.split('-');
          final sessionYear = int.parse(dateParts[0]);
          final sessionMonth = int.parse(dateParts[1]);

          return sessionYear == year && sessionMonth == month;
        } catch (e) {
          print('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É –¥–∞—Ç–∏: ${session.date}');
          return false;
        }
      }).toList();

      // –°–æ—Ä—Ç—É—î–º–æ –≤ –∫–æ–¥—ñ
      monthSessions.sort((a, b) {
        final dateCompare = a.date.compareTo(b.date);
        if (dateCompare != 0) return dateCompare;
        return a.time.compareTo(b.time);
      });

      print(
        '‚úÖ –í—ñ–¥—Ñ—ñ–ª—å—Ç—Ä–æ–≤–∞–Ω–æ –¥–ª—è –º—ñ—Å—è—Ü—è $month/$year: ${monthSessions.length} —Å–µ—Å—ñ–π',
      );
      for (final session in monthSessions) {
        print('   üìÖ ${session.date} ${session.time} - ${session.clientName}');
      }

      return monthSessions;
    } catch (e) {
      print('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–µ—Å—ñ–π –∑–∞ –º—ñ—Å—è—Ü—å: $e');
      return [];
    }
  }

  /// –û–ü–¢–ò–ú–Ü–ó–û–í–ê–ù–ò–ô –º–µ—Ç–æ–¥: –û—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ —Å–µ—Å—ñ—ó –∑–∞ –º—ñ—Å—è—Ü—å (–¥–ª—è –≤—Å—ñ—Ö –º–∞–π—Å—Ç—Ä—ñ–≤ –æ–¥—Ä–∞–∑—É)
  Future<List<Session>> getSessionsByMonth(int year, int month) async {
    try {
      final requestTime = DateTime.now().millisecondsSinceEpoch;
      print('üîç –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Å–µ—Å—ñ—ó –∑–∞ $month/$year –∑ —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—î—é –≤ –ë–î (–∑–∞–ø–∏—Ç #$requestTime)');

      // –°—Ç–≤–æ—Ä—é—î–º–æ –¥–∞—Ç–∏ –ø–æ—á–∞—Ç–∫—É —ñ –∫—ñ–Ω—Ü—è –º—ñ—Å—è—Ü—è
      final startDate = '$year-${month.toString().padLeft(2, '0')}-01';
      final nextMonth = month == 12 ? 1 : month + 1;
      final nextYear = month == 12 ? year + 1 : year;
      final endDate = '$nextYear-${nextMonth.toString().padLeft(2, '0')}-01';

      print('üìÖ –ü–µ—Ä—ñ–æ–¥ –∑–∞–ø–∏—Ç—É: $startDate –¥–æ $endDate');

      // –û–ü–¢–ò–ú–Ü–ó–û–í–ê–ù–û: –§—ñ–ª—å—Ç—Ä—É—î–º–æ –≤ –ë–î, –∞ –Ω–µ –≤ –∫–æ–¥—ñ!
      // –î–æ–¥–∞—î–º–æ Source.server –¥–ª—è –æ–±—Ö–æ–¥—É –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∫–µ—à—É Firestore
      final QuerySnapshot snapshot = await _sessionsCollection
          .where('date', isGreaterThanOrEqualTo: startDate)
          .where('date', isLessThan: endDate)
          .orderBy('date', descending: true)
          .limit(200) // –û–±–º–µ–∂—É—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –¥–ª—è –±–µ–∑–ø–µ–∫–∏
          .get(const GetOptions(source: Source.server));

      print(
        'üìä –ó–Ω–∞–π–¥–µ–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤ –∑–∞ –º—ñ—Å—è—Ü—å: ${snapshot.docs.length} (–∑–∞–º—ñ—Å—Ç—å –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –≤—Å—ñ—Ö)',
      );

      final sessions = snapshot.docs.map((doc) {
        final data = doc.data() as Map<String, dynamic>;
        data['id'] = doc.id;
        return Session.fromFirestore(data);
      }).toList();

      // –ë–î –≤–∂–µ –≤—ñ–¥—Ñ—ñ–ª—å—Ç—Ä—É–≤–∞–ª–∞ —ñ –≤—ñ–¥—Å–æ—Ä—Ç—É–≤–∞–ª–∞ –∑–∞ –Ω–∞—Å!
      print('‚úÖ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ –¥–ª—è –º—ñ—Å—è—Ü—è $month/$year: ${sessions.length} —Å–µ—Å—ñ–π (–∑–∞–ø–∏—Ç #$requestTime)');
      
      // –ü–æ–∫–∞–∑—É—î–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ –∫—ñ–ª—å–∫–∞ –∑–∞–ø–∏—Å—ñ–≤ –¥–ª—è debug
      if (sessions.isNotEmpty) {
        final recentSessions = sessions.take(3).map((s) => '${s.date} ${s.time} ${s.clientName}').join(', ');
        print('üìã –û—Å—Ç–∞–Ω–Ω—ñ –∑–∞–ø–∏—Å–∏: $recentSessions');
      }

      return sessions;
    } catch (e) {
      print('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–µ—Å—ñ–π –∑–∞ –º—ñ—Å—è—Ü—å: $e');
      return [];
    }
  }

  /// –û—Ç—Ä–∏–º–∞—Ç–∏ —Å–µ—Å—ñ—é –∑–∞ ID
  Future<Session?> getSessionById(String sessionId) async {
    try {
      final DocumentSnapshot doc = await _sessionsCollection
          .doc(sessionId)
          .get();
      if (doc.exists) {
        final data = doc.data() as Map<String, dynamic>;
        data['id'] = doc.id;
        return Session.fromFirestore(data);
      }
      return null;
    } catch (e) {
      print('–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–µ—Å—ñ—ó –∑–∞ ID: $e');
      return null;
    }
  }

  /// –û–Ω–æ–≤–∏—Ç–∏ —Å–µ—Å—ñ—é
  Future<bool> updateSession(String sessionId, Session session) async {
    try {
      await _sessionsCollection.doc(sessionId).update(session.toFirestore());
      return true;
    } catch (e) {
      print('–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å–µ—Å—ñ—ó: $e');
      return false;
    }
  }

  /// –í–∏–¥–∞–ª–∏—Ç–∏ —Å–µ—Å—ñ—é
  Future<bool> deleteSession(String sessionId) async {
    try {
      await _sessionsCollection.doc(sessionId).delete();
      return true;
    } catch (e) {
      print('–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è —Å–µ—Å—ñ—ó: $e');
      return false;
    }
  }

  // ===== REAL-TIME STREAMING =====

  /// Stream –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –º–∞–π—Å—Ç—Ä—ñ–≤ –≤ —Ä–µ–∞–ª—å–Ω–æ–º—É —á–∞—Å—ñ
  Stream<List<Master>> mastersStream() {
    return _mastersCollection.snapshots().map((snapshot) {
      return snapshot.docs.map((doc) {
        final data = doc.data() as Map<String, dynamic>;
        data['id'] = doc.id;
        return Master.fromFirestore(data);
      }).toList();
    });
  }

  /// Stream –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–µ—Å—ñ–π –≤ —Ä–µ–∞–ª—å–Ω–æ–º—É —á–∞—Å—ñ
  Stream<List<Session>> sessionsStream(String masterId, String date) {
    return _sessionsCollection
        .where('masterId', isEqualTo: masterId)
        .where('date', isEqualTo: date)
        .orderBy('time')
        .snapshots()
        .map((snapshot) {
          return snapshot.docs.map((doc) {
            final data = doc.data() as Map<String, dynamic>;
            data['id'] = doc.id;
            return Session.fromFirestore(data);
          }).toList();
        });
  }

  /// –û—Ç—Ä–∏–º–∞—Ç–∏ —Å–µ—Å—ñ—ó –∑–∞ –¥—ñ–∞–ø–∞–∑–æ–Ω –¥–∞—Ç (–¥–ª—è –∞–Ω–∞–ª—ñ—Ç–∏–∫–∏)
  Future<List<Session>> getSessionsForDateRange(
    String startDate,
    String endDate,
  ) async {
    try {
      print('üîç –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Å–µ—Å—ñ—ó –∑–∞ –ø–µ—Ä—ñ–æ–¥: $startDate - $endDate');

      // –°–ø—Ä–æ–±—É—î–º–æ —Å–ø–æ—á–∞—Ç–∫—É –∑ –ø—Ä–æ—Å—Ç–∏–º –∑–∞–ø–∏—Ç–æ–º –ø–æ –æ–¥–Ω–æ–º—É –ø–æ–ª—é
      QuerySnapshot snapshot;
      try {
        snapshot = await _sessionsCollection
            .where('date', isGreaterThanOrEqualTo: startDate)
            .where('date', isLessThanOrEqualTo: endDate)
            .get();
      } catch (indexError) {
        print('‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –∑ —ñ–Ω–¥–µ–∫—Å–æ–º, –∑–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –≤—Å—ñ —Å–µ—Å—ñ—ó: $indexError');
        // –Ø–∫—â–æ –Ω–µ –ø—Ä–∞—Ü—é—î –∑ —Ñ—ñ–ª—å—Ç—Ä–∞–º–∏, –∑–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –≤—Å—ñ —Å–µ—Å—ñ—ó —Ç–∞ —Ñ—ñ–ª—å—Ç—Ä—É—î–º–æ –ª–æ–∫–∞–ª—å–Ω–æ
        snapshot = await _sessionsCollection.get();
      }

      print('üìä –ó–Ω–∞–π–¥–µ–Ω–æ —Å–µ—Å—ñ–π –¥–æ —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó: ${snapshot.docs.length}');

      final allSessions = snapshot.docs.map((doc) {
        final data = doc.data() as Map<String, dynamic>;
        data['id'] = doc.id;
        return Session.fromFirestore(data);
      }).toList();

      // –§—ñ–ª—å—Ç—Ä—É—î–º–æ –ª–æ–∫–∞–ª—å–Ω–æ —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
      final filteredSessions = allSessions.where((session) {
        return session.date.compareTo(startDate) >= 0 && 
               session.date.compareTo(endDate) <= 0;
      }).toList();

      print('‚úÖ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ —Å–µ—Å—ñ–π –∑–∞ –ø–µ—Ä—ñ–æ–¥ $startDate - $endDate: ${filteredSessions.length}');

      return filteredSessions;
    } catch (e) {
      print('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–µ—Å—ñ–π –∑–∞ –¥—ñ–∞–ø–∞–∑–æ–Ω –¥–∞—Ç: $e');
      return [];
    }
  }

  /// –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏, —á–∏ –º–∞—î –∫–ª—ñ—î–Ω—Ç–∫–∞ —Å–µ—Å—ñ—ó (–¥–ª—è –±–µ–∑–ø–µ—á–Ω–æ–≥–æ –≤–∏–¥–∞–ª–µ–Ω–Ω—è)
  Future<Map<String, dynamic>> checkClientSessions(
    String clientId,
    String clientName,
    String? clientPhone,
  ) async {
    try {
      print(
        'üîç –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å–µ—Å—ñ—ó –∫–ª—ñ—î–Ω—Ç–∫–∏: ID=$clientId, name="$clientName", phone="$clientPhone"',
      );

      int totalSessions = 0;
      List<Map<String, dynamic>> recentSessions = [];

      // 1. –®—É–∫–∞—î–º–æ —Å–µ—Å—ñ—ó –∑–∞ clientId
      final clientIdQuery = await _sessionsCollection
          .where('clientId', isEqualTo: clientId)
          .get();

      totalSessions += clientIdQuery.docs.length;
      print('üìä –ó–Ω–∞–π–¥–µ–Ω–æ —Å–µ—Å—ñ–π –∑–∞ clientId: ${clientIdQuery.docs.length}');

      // –î–æ–¥–∞—î–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ —Å–µ—Å—ñ—ó –¥–ª—è –ø–æ–∫–∞–∑—É
      for (final doc in clientIdQuery.docs.take(3)) {
        final data = doc.data() as Map<String, dynamic>;
        recentSessions.add({
          'date': data['date'],
          'time': data['time'],
          'masterId': data['masterId'],
        });
      }

      // 2. –®—É–∫–∞—î–º–æ —Å–µ—Å—ñ—ó –∑–∞ —ñ–º'—è–º —Ç–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º (–¥–ª—è –∫–ª—ñ—î–Ω—Ç–æ–∫ —Å—Ç–≤–æ—Ä–µ–Ω–∏—Ö —á–µ—Ä–µ–∑ —Å–µ—Å—ñ—ó)
      if (clientPhone != null && clientPhone.isNotEmpty) {
        final namePhoneQuery = await _sessionsCollection
            .where('clientName', isEqualTo: clientName)
            .where('phone', isEqualTo: clientPhone)
            .get();

        // –†–∞—Ö—É—î–º–æ —Ç—ñ–ª—å–∫–∏ —É–Ω—ñ–∫–∞–ª—å–Ω—ñ —Å–µ—Å—ñ—ó (–Ω–µ –≤—Ä–∞—Ö–æ–≤—É—î–º–æ —Ç—ñ, —â–æ –≤–∂–µ –∑–Ω–∞–π—à–ª–∏ –∑–∞ clientId)
        final Set<String> existingSessionIds = clientIdQuery.docs
            .map((doc) => doc.id)
            .toSet();
        int additionalSessions = 0;

        for (final doc in namePhoneQuery.docs) {
          if (!existingSessionIds.contains(doc.id)) {
            additionalSessions++;
            if (recentSessions.length < 5) {
              final data = doc.data() as Map<String, dynamic>;
              recentSessions.add({
                'date': data['date'],
                'time': data['time'],
                'masterId': data['masterId'],
              });
            }
          }
        }

        totalSessions += additionalSessions;
        print(
          'üìä –ó–Ω–∞–π–¥–µ–Ω–æ –¥–æ–¥–∞—Ç–∫–æ–≤–∏—Ö —Å–µ—Å—ñ–π –∑–∞ —ñ–º\'—è–º+—Ç–µ–ª–µ—Ñ–æ–Ω–æ–º: $additionalSessions',
        );
      }
      // 3. –Ø–∫—â–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É –Ω–µ–º–∞—î, —à—É–∫–∞—î–º–æ —Ç—ñ–ª—å–∫–∏ –∑–∞ —ñ–º'—è–º (–º–µ–Ω—à –Ω–∞–¥—ñ–π–Ω–æ)
      else {
        final nameQuery = await _sessionsCollection
            .where('clientName', isEqualTo: clientName)
            .get();

        final Set<String> existingSessionIds = clientIdQuery.docs
            .map((doc) => doc.id)
            .toSet();
        int additionalSessions = 0;

        for (final doc in nameQuery.docs) {
          if (!existingSessionIds.contains(doc.id)) {
            additionalSessions++;
            if (recentSessions.length < 5) {
              final data = doc.data() as Map<String, dynamic>;
              recentSessions.add({
                'date': data['date'],
                'time': data['time'],
                'masterId': data['masterId'],
              });
            }
          }
        }

        totalSessions += additionalSessions;
        print('üìä –ó–Ω–∞–π–¥–µ–Ω–æ –¥–æ–¥–∞—Ç–∫–æ–≤–∏—Ö —Å–µ—Å—ñ–π –∑–∞ —ñ–º\'—è–º: $additionalSessions');
      }

      // –°–æ—Ä—Ç—É—î–º–æ —Å–µ—Å—ñ—ó –∑–∞ –¥–∞—Ç–æ—é (–Ω–æ–≤—ñ—à—ñ —Å–ø–æ—á–∞—Ç–∫—É)
      recentSessions.sort((a, b) {
        final dateCompare = (b['date'] as String).compareTo(
          a['date'] as String,
        );
        if (dateCompare != 0) return dateCompare;
        return (b['time'] as String).compareTo(a['time'] as String);
      });

      print('‚úÖ –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Å–µ—Å—ñ–π –∫–ª—ñ—î–Ω—Ç–∫–∏: $totalSessions');

      return {
        'totalSessions': totalSessions,
        'hasSessions': totalSessions > 0,
        'recentSessions': recentSessions
            .take(3)
            .toList(), // –ü–æ–∫–∞–∑—É—î–º–æ —Ç—ñ–ª—å–∫–∏ 3 –æ—Å—Ç–∞–Ω–Ω—ñ
      };
    } catch (e) {
      print('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Å–µ—Å—ñ–π –∫–ª—ñ—î–Ω—Ç–∫–∏: $e');
      return {
        'totalSessions': 0,
        'hasSessions': false,
        'recentSessions': <Map<String, dynamic>>[],
        'error': e.toString(),
      };
    }
  }
}
