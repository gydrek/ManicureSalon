import 'dart:io';
import 'dart:async';
import 'package:flutter/foundation.dart';
import 'package:flutter_local_notifications/flutter_local_notifications.dart';
import 'package:timezone/timezone.dart' as tz;
import 'package:timezone/data/latest.dart' as tz;
import 'package:permission_handler/permission_handler.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'package:nastya_app/models/models.dart';
import 'package:nastya_app/services/firestore_service.dart';
import 'package:nastya_app/providers/language_provider.dart';

class NotificationService {
  static final NotificationService _instance = NotificationService._internal();
  factory NotificationService() => _instance;
  NotificationService._internal();

  final FlutterLocalNotificationsPlugin _flutterLocalNotificationsPlugin =
      FlutterLocalNotificationsPlugin();
  final FirestoreService _firestoreService = FirestoreService();

  bool _isInitialized = false;
  LanguageProvider? _languageProvider;

  // –¢–∞–π–º–µ—Ä–∏ –¥–ª—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –∑–∞–∫—ñ–Ω—á–µ–Ω–Ω—è —Å–µ—Å—ñ–π
  final Map<String, Timer> _sessionTimers = {};
  final Map<String, Timer> _autoMissedTimers = {};

  Future<void> initialize() async {
    if (_isInitialized) return;

    // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ —á–∞—Å–æ–≤—ñ –∑–æ–Ω–∏
    tz.initializeTimeZones();

    // –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –¥–ª—è Android
    const AndroidInitializationSettings initializationSettingsAndroid =
        AndroidInitializationSettings('@drawable/notification_icon');

    // –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –¥–ª—è iOS
    const DarwinInitializationSettings initializationSettingsIOS =
        DarwinInitializationSettings(
          requestAlertPermission: true,
          requestBadgePermission: true,
          requestSoundPermission: true,
        );

    const InitializationSettings initializationSettings =
        InitializationSettings(
          android: initializationSettingsAndroid,
          iOS: initializationSettingsIOS,
        );

    await _flutterLocalNotificationsPlugin.initialize(
      initializationSettings,
      onDidReceiveNotificationResponse: _onDidReceiveNotificationResponse,
    );

    // –°—Ç–≤–æ—Ä—é—î–º–æ –∫–∞–Ω–∞–ª —Å–ø–æ–≤—ñ—â–µ–Ω—å –¥–ª—è Android
    if (Platform.isAndroid) {
      await _createNotificationChannel();
    }

    // –ó–∞–ø–∏—Ç—É—î–º–æ –¥–æ–∑–≤–æ–ª–∏
    await _requestPermissions();

    _isInitialized = true;
  }

  Future<void> _createNotificationChannel() async {
    final AndroidFlutterLocalNotificationsPlugin? androidImplementation =
        _flutterLocalNotificationsPlugin
            .resolvePlatformSpecificImplementation<
              AndroidFlutterLocalNotificationsPlugin
            >();

    if (androidImplementation == null) {
      print('‚ö†Ô∏è Android implementation –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ');
      return;
    }

    // –ö–∞–Ω–∞–ª –¥–ª—è –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å –ø—Ä–æ —Å–µ—Å—ñ—ó
    const AndroidNotificationChannel sessionChannel =
        AndroidNotificationChannel(
          'session_reminders',
          '–ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –ø—Ä–æ –∑–∞–ø–∏—Å–∏',
          description: '–°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –º–∞–π–±—É—Ç–Ω—ñ –∑–∞–ø–∏—Å–∏ –∫–ª—ñ—î–Ω—Ç–æ–∫',
          importance: Importance.high,
          playSound: true,
          enableVibration: true,
        );

    // –ö–∞–Ω–∞–ª –¥–ª—è —Ç–µ—Å—Ç–æ–≤–∏—Ö —Å–ø–æ–≤—ñ—â–µ–Ω—å
    const AndroidNotificationChannel testChannel = AndroidNotificationChannel(
      'test_notifications',
      '–¢–µ—Å—Ç–æ–≤—ñ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è',
      description: '–ö–∞–Ω–∞–ª –¥–ª—è —Ç–µ—Å—Ç–æ–≤–∏—Ö —Å–ø–æ–≤—ñ—â–µ–Ω—å',
      importance: Importance.high,
      playSound: true,
      enableVibration: true,
    );

    // –ö–∞–Ω–∞–ª –¥–ª—è –ø—Ä–æ—Å—Ç–æ–≥–æ —Ç–µ—Å—Ç—É
    const AndroidNotificationChannel simpleTestChannel =
        AndroidNotificationChannel(
          'test_simple',
          '–ü—Ä–æ—Å—Ç–∏–π —Ç–µ—Å—Ç',
          description: '–ö–∞–Ω–∞–ª –¥–ª—è –ø—Ä–æ—Å—Ç–æ–≥–æ —Ç–µ—Å—Ç—É',
          importance: Importance.max,
          playSound: true,
          enableVibration: true,
        );

    try {
      await androidImplementation.createNotificationChannel(sessionChannel);
      await androidImplementation.createNotificationChannel(testChannel);
      await androidImplementation.createNotificationChannel(simpleTestChannel);

      if (kDebugMode) {
        print('‚úÖ –í—Å—ñ –∫–∞–Ω–∞–ª–∏ —Å–ø–æ–≤—ñ—â–µ–Ω—å —Å—Ç–≤–æ—Ä–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ');
      }
    } catch (e) {
      print('‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–∞–Ω–∞–ª—ñ–≤: $e');
    }
  }

  Future<void> _requestPermissions() async {
    if (Platform.isAndroid) {
      await Permission.notification.isDenied.then((value) {
        if (value) {
          Permission.notification.request();
        }
      });
    }

    if (Platform.isIOS) {
      await _flutterLocalNotificationsPlugin
          .resolvePlatformSpecificImplementation<
            IOSFlutterLocalNotificationsPlugin
          >()
          ?.requestPermissions(alert: true, badge: true, sound: true);
    }
  }

  void _onDidReceiveNotificationResponse(NotificationResponse response) {
    // –û–±—Ä–æ–±–∫–∞ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –Ω–∞ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è
    if (kDebugMode) {
      print('–ù–∞—Ç–∏—Å–Ω—É—Ç–æ –Ω–∞ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è: ${response.payload}');
    }
  }

  /// –í—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –ø—Ä–æ–≤–∞–π–¥–µ—Ä –º–æ–≤–∏ –¥–ª—è –ª–æ–∫–∞–ª—ñ–∑–∞—Ü—ñ—ó —Å–ø–æ–≤—ñ—â–µ–Ω—å
  void setLanguageProvider(LanguageProvider languageProvider) {
    _languageProvider = languageProvider;
  }

  /// –û—Ç—Ä–∏–º–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –º–∞–π—Å—Ç—Ä–∏–Ω—é
  Future<String> _getMasterName(String masterId) async {
    try {
      final master = await _firestoreService.getMasterById(masterId);
      if (master != null) {
        final languageCode =
            _languageProvider?.currentLocale.languageCode ?? 'uk';
        return master.getLocalizedName(languageCode);
      }
    } catch (e) {
      print('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–º–µ–Ω—ñ –º–∞–π—Å—Ç—Ä–∏–Ω—ñ: $e');
    }
    return '–ù–µ–≤—ñ–¥–æ–º–∞ –º–∞–π—Å—Ç—Ä–∏–Ω—è';
  }

  Future<void> scheduleSessionReminder({
    required String sessionId,
    required String clientName,
    required String masterName,
    required DateTime sessionDateTime,
    required String masterId,
  }) async {
    if (!_isInitialized) {
      await initialize();
    }

    if (kDebugMode) {
      print('–ü–ª–∞–Ω—É–≤–∞–Ω–Ω—è —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –¥–ª—è —Å–µ—Å—ñ—ó $sessionId');
      print('–ö–ª—ñ—î–Ω—Ç: $clientName, –ú–∞–π—Å—Ç–µ—Ä: $masterName');
      print('–ß–∞—Å —Å–µ—Å—ñ—ó: $sessionDateTime');
    }

    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —É–≤—ñ–º–∫–Ω–µ–Ω—ñ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –¥–ª—è —Ü—å–æ–≥–æ –º–∞–π—Å—Ç—Ä–∞
    final prefs = await SharedPreferences.getInstance();
    final notificationsEnabled =
        prefs.getBool('notifications_$masterId') ?? true;

    if (!notificationsEnabled) {
      if (kDebugMode) {
        print('–°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –¥–ª—è –º–∞–π—Å—Ç—Ä–∞ $masterName –≤–∏–º–∫–Ω–µ–Ω—ñ');
      }
      return;
    }

    // –ß–∞—Å —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è - –∑–∞ 30 —Ö–≤–∏–ª–∏–Ω –¥–æ —Å–µ—Å—ñ—ó
    final notificationTime = sessionDateTime.subtract(
      const Duration(minutes: 30),
    );
    final now = DateTime.now();

    if (kDebugMode) {
      print('–ß–∞—Å —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è: $notificationTime');
      print('–ü–æ—Ç–æ—á–Ω–∏–π —á–∞—Å: $now');
      print('–†—ñ–∑–Ω–∏—Ü—è: ${notificationTime.difference(now).inMinutes} —Ö–≤–∏–ª–∏–Ω');
    }

    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —á–∞—Å —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è —â–µ –Ω–µ –º–∏–Ω—É–≤
    if (notificationTime.isBefore(now)) {
      if (kDebugMode) {
        print(
          '‚ö†Ô∏è –ß–∞—Å –¥–ª—è —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –≤–∂–µ –º–∏–Ω—É–≤. –°–µ—Å—ñ—è –∑–∞–Ω–∞–¥—Ç–æ –±–ª–∏–∑—å–∫–æ –∞–±–æ –≤ –º–∏–Ω—É–ª–æ–º—É.',
        );
        print('–†–µ–∫–æ–º–µ–Ω–¥—É—î—Ç—å—Å—è —Å—Ç–≤–æ—Ä—é–≤–∞—Ç–∏ –∑–∞–ø–∏—Å–∏ –º—ñ–Ω—ñ–º—É–º –∑–∞ 30 —Ö–≤–∏–ª–∏–Ω.');
      }
      return;
    }

    // –Ø–∫—â–æ –¥–æ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –º–µ–Ω—à–µ 1 —Ö–≤–∏–ª–∏–Ω–∏ - –ø–æ–∫–∞–∑—É—î–º–æ –º–∏—Ç—Ç—î–≤–µ
    if (notificationTime.difference(now).inMinutes < 1) {
      if (kDebugMode) {
        print('‚ö° –ß–∞—Å —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –¥—É–∂–µ –±–ª–∏–∑—å–∫–æ, –ø–æ–∫–∞–∑—É—î–º–æ –º–∏—Ç—Ç—î–≤–µ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è');
      }

      await showImmediateNotification(
        title: '–ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –ø—Ä–æ –∑–∞–ø–∏—Å',
        body: '–ù–µ–∑–∞–±–∞—Ä–æ–º: $clientName —É –º–∞–π—Å—Ç—Ä–∞ $masterName',
      );
      return;
    }

    // –°—Ç–≤–æ—Ä—é—î–º–æ —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π ID –¥–ª—è —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è
    final notificationId = sessionId.hashCode;

    // –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –¥–ª—è Android
    const AndroidNotificationDetails androidPlatformChannelSpecifics =
        AndroidNotificationDetails(
          'session_reminders',
          '–ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –ø—Ä–æ –∑–∞–ø–∏—Å–∏',
          channelDescription: '–°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –º–∞–π–±—É—Ç–Ω—ñ –∑–∞–ø–∏—Å–∏ –∫–ª—ñ—î–Ω—Ç–æ–∫',
          importance: Importance.high,
          priority: Priority.high,
          icon: '@drawable/notification_icon',
          enableVibration: true,
          playSound: true,
        );

    // –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –¥–ª—è iOS
    const DarwinNotificationDetails iOSPlatformChannelSpecifics =
        DarwinNotificationDetails(
          sound: 'default',
          presentAlert: true,
          presentBadge: true,
          presentSound: true,
        );

    const NotificationDetails platformChannelSpecifics = NotificationDetails(
      android: androidPlatformChannelSpecifics,
      iOS: iOSPlatformChannelSpecifics,
    );

    // –§–æ—Ä–º—É—î–º–æ —Ç–µ–∫—Å—Ç —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è
    final title = '–ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –ø—Ä–æ –∑–∞–ø–∏—Å';
    final body = '–ß–µ—Ä–µ–∑ 30 —Ö–≤–∏–ª–∏–Ω: $clientName —É –º–∞–π—Å—Ç—Ä–∞ $masterName';

    // –ü–ª–∞–Ω—É—î–º–æ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è
    try {
      final scheduledTime = tz.TZDateTime.from(notificationTime, tz.local);

      if (kDebugMode) {
        print('üìÖ –ß–∞—Å –¥–ª—è –ø–ª–∞–Ω—É–≤–∞–Ω–Ω—è: $scheduledTime');
        print('üåç –ß–∞—Å–æ–≤–∞ –∑–æ–Ω–∞: ${tz.local.name}');
        print('üî¢ ID —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è: $notificationId');
      }

      await _flutterLocalNotificationsPlugin.zonedSchedule(
        notificationId,
        title,
        body,
        scheduledTime,
        platformChannelSpecifics,
        androidScheduleMode: AndroidScheduleMode.exactAllowWhileIdle,
        uiLocalNotificationDateInterpretation:
            UILocalNotificationDateInterpretation.absoluteTime,
        payload: 'session_$sessionId',
      );

      if (kDebugMode) {
        print(
          '‚úÖ –°–ø–æ–≤—ñ—â–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –∑–∞–ø–ª–∞–Ω–æ–≤–∞–Ω–æ –¥–ª—è —Å–µ—Å—ñ—ó $sessionId –Ω–∞ $notificationTime',
        );

        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –≤—ñ–¥—Ä–∞–∑—É –ø—ñ—Å–ª—è –ø–ª–∞–Ω—É–≤–∞–Ω–Ω—è
        final pending = await getPendingNotifications();
        print('üìã –ó–∞—Ä–∞–∑ –∑–∞–ø–ª–∞–Ω–æ–≤–∞–Ω–æ —Å–ø–æ–≤—ñ—â–µ–Ω—å: ${pending.length}');
        for (final p in pending) {
          print('  - ID: ${p.id}, Title: ${p.title}');
        }
      }
    } catch (e) {
      print('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–ª–∞–Ω—É–≤–∞–Ω–Ω—è —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è: $e');
      rethrow;
    }
  }

  Future<void> cancelSessionReminder(String sessionId) async {
    final notificationId = sessionId.hashCode;
    await _flutterLocalNotificationsPlugin.cancel(notificationId);

    if (kDebugMode) {
      print('–°–∫–∞—Å–æ–≤–∞–Ω–æ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –¥–ª—è —Å–µ—Å—ñ—ó $sessionId');
    }
  }

  Future<void> cancelAllNotifications() async {
    await _flutterLocalNotificationsPlugin.cancelAll();

    if (kDebugMode) {
      print('–°–∫–∞—Å–æ–≤–∞–Ω–æ –≤—Å—ñ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è');
    }
  }

  Future<List<PendingNotificationRequest>> getPendingNotifications() async {
    return await _flutterLocalNotificationsPlugin.pendingNotificationRequests();
  }

  Future<bool> areNotificationsEnabled() async {
    if (Platform.isAndroid) {
      return await Permission.notification.isGranted;
    } else if (Platform.isIOS) {
      final settings = await _flutterLocalNotificationsPlugin
          .resolvePlatformSpecificImplementation<
            IOSFlutterLocalNotificationsPlugin
          >()
          ?.checkPermissions();
      return settings?.isEnabled ?? false;
    }
    return false;
  }

  Future<void> showImmediateNotification({
    required String title,
    required String body,
  }) async {
    if (!_isInitialized) {
      await initialize();
    }

    const AndroidNotificationDetails androidPlatformChannelSpecifics =
        AndroidNotificationDetails(
          'test_notifications',
          '–¢–µ—Å—Ç–æ–≤—ñ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è',
          channelDescription: '–ö–∞–Ω–∞–ª –¥–ª—è —Ç–µ—Å—Ç–æ–≤–∏—Ö —Å–ø–æ–≤—ñ—â–µ–Ω—å',
          importance: Importance.high,
          priority: Priority.high,
          icon: '@drawable/notification_icon',
          enableVibration: true,
          playSound: true,
        );

    const DarwinNotificationDetails iOSPlatformChannelSpecifics =
        DarwinNotificationDetails(
          sound: 'default',
          presentAlert: true,
          presentBadge: true,
          presentSound: true,
        );

    const NotificationDetails platformChannelSpecifics = NotificationDetails(
      android: androidPlatformChannelSpecifics,
      iOS: iOSPlatformChannelSpecifics,
    );

    await _flutterLocalNotificationsPlugin.show(
      999, // ID –¥–ª—è —Ç–µ—Å—Ç–æ–≤–∏—Ö —Å–ø–æ–≤—ñ—â–µ–Ω—å
      title,
      body,
      platformChannelSpecifics,
      payload: 'test_notification',
    );

    if (kDebugMode) {
      print('–ü–æ–∫–∞–∑–∞–Ω–æ –º–∏—Ç—Ç—î–≤–µ —Ç–µ—Å—Ç–æ–≤–µ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è: $title - $body');
    }
  }

  /// –ó–∞–ø–ª–∞–Ω—É–≤–∞—Ç–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Å–µ—Å—ñ—ó
  void scheduleSessionEndNotification(Session session) {
    try {
      final sessionDateTime = _parseSessionDateTime(session);
      final sessionEndTime = sessionDateTime.add(
        Duration(minutes: session.duration),
      );
      final now = DateTime.now();

      // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —Å–µ—Å—ñ—è —â–µ –Ω–µ –∑–∞–∫—ñ–Ω—á–∏–ª–∞—Å—å
      if (sessionEndTime.isBefore(now)) {
        print(
          '‚è∞ –°–µ—Å—ñ—è ${session.id} –≤–∂–µ –∑–∞–∫—ñ–Ω—á–∏–ª–∞—Å—å, –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ –ø–ª–∞–Ω—É–≤–∞–Ω–Ω—è —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è',
        );
        return;
      }

      // –°–∫–∞—Å–æ–≤—É—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ —Ç–∞–π–º–µ—Ä–∏ –¥–ª—è —Ü—ñ—î—ó —Å–µ—Å—ñ—ó
      _cancelSessionTimers(session.id!);

      // –ü–ª–∞–Ω—É—î–º–æ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Å–µ—Å—ñ—ó
      final timeUntilEnd = sessionEndTime.difference(now);
      _sessionTimers[session.id!] = Timer(timeUntilEnd, () {
        _showSessionEndNotification(session);
        _scheduleAutoMissedTimer(session);
      });

      print(
        '‚è∞ –ó–∞–ø–ª–∞–Ω–æ–≤–∞–Ω–æ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –¥–ª—è —Å–µ—Å—ñ—ó ${session.id} –Ω–∞ ${sessionEndTime.toIso8601String()}',
      );
    } catch (e) {
      print('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–ª–∞–Ω—É–≤–∞–Ω–Ω—è —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è: $e');
    }
  }

  /// –ó–∞–ø–ª–∞–Ω—É–≤–∞—Ç–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω—É –∑–º—ñ–Ω—É —Å—Ç–∞—Ç—É—Å—É –Ω–∞ "–ø—Ä–æ–ø—É—â–µ–Ω–æ" —á–µ—Ä–µ–∑ 15 —Ö–≤–∏–ª–∏–Ω –ø—ñ—Å–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è
  void _scheduleAutoMissedTimer(Session session) {
    _autoMissedTimers[session.id!] = Timer(Duration(minutes: 15), () {
      _autoMarkAsMissed(session);
    });

    print(
      '‚è∞ –ó–∞–ø–ª–∞–Ω–æ–≤–∞–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω—É –∑–º—ñ–Ω—É —Å—Ç–∞—Ç—É—Å—É –Ω–∞ "–ø—Ä–æ–ø—É—â–µ–Ω–æ" –¥–ª—è —Å–µ—Å—ñ—ó ${session.id} —á–µ—Ä–µ–∑ 15 —Ö–≤–∏–ª–∏–Ω',
    );
  }

  /// –ü–æ–∫–∞–∑–∞—Ç–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Å–µ—Å—ñ—ó
  Future<void> _showSessionEndNotification(Session session) async {
    // –û—Ç—Ä–∏–º—É—î–º–æ —ñ–º'—è –º–∞–π—Å—Ç—Ä–∏–Ω—ñ
    final masterName = await _getMasterName(session.masterId);

    // –õ–æ–∫–∞–ª—ñ–∑–æ–≤–∞–Ω—ñ —Ç–µ–∫—Å—Ç–∏
    final title =
        _languageProvider?.getText('‚è∞ –°–µ–∞–Ω—Å –∑–∞–≤–µ—Ä—à–µ–Ω', '‚è∞ –°–µ–∞–Ω—Å –∑–∞–≤–µ—Ä—à–µ–Ω') ??
        '‚è∞ –°–µ–∞–Ω—Å –∑–∞–≤–µ—Ä—à–µ–Ω';
    final updateStatusText =
        _languageProvider?.getText(
          '–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–Ω–æ–≤—ñ—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–ø–∏—Å—É',
          '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±–Ω–æ–≤–∏—Ç–µ —Å—Ç–∞—Ç—É—Å –∑–∞–ø–∏—Å–∏',
        ) ??
        '–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–Ω–æ–≤—ñ—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–ø–∏—Å—É';
    final masterText =
        _languageProvider?.getText('–ú–∞–π—Å—Ç—Ä–∏–Ω—è', '–ú–∞—Å—Ç–µ—Ä–∏—Ü–∞') ?? '–ú–∞–π—Å—Ç—Ä–∏–Ω—è';

    const AndroidNotificationDetails androidDetails =
        AndroidNotificationDetails(
          'session_end_channel',
          '–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Å–µ—Å—ñ–π',
          channelDescription: '–°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Å–µ—Å—ñ–π',
          importance: Importance.high,
          priority: Priority.high,
          showWhen: true,
        );

    const DarwinNotificationDetails iosDetails = DarwinNotificationDetails(
      presentAlert: true,
      presentBadge: true,
      presentSound: true,
    );

    const NotificationDetails details = NotificationDetails(
      android: androidDetails,
      iOS: iosDetails,
    );

    final body =
        '${session.clientName} - ${session.service}\n$masterText: $masterName\n$updateStatusText';

    await _flutterLocalNotificationsPlugin.show(
      session.id.hashCode,
      title,
      body,
      details,
    );

    print(
      'üì± –ü–æ–∫–∞–∑–∞–Ω–æ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Å–µ—Å—ñ—ó –¥–ª—è ${session.clientName} —É –º–∞–π—Å—Ç—Ä–∏–Ω—ñ $masterName',
    );
  }

  /// –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –ø–æ–∑–Ω–∞—á–∏—Ç–∏ —Å–µ—Å—ñ—é —è–∫ –ø—Ä–æ–ø—É—â–µ–Ω—É
  Future<void> _autoMarkAsMissed(Session session) async {
    try {
      // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞—Ç—É—Å —Å–µ—Å—ñ—ó
      final currentSession = await _firestoreService.getSessionById(
        session.id!,
      );

      if (currentSession != null && currentSession.status == '–≤ –æ—á—ñ–∫—É–≤–∞–Ω–Ω—ñ') {
        // –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç—É—Å –Ω–∞ "–ø—Ä–æ–ø—É—â–µ–Ω–æ"
        final updatedSession = Session(
          id: currentSession.id,
          masterId: currentSession.masterId,
          clientId: currentSession.clientId,
          clientName: currentSession.clientName,
          phone: currentSession.phone,
          service: currentSession.service,
          duration: currentSession.duration,
          date: currentSession.date,
          time: currentSession.time,
          notes: currentSession.notes,
          price: currentSession.price,
          isRegularClient: currentSession.isRegularClient,
          status: '–ø—Ä–æ–ø—É—â–µ–Ω–æ',
        );

        await _firestoreService.updateSession(
          currentSession.id!,
          updatedSession,
        );

        // –ü–æ–∫–∞–∑—É—î–º–æ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω—É –∑–º—ñ–Ω—É —Å—Ç–∞—Ç—É—Å—É
        await _showAutoMissedNotification(session);

        print(
          'üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –∑–º—ñ–Ω–µ–Ω–æ —Å—Ç–∞—Ç—É—Å —Å–µ—Å—ñ—ó ${session.id} –Ω–∞ "–ø—Ä–æ–ø—É—â–µ–Ω–æ"',
        );
      } else {
        print(
          '‚ÑπÔ∏è –°–µ—Å—ñ—è ${session.id} –≤–∂–µ –º–∞—î —Å—Ç–∞—Ç—É—Å "${currentSession?.status}", –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω—É –∑–º—ñ–Ω—É',
        );
      }
    } catch (e) {
      print('‚ùå –ü–æ–º–∏–ª–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ—ó –∑–º—ñ–Ω–∏ —Å—Ç–∞—Ç—É—Å—É: $e');
    }
  }

  /// –ü–æ–∫–∞–∑–∞—Ç–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω—É –∑–º—ñ–Ω—É —Å—Ç–∞—Ç—É—Å—É –Ω–∞ "–ø—Ä–æ–ø—É—â–µ–Ω–æ"
  Future<void> _showAutoMissedNotification(Session session) async {
    // –û—Ç—Ä–∏–º—É—î–º–æ —ñ–º'—è –º–∞–π—Å—Ç—Ä–∏–Ω—ñ
    final masterName = await _getMasterName(session.masterId);

    // –õ–æ–∫–∞–ª—ñ–∑–æ–≤–∞–Ω—ñ —Ç–µ–∫—Å—Ç–∏
    final title =
        _languageProvider?.getText(
          'üîÑ –°—Ç–∞—Ç—É—Å –∑–∞–ø–∏—Å—É: "–ü—Ä–æ–ø—É—â–µ–Ω–æ"',
          'üîÑ –°—Ç–∞—Ç—É—Å –∑–∞–ø–∏—Å–∏: "–ü—Ä–æ–ø—É—â–µ–Ω–æ"',
        ) ??
        'üîÑ –°—Ç–∞—Ç—É—Å –∑–∞–ø–∏—Å—É: "–ü—Ä–æ–ø—É—â–µ–Ω–æ"';
    final statusChangedText =
        _languageProvider?.getText(
          '–°—Ç–∞—Ç—É—Å –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞ "–ü—Ä–æ–ø—É—â–µ–Ω–æ"',
          '–°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ "–ü—Ä–æ–ø—É—â–µ–Ω–æ"',
        ) ??
        '–°—Ç–∞—Ç—É—Å –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞ "–ü—Ä–æ–ø—É—â–µ–Ω–æ"';
    final masterText =
        _languageProvider?.getText('–ú–∞–π—Å—Ç—Ä–∏–Ω—è', '–ú–∞—Å—Ç–µ—Ä–∏—Ü–∞') ?? '–ú–∞–π—Å—Ç—Ä–∏–Ω—è';

    const AndroidNotificationDetails androidDetails =
        AndroidNotificationDetails(
          'auto_missed_channel',
          '–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω—ñ –∑–º—ñ–Ω–∏ —Å—Ç–∞—Ç—É—Å—É',
          channelDescription: '–°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω—ñ –∑–º—ñ–Ω–∏ —Å—Ç–∞—Ç—É—Å—É —Å–µ—Å—ñ–π',
          importance: Importance.high,
          priority: Priority.high,
          showWhen: true,
        );

    const DarwinNotificationDetails iosDetails = DarwinNotificationDetails(
      presentAlert: true,
      presentBadge: true,
      presentSound: true,
    );

    const NotificationDetails details = NotificationDetails(
      android: androidDetails,
      iOS: iosDetails,
    );

    final body =
        '${session.clientName} - ${session.service}\n$masterText: $masterName\n$statusChangedText';

    await _flutterLocalNotificationsPlugin.show(
      (session.id.hashCode + 1000), // –Ü–Ω—à–∏–π ID –¥–ª—è —É–Ω–∏–∫–Ω–µ–Ω–Ω—è –∫–æ–Ω—Ñ–ª—ñ–∫—Ç—ñ–≤
      title,
      body,
      details,
    );

    print(
      'ÔøΩ –ü–æ–∫–∞–∑–∞–Ω–æ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω—É –∑–º—ñ–Ω—É —Å—Ç–∞—Ç—É—Å—É –¥–ª—è ${session.clientName} —É –º–∞–π—Å—Ç—Ä–∏–Ω—ñ $masterName',
    );
  }

  /// –°–∫–∞—Å—É–≤–∞—Ç–∏ —Ç–∞–π–º–µ—Ä–∏ –¥–ª—è —Å–µ—Å—ñ—ó (–∫–æ–ª–∏ —Å—Ç–∞—Ç—É—Å –∑–º—ñ–Ω—é—î—Ç—å—Å—è –≤—Ä—É—á–Ω—É)
  void cancelSessionTimers(String sessionId) {
    _cancelSessionTimers(sessionId);
    print('‚èπÔ∏è –°–∫–∞—Å–æ–≤–∞–Ω–æ —Ç–∞–π–º–µ—Ä–∏ –¥–ª—è —Å–µ—Å—ñ—ó $sessionId');
  }

  void _cancelSessionTimers(String sessionId) {
    _sessionTimers[sessionId]?.cancel();
    _sessionTimers.remove(sessionId);

    _autoMissedTimers[sessionId]?.cancel();
    _autoMissedTimers.remove(sessionId);
  }

  /// –ó–∞–ø–ª–∞–Ω—É–≤–∞—Ç–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –¥–ª—è –≤—Å—ñ—Ö –∞–∫—Ç–∏–≤–Ω–∏—Ö —Å–µ—Å—ñ–π
  Future<void> scheduleNotificationsForActiveSessions(
    List<Session> sessions,
  ) async {
    final now = DateTime.now();
    final today = DateTime(now.year, now.month, now.day);

    // –§—ñ–ª—å—Ç—Ä—É—î–º–æ —Ç—ñ–ª—å–∫–∏ —Å–µ—Å—ñ—ó –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ —Ç–∞ –≤ –º–∞–π–±—É—Ç–Ω—å–æ–º—É –∑—ñ —Å—Ç–∞—Ç—É—Å–æ–º "–≤ –æ—á—ñ–∫—É–≤–∞–Ω–Ω—ñ"
    final activeSessions = sessions.where((session) {
      try {
        final sessionDate = DateTime.parse(session.date);
        final sessionDateTime = DateTime(
          sessionDate.year,
          sessionDate.month,
          sessionDate.day,
        );

        return (sessionDateTime.isAtSameMomentAs(today) ||
                sessionDateTime.isAfter(today)) &&
            session.status == '–≤ –æ—á—ñ–∫—É–≤–∞–Ω–Ω—ñ';
      } catch (e) {
        return false;
      }
    }).toList();

    print(
      'üìÖ –ü–ª–∞–Ω—É–≤–∞–Ω–Ω—è —Å–ø–æ–≤—ñ—â–µ–Ω—å –¥–ª—è ${activeSessions.length} –∞–∫—Ç–∏–≤–Ω–∏—Ö —Å–µ—Å—ñ–π',
    );

    for (final session in activeSessions) {
      scheduleSessionEndNotification(session);
    }
  }

  DateTime _parseSessionDateTime(Session session) {
    final dateParts = session.date.split('-');
    final timeParts = session.time.split(':');

    return DateTime(
      int.parse(dateParts[0]),
      int.parse(dateParts[1]),
      int.parse(dateParts[2]),
      int.parse(timeParts[0]),
      int.parse(timeParts[1]),
    );
  }

  /// –û—á–∏—Å—Ç–∏—Ç–∏ –≤—Å—ñ —Ç–∞–π–º–µ—Ä–∏ (–ø—Ä–∏ –∑–∞–∫—Ä–∏—Ç—Ç—ñ –¥–æ–¥–∞—Ç–∫—É)
  void dispose() {
    for (final timer in _sessionTimers.values) {
      timer.cancel();
    }
    for (final timer in _autoMissedTimers.values) {
      timer.cancel();
    }

    _sessionTimers.clear();
    _autoMissedTimers.clear();

    print('üßπ –û—á–∏—â–µ–Ω–æ –≤—Å—ñ —Ç–∞–π–º–µ—Ä–∏ —Å–ø–æ–≤—ñ—â–µ–Ω—å');
  }

  Future<void> showSimpleTest() async {
    if (!_isInitialized) {
      await initialize();
    }

    // –ü–æ–∫–∞–∑—É—î–º–æ –º–∏—Ç—Ç—î–≤–µ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è
    await _flutterLocalNotificationsPlugin.show(
      999,
      '–ü—Ä–æ—Å—Ç–∏–π —Ç–µ—Å—Ç',
      '–Ø–∫—â–æ –±–∞—á–∏—Ç–µ —Ü–µ - —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–∞—Ü—é—é—Ç—å!',
      const NotificationDetails(
        android: AndroidNotificationDetails(
          'test_simple',
          '–ü—Ä–æ—Å—Ç–∏–π —Ç–µ—Å—Ç',
          channelDescription: '–ö–∞–Ω–∞–ª –¥–ª—è –ø—Ä–æ—Å—Ç–æ–≥–æ —Ç–µ—Å—Ç—É',
          importance: Importance.max,
          priority: Priority.high,
        ),
      ),
    );

    // –¢–∞–∫–æ–∂ –ø–ª–∞–Ω—É—î–º–æ —Ç–µ—Å—Ç–æ–≤–µ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è —á–µ—Ä–µ–∑ 1 —Ö–≤–∏–ª–∏–Ω—É
    try {
      final testTime = DateTime.now().add(Duration(minutes: 1));
      final scheduledTime = tz.TZDateTime.from(testTime, tz.local);

      await _flutterLocalNotificationsPlugin.zonedSchedule(
        998, // –Ü–Ω—à–∏–π ID –¥–ª—è –∑–∞–ø–ª–∞–Ω–æ–≤–∞–Ω–æ–≥–æ —Ç–µ—Å—Ç—É
        '–ó–∞–ø–ª–∞–Ω–æ–≤–∞–Ω–µ —Ç–µ—Å—Ç–æ–≤–µ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è',
        '–¶–µ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –±—É–ª–æ –∑–∞–ø–ª–∞–Ω–æ–≤–∞–Ω–æ –Ω–∞ 1 —Ö–≤–∏–ª–∏–Ω—É!',
        scheduledTime,
        const NotificationDetails(
          android: AndroidNotificationDetails(
            'test_simple',
            '–ü—Ä–æ—Å—Ç–∏–π —Ç–µ—Å—Ç',
            channelDescription: '–ö–∞–Ω–∞–ª –¥–ª—è –ø—Ä–æ—Å—Ç–æ–≥–æ —Ç–µ—Å—Ç—É',
            importance: Importance.max,
            priority: Priority.high,
          ),
        ),
        androidScheduleMode: AndroidScheduleMode.exactAllowWhileIdle,
        uiLocalNotificationDateInterpretation:
            UILocalNotificationDateInterpretation.absoluteTime,
        payload: 'scheduled_test',
      );

      if (kDebugMode) {
        print('‚úÖ –í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –º–∏—Ç—Ç—î–≤–∏–π —Ç–µ—Å—Ç + –∑–∞–ø–ª–∞–Ω–æ–≤–∞–Ω–æ —Ç–µ—Å—Ç –Ω–∞ ${testTime}');
      }
    } catch (e) {
      print('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–ª–∞–Ω—É–≤–∞–Ω–Ω—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è: $e');
    }
  }
}
