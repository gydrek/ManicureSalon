import 'dart:io';
import 'package:flutter/foundation.dart';
import 'package:flutter_local_notifications/flutter_local_notifications.dart';
import 'package:timezone/timezone.dart' as tz;
import 'package:timezone/data/latest.dart' as tz;
import 'package:permission_handler/permission_handler.dart';
import 'package:shared_preferences/shared_preferences.dart';

class NotificationService {
  static final NotificationService _instance = NotificationService._internal();
  factory NotificationService() => _instance;
  NotificationService._internal();

  final FlutterLocalNotificationsPlugin _flutterLocalNotificationsPlugin =
      FlutterLocalNotificationsPlugin();

  bool _isInitialized = false;

  Future<void> initialize() async {
    if (_isInitialized) return;

    // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ —á–∞—Å–æ–≤—ñ –∑–æ–Ω–∏
    tz.initializeTimeZones();

    // –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –¥–ª—è Android
    const AndroidInitializationSettings initializationSettingsAndroid =
        AndroidInitializationSettings('@drawable/notification_icon');

    // –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –¥–ª—è iOS
    const DarwinInitializationSettings initializationSettingsIOS =
        DarwinInitializationSettings(
      requestAlertPermission: true,
      requestBadgePermission: true,
      requestSoundPermission: true,
    );

    const InitializationSettings initializationSettings =
        InitializationSettings(
      android: initializationSettingsAndroid,
      iOS: initializationSettingsIOS,
    );

    await _flutterLocalNotificationsPlugin.initialize(
      initializationSettings,
      onDidReceiveNotificationResponse: _onDidReceiveNotificationResponse,
    );

    // –°—Ç–≤–æ—Ä—é—î–º–æ –∫–∞–Ω–∞–ª —Å–ø–æ–≤—ñ—â–µ–Ω—å –¥–ª—è Android
    if (Platform.isAndroid) {
      await _createNotificationChannel();
    }

    // –ó–∞–ø–∏—Ç—É—î–º–æ –¥–æ–∑–≤–æ–ª–∏
    await _requestPermissions();

    _isInitialized = true;
  }

  Future<void> _createNotificationChannel() async {
    final AndroidFlutterLocalNotificationsPlugin? androidImplementation =
        _flutterLocalNotificationsPlugin.resolvePlatformSpecificImplementation<AndroidFlutterLocalNotificationsPlugin>();

    if (androidImplementation == null) {
      print('‚ö†Ô∏è Android implementation –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ');
      return;
    }

    // –ö–∞–Ω–∞–ª –¥–ª—è –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å –ø—Ä–æ —Å–µ—Å—ñ—ó
    const AndroidNotificationChannel sessionChannel = AndroidNotificationChannel(
      'session_reminders',
      '–ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –ø—Ä–æ –∑–∞–ø–∏—Å–∏',
      description: '–°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –º–∞–π–±—É—Ç–Ω—ñ –∑–∞–ø–∏—Å–∏ –∫–ª—ñ—î–Ω—Ç–æ–∫',
      importance: Importance.high,
      playSound: true,
      enableVibration: true,
    );

    // –ö–∞–Ω–∞–ª –¥–ª—è —Ç–µ—Å—Ç–æ–≤–∏—Ö —Å–ø–æ–≤—ñ—â–µ–Ω—å
    const AndroidNotificationChannel testChannel = AndroidNotificationChannel(
      'test_notifications',
      '–¢–µ—Å—Ç–æ–≤—ñ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è',
      description: '–ö–∞–Ω–∞–ª –¥–ª—è —Ç–µ—Å—Ç–æ–≤–∏—Ö —Å–ø–æ–≤—ñ—â–µ–Ω—å',
      importance: Importance.high,
      playSound: true,
      enableVibration: true,
    );

    // –ö–∞–Ω–∞–ª –¥–ª—è –ø—Ä–æ—Å—Ç–æ–≥–æ —Ç–µ—Å—Ç—É
    const AndroidNotificationChannel simpleTestChannel = AndroidNotificationChannel(
      'test_simple',
      '–ü—Ä–æ—Å—Ç–∏–π —Ç–µ—Å—Ç',
      description: '–ö–∞–Ω–∞–ª –¥–ª—è –ø—Ä–æ—Å—Ç–æ–≥–æ —Ç–µ—Å—Ç—É',
      importance: Importance.max,
      playSound: true,
      enableVibration: true,
    );

    try {
      await androidImplementation.createNotificationChannel(sessionChannel);
      await androidImplementation.createNotificationChannel(testChannel);
      await androidImplementation.createNotificationChannel(simpleTestChannel);
      
      if (kDebugMode) {
        print('‚úÖ –í—Å—ñ –∫–∞–Ω–∞–ª–∏ —Å–ø–æ–≤—ñ—â–µ–Ω—å —Å—Ç–≤–æ—Ä–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ');
      }
    } catch (e) {
      print('‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–∞–Ω–∞–ª—ñ–≤: $e');
    }
  }

  Future<void> _requestPermissions() async {
    if (Platform.isAndroid) {
      await Permission.notification.isDenied.then((value) {
        if (value) {
          Permission.notification.request();
        }
      });
    }

    if (Platform.isIOS) {
      await _flutterLocalNotificationsPlugin
          .resolvePlatformSpecificImplementation<
              IOSFlutterLocalNotificationsPlugin>()
          ?.requestPermissions(
            alert: true,
            badge: true,
            sound: true,
          );
    }
  }

  void _onDidReceiveNotificationResponse(NotificationResponse response) {
    // –û–±—Ä–æ–±–∫–∞ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –Ω–∞ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è
    if (kDebugMode) {
      print('–ù–∞—Ç–∏—Å–Ω—É—Ç–æ –Ω–∞ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è: ${response.payload}');
    }
  }

  Future<void> scheduleSessionReminder({
    required String sessionId,
    required String clientName,
    required String masterName,
    required DateTime sessionDateTime,
    required String masterId,
  }) async {
    if (!_isInitialized) {
      await initialize();
    }

    if (kDebugMode) {
      print('–ü–ª–∞–Ω—É–≤–∞–Ω–Ω—è —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –¥–ª—è —Å–µ—Å—ñ—ó $sessionId');
      print('–ö–ª—ñ—î–Ω—Ç: $clientName, –ú–∞–π—Å—Ç–µ—Ä: $masterName');
      print('–ß–∞—Å —Å–µ—Å—ñ—ó: $sessionDateTime');
    }

    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —É–≤—ñ–º–∫–Ω–µ–Ω—ñ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –¥–ª—è —Ü—å–æ–≥–æ –º–∞–π—Å—Ç—Ä–∞
    final prefs = await SharedPreferences.getInstance();
    final notificationsEnabled = prefs.getBool('notifications_$masterId') ?? true;
    
    if (!notificationsEnabled) {
      if (kDebugMode) {
        print('–°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –¥–ª—è –º–∞–π—Å—Ç—Ä–∞ $masterName –≤–∏–º–∫–Ω–µ–Ω—ñ');
      }
      return;
    }

    // –ß–∞—Å —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è - –∑–∞ 30 —Ö–≤–∏–ª–∏–Ω –¥–æ —Å–µ—Å—ñ—ó
    final notificationTime = sessionDateTime.subtract(const Duration(minutes: 30));
    final now = DateTime.now();
    
    if (kDebugMode) {
      print('–ß–∞—Å —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è: $notificationTime');
      print('–ü–æ—Ç–æ—á–Ω–∏–π —á–∞—Å: $now');
      print('–†—ñ–∑–Ω–∏—Ü—è: ${notificationTime.difference(now).inMinutes} —Ö–≤–∏–ª–∏–Ω');
    }
    
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —á–∞—Å —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è —â–µ –Ω–µ –º–∏–Ω—É–≤
    if (notificationTime.isBefore(now)) {
      if (kDebugMode) {
        print('‚ö†Ô∏è –ß–∞—Å –¥–ª—è —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –≤–∂–µ –º–∏–Ω—É–≤. –°–µ—Å—ñ—è –∑–∞–Ω–∞–¥—Ç–æ –±–ª–∏–∑—å–∫–æ –∞–±–æ –≤ –º–∏–Ω—É–ª–æ–º—É.');
        print('–†–µ–∫–æ–º–µ–Ω–¥—É—î—Ç—å—Å—è —Å—Ç–≤–æ—Ä—é–≤–∞—Ç–∏ –∑–∞–ø–∏—Å–∏ –º—ñ–Ω—ñ–º—É–º –∑–∞ 30 —Ö–≤–∏–ª–∏–Ω.');
      }
      return;
    }
    
    // –Ø–∫—â–æ –¥–æ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –º–µ–Ω—à–µ 1 —Ö–≤–∏–ª–∏–Ω–∏ - –ø–æ–∫–∞–∑—É—î–º–æ –º–∏—Ç—Ç—î–≤–µ
    if (notificationTime.difference(now).inMinutes < 1) {
      if (kDebugMode) {
        print('‚ö° –ß–∞—Å —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –¥—É–∂–µ –±–ª–∏–∑—å–∫–æ, –ø–æ–∫–∞–∑—É—î–º–æ –º–∏—Ç—Ç—î–≤–µ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è');
      }
      
      await showImmediateNotification(
        title: '–ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –ø—Ä–æ –∑–∞–ø–∏—Å',
        body: '–ù–µ–∑–∞–±–∞—Ä–æ–º: $clientName —É –º–∞–π—Å—Ç—Ä–∞ $masterName',
      );
      return;
    }

    // –°—Ç–≤–æ—Ä—é—î–º–æ —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π ID –¥–ª—è —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è
    final notificationId = sessionId.hashCode;

    // –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –¥–ª—è Android
    const AndroidNotificationDetails androidPlatformChannelSpecifics =
        AndroidNotificationDetails(
      'session_reminders',
      '–ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –ø—Ä–æ –∑–∞–ø–∏—Å–∏',
      channelDescription: '–°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –º–∞–π–±—É—Ç–Ω—ñ –∑–∞–ø–∏—Å–∏ –∫–ª—ñ—î–Ω—Ç–æ–∫',
      importance: Importance.high,
      priority: Priority.high,
      icon: '@drawable/notification_icon',
      enableVibration: true,
      playSound: true,
    );

    // –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –¥–ª—è iOS
    const DarwinNotificationDetails iOSPlatformChannelSpecifics =
        DarwinNotificationDetails(
      sound: 'default',
      presentAlert: true,
      presentBadge: true,
      presentSound: true,
    );

    const NotificationDetails platformChannelSpecifics = NotificationDetails(
      android: androidPlatformChannelSpecifics,
      iOS: iOSPlatformChannelSpecifics,
    );

    // –§–æ—Ä–º—É—î–º–æ —Ç–µ–∫—Å—Ç —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è
    final title = '–ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –ø—Ä–æ –∑–∞–ø–∏—Å';
    final body = '–ß–µ—Ä–µ–∑ 30 —Ö–≤–∏–ª–∏–Ω: $clientName —É –º–∞–π—Å—Ç—Ä–∞ $masterName';

    // –ü–ª–∞–Ω—É—î–º–æ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è
    try {
      final scheduledTime = tz.TZDateTime.from(notificationTime, tz.local);
      
      if (kDebugMode) {
        print('üìÖ –ß–∞—Å –¥–ª—è –ø–ª–∞–Ω—É–≤–∞–Ω–Ω—è: $scheduledTime');
        print('üåç –ß–∞—Å–æ–≤–∞ –∑–æ–Ω–∞: ${tz.local.name}');
        print('üî¢ ID —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è: $notificationId');
      }
      
      await _flutterLocalNotificationsPlugin.zonedSchedule(
        notificationId,
        title,
        body,
        scheduledTime,
        platformChannelSpecifics,
        androidScheduleMode: AndroidScheduleMode.exactAllowWhileIdle,
        uiLocalNotificationDateInterpretation:
            UILocalNotificationDateInterpretation.absoluteTime,
        payload: 'session_$sessionId',
      );

      if (kDebugMode) {
        print('‚úÖ –°–ø–æ–≤—ñ—â–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –∑–∞–ø–ª–∞–Ω–æ–≤–∞–Ω–æ –¥–ª—è —Å–µ—Å—ñ—ó $sessionId –Ω–∞ $notificationTime');
        
        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –≤—ñ–¥—Ä–∞–∑—É –ø—ñ—Å–ª—è –ø–ª–∞–Ω—É–≤–∞–Ω–Ω—è
        final pending = await getPendingNotifications();
        print('üìã –ó–∞—Ä–∞–∑ –∑–∞–ø–ª–∞–Ω–æ–≤–∞–Ω–æ —Å–ø–æ–≤—ñ—â–µ–Ω—å: ${pending.length}');
        for (final p in pending) {
          print('  - ID: ${p.id}, Title: ${p.title}');
        }
      }
    } catch (e) {
      print('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–ª–∞–Ω—É–≤–∞–Ω–Ω—è —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è: $e');
      rethrow;
    }
  }

  Future<void> cancelSessionReminder(String sessionId) async {
    final notificationId = sessionId.hashCode;
    await _flutterLocalNotificationsPlugin.cancel(notificationId);
    
    if (kDebugMode) {
      print('–°–∫–∞—Å–æ–≤–∞–Ω–æ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –¥–ª—è —Å–µ—Å—ñ—ó $sessionId');
    }
  }

  Future<void> cancelAllNotifications() async {
    await _flutterLocalNotificationsPlugin.cancelAll();
    
    if (kDebugMode) {
      print('–°–∫–∞—Å–æ–≤–∞–Ω–æ –≤—Å—ñ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è');
    }
  }

  Future<List<PendingNotificationRequest>> getPendingNotifications() async {
    return await _flutterLocalNotificationsPlugin.pendingNotificationRequests();
  }

  Future<bool> areNotificationsEnabled() async {
    if (Platform.isAndroid) {
      return await Permission.notification.isGranted;
    } else if (Platform.isIOS) {
      final settings = await _flutterLocalNotificationsPlugin
          .resolvePlatformSpecificImplementation<
              IOSFlutterLocalNotificationsPlugin>()
          ?.checkPermissions();
      return settings?.isEnabled ?? false;
    }
    return false;
  }

  Future<void> showImmediateNotification({
    required String title,
    required String body,
  }) async {
    if (!_isInitialized) {
      await initialize();
    }

    const AndroidNotificationDetails androidPlatformChannelSpecifics =
        AndroidNotificationDetails(
      'test_notifications',
      '–¢–µ—Å—Ç–æ–≤—ñ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è',
      channelDescription: '–ö–∞–Ω–∞–ª –¥–ª—è —Ç–µ—Å—Ç–æ–≤–∏—Ö —Å–ø–æ–≤—ñ—â–µ–Ω—å',
      importance: Importance.high,
      priority: Priority.high,
      icon: '@drawable/notification_icon',
      enableVibration: true,
      playSound: true,
    );

    const DarwinNotificationDetails iOSPlatformChannelSpecifics =
        DarwinNotificationDetails(
      sound: 'default',
      presentAlert: true,
      presentBadge: true,
      presentSound: true,
    );

    const NotificationDetails platformChannelSpecifics = NotificationDetails(
      android: androidPlatformChannelSpecifics,
      iOS: iOSPlatformChannelSpecifics,
    );

    await _flutterLocalNotificationsPlugin.show(
      999, // ID –¥–ª—è —Ç–µ—Å—Ç–æ–≤–∏—Ö —Å–ø–æ–≤—ñ—â–µ–Ω—å
      title,
      body,
      platformChannelSpecifics,
      payload: 'test_notification',
    );

    if (kDebugMode) {
      print('–ü–æ–∫–∞–∑–∞–Ω–æ –º–∏—Ç—Ç—î–≤–µ —Ç–µ—Å—Ç–æ–≤–µ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è: $title - $body');
    }
  }

  Future<void> showSimpleTest() async {
    if (!_isInitialized) {
      await initialize();
    }
    
    // –ü–æ–∫–∞–∑—É—î–º–æ –º–∏—Ç—Ç—î–≤–µ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è
    await _flutterLocalNotificationsPlugin.show(
      999,
      '–ü—Ä–æ—Å—Ç–∏–π —Ç–µ—Å—Ç',
      '–Ø–∫—â–æ –±–∞—á–∏—Ç–µ —Ü–µ - —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–∞—Ü—é—é—Ç—å!',
      const NotificationDetails(
        android: AndroidNotificationDetails(
          'test_simple',
          '–ü—Ä–æ—Å—Ç–∏–π —Ç–µ—Å—Ç',
          channelDescription: '–ö–∞–Ω–∞–ª –¥–ª—è –ø—Ä–æ—Å—Ç–æ–≥–æ —Ç–µ—Å—Ç—É',
          importance: Importance.max,
          priority: Priority.high,
        ),
      ),
    );
    
    // –¢–∞–∫–æ–∂ –ø–ª–∞–Ω—É—î–º–æ —Ç–µ—Å—Ç–æ–≤–µ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è —á–µ—Ä–µ–∑ 1 —Ö–≤–∏–ª–∏–Ω—É
    try {
      final testTime = DateTime.now().add(Duration(minutes: 1));
      final scheduledTime = tz.TZDateTime.from(testTime, tz.local);
      
      await _flutterLocalNotificationsPlugin.zonedSchedule(
        998, // –Ü–Ω—à–∏–π ID –¥–ª—è –∑–∞–ø–ª–∞–Ω–æ–≤–∞–Ω–æ–≥–æ —Ç–µ—Å—Ç—É
        '–ó–∞–ø–ª–∞–Ω–æ–≤–∞–Ω–µ —Ç–µ—Å—Ç–æ–≤–µ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è',
        '–¶–µ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –±—É–ª–æ –∑–∞–ø–ª–∞–Ω–æ–≤–∞–Ω–æ –Ω–∞ 1 —Ö–≤–∏–ª–∏–Ω—É!',
        scheduledTime,
        const NotificationDetails(
          android: AndroidNotificationDetails(
            'test_simple',
            '–ü—Ä–æ—Å—Ç–∏–π —Ç–µ—Å—Ç',
            channelDescription: '–ö–∞–Ω–∞–ª –¥–ª—è –ø—Ä–æ—Å—Ç–æ–≥–æ —Ç–µ—Å—Ç—É',
            importance: Importance.max,
            priority: Priority.high,
          ),
        ),
        androidScheduleMode: AndroidScheduleMode.exactAllowWhileIdle,
        uiLocalNotificationDateInterpretation:
            UILocalNotificationDateInterpretation.absoluteTime,
        payload: 'scheduled_test',
      );
      
      if (kDebugMode) {
        print('‚úÖ –í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –º–∏—Ç—Ç—î–≤–∏–π —Ç–µ—Å—Ç + –∑–∞–ø–ª–∞–Ω–æ–≤–∞–Ω–æ —Ç–µ—Å—Ç –Ω–∞ ${testTime}');
      }
    } catch (e) {
      print('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–ª–∞–Ω—É–≤–∞–Ω–Ω—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è: $e');
    }
  }
}