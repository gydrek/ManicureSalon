import 'dart:async';
import 'dart:io';
import 'package:connectivity_plus/connectivity_plus.dart';
import 'package:flutter/foundation.dart';

/// –°–µ—Ä–≤—ñ—Å –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç—É
class ConnectivityService extends ChangeNotifier {
  static final ConnectivityService _instance = ConnectivityService._internal();
  factory ConnectivityService() => _instance;
  ConnectivityService._internal();

  final Connectivity _connectivity = Connectivity();
  StreamSubscription<List<ConnectivityResult>>? _connectivitySubscription;

  bool _isConnected = true; // –û–ø—Ç–∏–º—ñ—Å—Ç–∏—á–Ω–æ –ø—Ä–∏–ø—É—Å–∫–∞—î–º–æ, —â–æ —î –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è
  bool _isChecking = false; // –ù–µ –ø–æ–∫–∞–∑—É—î–º–æ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É –Ω–∞ –ø–æ—á–∞—Ç–∫—É

  /// –ß–∏ —î –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç—É
  bool get isConnected => _isConnected;

  /// –ß–∏ –≤—ñ–¥–±—É–≤–∞—î—Ç—å—Å—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è
  bool get isChecking => _isChecking;

  /// –ß–∏ —Å–µ—Ä–≤—ñ—Å –≥–æ—Ç–æ–≤–∏–π (–ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Ö–æ—á–∞ –± —Ä–∞–∑)
  bool get isReady => !_isChecking;

  /// –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Å–µ—Ä–≤—ñ—Å—É
  Future<void> initialize() async {
    print('üåê –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ ConnectivityService');

    // –°–ª—É—Ö–∞—î–º–æ –∑–º—ñ–Ω–∏ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è (–æ—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è —Å–µ—Ä–≤—ñ—Å—É)
    _connectivitySubscription = _connectivity.onConnectivityChanged.listen((
      List<ConnectivityResult> results,
    ) {
      print('üì± –ó–º—ñ–Ω–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è: $results');
      _onConnectivityChanged(results);
    });

    // –®–≤–∏–¥–∫–∞ –ø–æ—á–∞—Ç–∫–æ–≤–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ —É —Ñ–æ–Ω—ñ (–Ω–µ –±–ª–æ–∫—É—î–º–æ UI)
    checkConnectivity();

    print('‚úÖ ConnectivityService —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ');
  }

  /// –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç—É
  Future<void> checkConnectivity() async {
    if (_isChecking) return;

    _isChecking = true;
    notifyListeners();

    try {
      print('üîç –ü–æ—á–∏–Ω–∞—î–º–æ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è...');

      // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –∑'—î–¥–Ω–∞–Ω–Ω—è
      final connectivityResults = await _connectivity.checkConnectivity();
      print('üîç –†–µ–∑—É–ª—å—Ç–∞—Ç connectivity: $connectivityResults');

      if (connectivityResults.contains(ConnectivityResult.none)) {
        _isConnected = false;
        print('‚ùå –ù–µ–º–∞—î –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –º–µ—Ä–µ–∂—ñ');
      } else {
        // –°–ø—Ä–æ—â–µ–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ - —è–∫—â–æ —î –±—É–¥—å-—è–∫–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è, –≤–≤–∞–∂–∞—î–º–æ —â–æ —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç —î
        // –î–æ–¥–∞—Ç–∫–æ–≤—É –ø–µ—Ä–µ–≤—ñ—Ä–∫—É —Ä–æ–±–∏–º–æ –∑ –∫–æ—Ä–æ—Ç–∫–∏–º —Ç–∞–π–º–∞—É—Ç–æ–º
        _isConnected = await _hasInternetConnection().timeout(
          Duration(seconds: 3),
          onTimeout: () {
            print('‚è∞ –¢–∞–π–º–∞—É—Ç –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ - –ø—Ä–∏–ø—É—Å–∫–∞—î–º–æ —â–æ —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç —î');
            return true; // –ü—Ä–∏ —Ç–∞–π–º–∞—É—Ç—ñ –ø—Ä–∏–ø—É—Å–∫–∞—î–º–æ —â–æ —î –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è
          },
        );
        print(
          _isConnected ? '‚úÖ –Ü–Ω—Ç–µ—Ä–Ω–µ—Ç –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ' : '‚ùå –Ü–Ω—Ç–µ—Ä–Ω–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π',
        );
      }
    } catch (e) {
      print('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è: $e');
      // –ü—Ä–∏ –ø–æ–º–∏–ª—Ü—ñ –ø—Ä–∏–ø—É—Å–∫–∞—î–º–æ —â–æ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è —î
      _isConnected = true;
    } finally {
      _isChecking = false;
      notifyListeners();
      print(
        'üîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: isConnected=$_isConnected, isChecking=$_isChecking',
      );
    }
  }

  /// –î–æ–¥–∞—Ç–∫–æ–≤–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—ñ —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç—É —á–µ—Ä–µ–∑ ping
  Future<bool> _hasInternetConnection() async {
    try {
      print('üîç –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –¥–æ—Å—Ç—É–ø–Ω—ñ—Å—Ç—å —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç—É (google.com)...');

      final result = await InternetAddress.lookup(
        'google.com',
      ).timeout(Duration(seconds: 2)); // –ö–æ—Ä–æ—Ç–∫–∏–π —Ç–∞–π–º–∞—É—Ç

      final hasConnection =
          result.isNotEmpty && result[0].rawAddress.isNotEmpty;
      print('üîç –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ google.com: $hasConnection');

      return hasConnection;
    } catch (e) {
      print('üîç –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ google.com: $e');
      return true; // –ü—Ä–∏ –ø–æ–º–∏–ª—Ü—ñ –ø—Ä–∏–ø—É—Å–∫–∞—î–º–æ —â–æ —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç —î
    }
  }

  /// –û–±—Ä–æ–±–∫–∞ –∑–º—ñ–Ω–∏ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è
  void _onConnectivityChanged(List<ConnectivityResult> results) {
    print('üîÑ –ó–º—ñ–Ω–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è: $results');
    checkConnectivity();
  }

  /// –û—Ç—Ä–∏–º–∞—Ç–∏ —Ç–µ–∫—Å—Ç–æ–≤–∏–π —Å—Ç–∞—Ç—É—Å –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è
  String getConnectionStatus() {
    if (_isChecking) {
      return '–ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è...';
    } else if (_isConnected) {
      return '–ü—ñ–¥–∫–ª—é—á–µ–Ω–æ –¥–æ —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç—É';
    } else {
      return '–ù–µ–º–∞—î –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç—É';
    }
  }

  /// –û—Ç—Ä–∏–º–∞—Ç–∏ —ñ–∫–æ–Ω–∫—É —Å—Ç–∞—Ç—É—Å—É
  String getConnectionIcon() {
    if (_isChecking) {
      return 'üîÑ';
    } else if (_isConnected) {
      return 'üü¢';
    } else {
      return 'üî¥';
    }
  }

  /// –û—á–∏—â–µ–Ω–Ω—è —Ä–µ—Å—É—Ä—Å—ñ–≤
  @override
  void dispose() {
    _connectivitySubscription?.cancel();
    super.dispose();
  }
}
